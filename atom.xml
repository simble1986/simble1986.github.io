<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simble的小站</title>
  
  <subtitle>晒晒狗vs练练手</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.simble.xyz/"/>
  <updated>2018-05-07T02:40:23.915Z</updated>
  <id>http://blog.simble.xyz/</id>
  
  <author>
    <name>Simble</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python virtenv环境搭建</title>
    <link href="http://blog.simble.xyz/post/4926e490.html"/>
    <id>http://blog.simble.xyz/post/4926e490.html</id>
    <published>2018-05-06T18:32:01.000Z</published>
    <updated>2018-05-07T02:40:23.915Z</updated>
    
    <content type="html"><![CDATA[<p>近期由于组内测试框架更新频繁，且由于框架采用了插件形式，安装包很多。当使用同一台服务器来安装时，可能会导致生产环境破坏。为此，必须采用virtenv方式。</p><p>virtualenv的环境建立并不复杂，但每次都需要去查一番。特此记录</p><a id="more"></a><h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4><p>安装virtualenv</p><ul><li>python2.7</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure><ul><li>python3</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install virtualenv</span><br></pre></td></tr></table></figure><h4 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h4><ul><li>创建工作目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@vm1:/home/<span class="built_in">test</span><span class="comment"># mkdir myproject</span></span><br><span class="line">root@vm1:/home/<span class="built_in">test</span><span class="comment"># cd myproject</span></span><br></pre></td></tr></table></figure><ul><li>创建独立的python运行环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@vm1:/home/<span class="built_in">test</span><span class="comment"># virtualenv venv</span></span><br><span class="line">New python executable <span class="keyword">in</span> /home/<span class="built_in">test</span>/myproject/venv/bin/python</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br><span class="line">root@vm1:/home/<span class="built_in">test</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>引用新的环境变量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@vm1:/home/<span class="built_in">test</span><span class="comment"># source venv/bin/activate</span></span><br><span class="line">(venv)root@vm1:/home/<span class="built_in">test</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>开始使用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(venv)root@vm1:/home/<span class="built_in">test</span><span class="comment"># pip install docker</span></span><br></pre></td></tr></table></figure><ul><li>退出当前venv环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(venv)root@vm1:/home/<span class="built_in">test</span><span class="comment"># deactivate</span></span><br><span class="line">root@vm1:/home/<span class="built_in">test</span><span class="comment">#</span></span><br></pre></td></tr></table></figure><h3 id="一个小问题"><a class="markdownIt-Anchor" href="#一个小问题"></a> 一个小问题</h3><p>git clone时遇到<code>server certificate verification failed. CAfile: /etc/ssl/certs/ca-certificates.crt CRLfile: none</code>的解决方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GIT_SSL_NO_VERIFY=1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期由于组内测试框架更新频繁，且由于框架采用了插件形式，安装包很多。当使用同一台服务器来安装时，可能会导致生产环境破坏。为此，必须采用virtenv方式。&lt;/p&gt;
&lt;p&gt;virtualenv的环境建立并不复杂，但每次都需要去查一番。特此记录&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://blog.simble.xyz/categories/python/"/>
    
    
      <category term="python" scheme="http://blog.simble.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Docker API一种连接到PTY的交互方法</title>
    <link href="http://blog.simble.xyz/post/b18ab8ad.html"/>
    <id>http://blog.simble.xyz/post/b18ab8ad.html</id>
    <published>2018-05-04T01:35:45.000Z</published>
    <updated>2018-05-04T09:51:16.369Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了一周多，终于搞定了在docker的python API下，当执行exec_run时，如何连接container的PTY。</p><p>当弄明白之后，才发现原来是那么简单。之前几乎搜遍了google和百度，都没有找到相关的文章</p><a id="more"></a><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>这两年，docker的发展如火如荼，作为网络测试，我们也在尝试着将docker引入测试中，来更多的模拟真实用户，并实现自动化。</p><p>Pexpect是一个非常强大且好用的工具，当需要与设备和PC连接时，基本上都会用到。而之前都直接使用spawn一个命令行来进行连接</p><p>本篇博文将介绍一种使用pexpect的fdspawn，通过socket方式连接到container的方法，以便与远程的container进行交互</p><h2 id="自动化思路"><a class="markdownIt-Anchor" href="#自动化思路"></a> 自动化思路</h2><ol><li>client通过python API连接到docker</li><li>创建一个container并保持运行</li><li>使用exec_run()新建一个连接，运行<code>/bin/bash</code>，并开启socket方式</li><li>使用pexpect的fdspawn连接exec_run()返回的socket</li></ol><h3 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h3><ul><li>Docker开启remote API</li></ul><p>参见之前博文</p><ul><li>Docker Client</li></ul><p>安装必要的包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install docker</span><br><span class="line">$ pip install pexpect</span><br></pre></td></tr></table></figure><h2 id="开始使用"><a class="markdownIt-Anchor" href="#开始使用"></a> 开始使用</h2><ul><li>创建container</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> docker</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client=docker.DockerClient(base_url=<span class="string">'tcp://10.0.0.10:1234'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c1 = client.containers.run(<span class="string">"ubuntu"</span>, detach=<span class="keyword">True</span>, tty=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><ul><li>连接container</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>res = c1.exec_run(<span class="string">"/bin/bash"</span>, socket=<span class="keyword">True</span>, stdin=<span class="keyword">True</span>, tty=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res</span><br><span class="line">ExecResult(exit_code=<span class="keyword">None</span>, output=&lt;socket object, fd=<span class="number">15</span>, family=<span class="number">1</span>, type=<span class="number">1</span>, protocol=<span class="number">0</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sock = res.output</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sock</span><br><span class="line">&lt;socket object, fd=<span class="number">15</span>, family=<span class="number">1</span>, type=<span class="number">1</span>, protocol=<span class="number">0</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>使用pexpect连接</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pexpect.fdpexpect</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session=pexpect.fdpexpect.fdspawn(sock.fileno(),timeout=<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&gt;&gt;&gt; session.send(<span class="string">"ls\n"</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.expect(<span class="string">"#"</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.before</span><br><span class="line"><span class="string">' ls\r\n\x1b[0m\x1b[01;34mbin\x1b[0m   \x1b[01;34mdev\x1b[0m  \x1b[01;34mhome\x1b[0m  \x1b[01;34mlib64\x1b[0m  \x1b[01;34mmnt\x1b[0m  \x1b[01;34mproc\x1b[0m  \x1b[01;34mrun\x1b[0m   \x1b[01;34msrv\x1b[0m  \x1b[30;42mtmp\x1b[0m  \x1b[01;34mvar\x1b[0m\r\n\x1b[01;34mboot\x1b[0m  \x1b[01;34metc\x1b[0m  \x1b[01;34mlib\x1b[0m   \x1b[01;34mmedia\x1b[0m  \x1b[01;34mopt\x1b[0m  \x1b[01;34mroot\x1b[0m  \x1b[01;34msbin\x1b[0m  \x1b[01;34msys\x1b[0m  \x1b[01;34musr\x1b[0m\r\n\x1b]0;root@6a097ddbe55d: /\x07root@6a097ddbe55d:/'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.after</span><br><span class="line"><span class="string">'#'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h3><ul><li>在使用exec_run()执行开启命令时，需要指定<code>stdin=True</code>，否则，pexpect的send()将无法将命令发送至container</li><li>同样，在使用exec_run()时，需要指定<code>tty=True</code>，否则，将没有命令行提示符，无法进行匹配</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;折腾了一周多，终于搞定了在docker的python API下，当执行exec_run时，如何连接container的PTY。&lt;/p&gt;
&lt;p&gt;当弄明白之后，才发现原来是那么简单。之前几乎搜遍了google和百度，都没有找到相关的文章&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.simble.xyz/categories/docker/"/>
    
    
      <category term="docker" scheme="http://blog.simble.xyz/tags/docker/"/>
    
      <category term="pexpect" scheme="http://blog.simble.xyz/tags/pexpect/"/>
    
      <category term="自动化" scheme="http://blog.simble.xyz/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>dockerpty使用</title>
    <link href="http://blog.simble.xyz/post/1c49a9aa.html"/>
    <id>http://blog.simble.xyz/post/1c49a9aa.html</id>
    <published>2018-05-03T02:34:40.000Z</published>
    <updated>2018-05-04T09:58:47.874Z</updated>
    
    <content type="html"><![CDATA[<p>本篇博客将介绍在使用docker API时，如何监管container的PTY实现交互</p><h2 id="问题引入"><a class="markdownIt-Anchor" href="#问题引入"></a> 问题引入</h2><p>docker官方已经提供了API用来管理client，container，image，network等，基本的操作覆盖了docker CLI相关功能，但docker的API现在只能使用exec_run来执行一条命令，中间无法进行交互，希望能有一个类似于<code>-it</code>的方式来完成交互操作。</p><p>经过几天的学习和测试，发现其实docker的<code>containers.run()</code>和<code>containers.exec_run()</code>都是可以设置<code>stdin=True</code>, <code>tty=True</code>。但开启这些之后，将返回一个socket，需要自己来进行处理。</p><p>google大法后，找到了一个<strong>dockerpty</strong>的python lib，可以完成这件事情</p><a id="more"></a><h2 id="环境搭建"><a class="markdownIt-Anchor" href="#环境搭建"></a> 环境搭建</h2><p>根据<a href="https://github.com/d11wtq/dockerpty" target="_blank" rel="noopener">dockerpty</a>的github上提到的安装过程，只需要<code>pip install dockerpty</code>即可完成安装。</p><p>但源码已经有两年没有更新了，该版本无法在新的docker API上正常工作</p><p>fork了工程后，对其中的代码涉及到的docker API进行更新后，测试可以正常工作，最新的代码已经上传到git上<a href="https://github.com/simble1986/dockerpty" target="_blank" rel="noopener">simble1986/dockerpty</a></p><h4 id="依赖"><a class="markdownIt-Anchor" href="#依赖"></a> 依赖</h4><p>原有的project上提到依赖的docker api为<code>docker-py&gt;=0.3.2</code>，但docker的python API已经更新</p><ul><li>安装docker API</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install docker</span><br></pre></td></tr></table></figure><h4 id="安装步骤"><a class="markdownIt-Anchor" href="#安装步骤"></a> 安装步骤</h4><ul><li>获取源码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/simble1986/dockerpty.git</span><br></pre></td></tr></table></figure><ul><li>安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip uninstall dockerpty</span><br><span class="line">$ <span class="built_in">cd</span> dockerpty</span><br><span class="line">$ python setup.py install</span><br></pre></td></tr></table></figure><h2 id="相关api"><a class="markdownIt-Anchor" href="#相关api"></a> 相关API</h2><p>参看docker官方<a href="https://docker-py.readthedocs.io/en/stable/index.html" target="_blank" rel="noopener">API文档</a>，以下主要对container相关参数加以说明</p><ul><li>tty (bool) – Allocate a pseudo-TTY.</li><li>stdin_open (bool) – Keep STDIN open even if not attached.</li></ul><h2 id="基本使用"><a class="markdownIt-Anchor" href="#基本使用"></a> 基本使用</h2><ul><li>连接client</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@slt-docker:/home/bqi<span class="comment"># python</span></span><br><span class="line">Python <span class="number">2.7</span><span class="number">.12</span> (default, Dec  <span class="number">4</span> <span class="number">2017</span>, <span class="number">14</span>:<span class="number">50</span>:<span class="number">18</span>)</span><br><span class="line">[GCC <span class="number">5.4</span><span class="number">.0</span> <span class="number">20160609</span>] on linux2</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> docker</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> dockerpty</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client=docker.from_env()</span><br></pre></td></tr></table></figure><p><strong>注</strong>： 支持远程API</p><ul><li>创建container</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>test1 = client.containers.create(<span class="string">"ubuntu"</span>,<span class="string">"/bin/bash"</span>,tty=<span class="keyword">True</span>,stdin_open=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><ul><li>使用dockerpty</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dockerpty.start(client,test1)</span><br><span class="line">root@d6ddcf619602:/<span class="comment"># ls</span></span><br><span class="line">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">root@d6ddcf619602:/<span class="comment"># exit</span></span><br><span class="line">exit</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇博客将介绍在使用docker API时，如何监管container的PTY实现交互&lt;/p&gt;
&lt;h2 id=&quot;问题引入&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#问题引入&quot;&gt;&lt;/a&gt; 问题引入&lt;/h2&gt;
&lt;p&gt;docker官方已经提供了API用来管理client，container，image，network等，基本的操作覆盖了docker CLI相关功能，但docker的API现在只能使用exec_run来执行一条命令，中间无法进行交互，希望能有一个类似于&lt;code&gt;-it&lt;/code&gt;的方式来完成交互操作。&lt;/p&gt;
&lt;p&gt;经过几天的学习和测试，发现其实docker的&lt;code&gt;containers.run()&lt;/code&gt;和&lt;code&gt;containers.exec_run()&lt;/code&gt;都是可以设置&lt;code&gt;stdin=True&lt;/code&gt;, &lt;code&gt;tty=True&lt;/code&gt;。但开启这些之后，将返回一个socket，需要自己来进行处理。&lt;/p&gt;
&lt;p&gt;google大法后，找到了一个&lt;strong&gt;dockerpty&lt;/strong&gt;的python lib，可以完成这件事情&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.simble.xyz/categories/docker/"/>
    
    
      <category term="docker" scheme="http://blog.simble.xyz/tags/docker/"/>
    
      <category term="dockerpty" scheme="http://blog.simble.xyz/tags/dockerpty/"/>
    
  </entry>
  
  <entry>
    <title>Docker中无密码apt安装mysql</title>
    <link href="http://blog.simble.xyz/post/70cf198a.html"/>
    <id>http://blog.simble.xyz/post/70cf198a.html</id>
    <published>2018-03-29T18:39:33.000Z</published>
    <updated>2018-05-04T09:57:55.926Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题出现"><a class="markdownIt-Anchor" href="#问题出现"></a> 问题出现</h3><p>Linux在第一次安装有些软件时会有交互的输入的需求，比如mysql在首次安装时需要设置root的密码。这在正常配置过程中没什么问题，但在使用DockerFile创建docker镜像时，则遇到了麻烦。</p><a id="more"></a><h3 id="解决思路"><a class="markdownIt-Anchor" href="#解决思路"></a> 解决思路</h3><p>如果将安装好的mysql-server使用apt remove从系统中卸载后，再次重新安装，则不再需要输入密码。另外当安装完一些软件后，可以使用dpkg-config来重新配置。</p><p>这样，就可以在安装软件前先对系统做好相关配置。接下来，就是需要获取软件的必要配置项</p><h3 id="获取软件必要配置项"><a class="markdownIt-Anchor" href="#获取软件必要配置项"></a> 获取软件必要配置项</h3><h4 id="下载软件包"><a class="markdownIt-Anchor" href="#下载软件包"></a> 下载软件包</h4><p>可以通过网上搜索方式下载相关的deb包，但众所周知，Linux的软件包版本多，很多情况下并不知道需要安装哪个版本。但可以使用apt来下载相应的软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get -d install -y mysql-server</span><br></pre></td></tr></table></figure><p>使用apt-get的-d参数，将只会下载，不进行安装。下载完毕后，软件包位于<code>/var/cache/apt/archives</code>目录下。</p><h4 id="获取配置项"><a class="markdownIt-Anchor" href="#获取配置项"></a> 获取配置项</h4><p>进入软件包的存放目录，然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg-preconfigure mysql-server-5.1_5.1.49-3_amd64.deb</span><br></pre></td></tr></table></figure><p>使用<code>debconfig-show</code>来查看相应的配置项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ debconf-show mysql-server</span><br><span class="line">  mysql-server/root_password: (password omitted)</span><br><span class="line">  mysql-server/root_password_again: (password omitted)</span><br><span class="line">  mysql-server/error_setting_password:</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>可以看到，有两项是必须配置的：<code>mysql-server/root_password</code>和<code>mysql-server/root_password_again</code></p><h4 id="预配置"><a class="markdownIt-Anchor" href="#预配置"></a> 预配置</h4><ul><li>创建配置文件</li></ul><p>在合适的目录下创建一个文件，例如<code>mysql-passwd</code>，输入以下内容</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">debconf mysql-server/root_password password <span class="number">123456</span></span><br><span class="line">debconf mysql-server/root_password_again password <span class="number">123456</span></span><br></pre></td></tr></table></figure><ul><li>加载配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ debconf-set-selections mysql-passwd</span><br></pre></td></tr></table></figure><h4 id="测试结果"><a class="markdownIt-Anchor" href="#测试结果"></a> 测试结果</h4><p>再次安装mysql-server，将不再需要输入密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install -y mysql-server</span><br></pre></td></tr></table></figure><h3 id="dockerfile处理"><a class="markdownIt-Anchor" href="#dockerfile处理"></a> DockerFile处理</h3><p>DockerFile应当尽量避免不需要的操作，所以，获取配置项的操作可以提前在实验环境中完成。</p><p>可将获取的命令行保存为本地文件，使用时copy过去。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> ./mysql-passwd /tmp/mysql-passwd</span></span><br><span class="line"><span class="bash">RUN apt-get update &amp;&amp; debconf-set-selections /tmp/mysql-passwd &amp;&amp; apt-get install -yqq mysql-server  &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br></pre></td></tr></table></figure><p>或者是在DockerFile中直接生成，这时则可以将mysql passwd设置为参数</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> debconf mysql-server/root_password password 123456 &gt; /tmp/mysql-passwd &amp;&amp; <span class="built_in">echo</span> debconf mysql-server/root_password_again password 123456 &gt;&gt; /tmp/mysql-passwd</span></span><br><span class="line"><span class="bash">RUN apt-get update &amp;&amp; debconf-set-selections /tmp/mysql-passwd &amp;&amp; apt-get install -yqq mysql-server  &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题出现&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#问题出现&quot;&gt;&lt;/a&gt; 问题出现&lt;/h3&gt;
&lt;p&gt;Linux在第一次安装有些软件时会有交互的输入的需求，比如mysql在首次安装时需要设置root的密码。这在正常配置过程中没什么问题，但在使用DockerFile创建docker镜像时，则遇到了麻烦。&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.simble.xyz/categories/docker/"/>
    
    
      <category term="docker" scheme="http://blog.simble.xyz/tags/docker/"/>
    
      <category term="DockerFile" scheme="http://blog.simble.xyz/tags/DockerFile/"/>
    
      <category term="mysql-server" scheme="http://blog.simble.xyz/tags/mysql-server/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Next上开启Valine评论系统</title>
    <link href="http://blog.simble.xyz/post/a072bce6.html"/>
    <id>http://blog.simble.xyz/post/a072bce6.html</id>
    <published>2018-03-27T13:11:51.000Z</published>
    <updated>2018-03-30T02:37:58.745Z</updated>
    
    <content type="html"><![CDATA[<p>朋友之前问怎么没有开评论系统，倒不是不想开，而是刚开始建站的时候浏览了好多博文，似乎很多原来的接口都在hexo不太好用了。特别是很多博文都是两年前写的，当然，大多数其他功能都没问题</p><a id="more"></a><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><h3 id="valine"><a class="markdownIt-Anchor" href="#valine"></a> Valine</h3><p><a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a>是一款基于<a href="https://leancloud.cn/" target="_blank" rel="noopener">Leancloud</a>的快速、简洁且高效的无后端评论系统。</p><h3 id="leancloud"><a class="markdownIt-Anchor" href="#leancloud"></a> Leancloud</h3><p>我的理解，<a href="https://leancloud.cn/" target="_blank" rel="noopener">Leancloud</a>相当于是一个数据托管平台，可以帮助应用存储相关数据。Valine主要用到的是其中的数据存储——comments</p><h2 id="环境说明"><a class="markdownIt-Anchor" href="#环境说明"></a> 环境说明</h2><p>使用了最新版的<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>以及最新版的<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">Next主题</a></p><h2 id="获取appid"><a class="markdownIt-Anchor" href="#获取appid"></a> 获取AppID</h2><h3 id="注册leancloud"><a class="markdownIt-Anchor" href="#注册leancloud"></a> 注册Leancloud</h3><p>访问<a href="https://leancloud.cn/" target="_blank" rel="noopener">Leancloud</a>，点击<a href="https://leancloud.cn/dashboard/login.html#/signup" target="_blank" rel="noopener">免费试用</a>就会跳转到注册/登陆页面。当前支持通过Github，Weibo以及QQ进行注册</p><img src="/post/a072bce6/leancloud_signup.png" title="注册页面"><p><em>注册完后需要验证邮箱</em></p><h3 id="创建应用"><a class="markdownIt-Anchor" href="#创建应用"></a> 创建应用</h3><p>访问<a href="https://leancloud.cn/applist.html" target="_blank" rel="noopener">控制台</a>，在控制台中创建新应用</p><img src="/post/a072bce6/leancloud_new_app.png" title="创建应用"><h3 id="获取应用key"><a class="markdownIt-Anchor" href="#获取应用key"></a> 获取应用Key</h3><p>点击新创建的应用——设置——应用Key，保存页面上的App ID以及App Key以备后续使用</p><img src="/post/a072bce6/leancloud_appkey.png" title="应用Key"><h2 id="配置valine"><a class="markdownIt-Anchor" href="#配置valine"></a> 配置Valine</h2><p>在最新版的Next主题中，已经合入了Valine的配置代码，使得配置起来非常快捷。访问<a href="https://valine.js.org/#/hexo?id=hexo-theme-next" target="_blank" rel="noopener">Hexo中使用Valine</a>，点击<a href="https://github.com/iissnan/hexo-theme-next/pull/1983" target="_blank" rel="noopener">merged</a>，会跳转到Next主题的merge历史</p><h3 id="检查相关文件"><a class="markdownIt-Anchor" href="#检查相关文件"></a> 检查相关文件</h3><p>可以再次检查并确认<span id="inline-yellow">主题配置文件</span>_config.xml，<code>layout/_macro/post.swig</code>和<code>layout/_third-party/comments/valine.swig</code>是否都已经合入了相关代码</p><h3 id="配置appkey"><a class="markdownIt-Anchor" href="#配置appkey"></a> 配置AppKey</h3><p>编辑<span id="inline-yellow">主题配置文件</span>_config.xml中的valine部分内容</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid: $Your APP ID # your leancloud application appid</span><br><span class="line">  appkey: $Your APP Key # your leancloud application appkey</span><br><span class="line">  notify: false # mail notifier , http<span class="variable">s:</span>//github.<span class="keyword">com</span>/xCss/Valine/wiki</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: 随便说些什么吧 # comment box placeholder</span><br><span class="line">  avatar: mm # gravatar style</span><br><span class="line">  guest_info: nick,mail,link # custom comment header</span><br><span class="line">  pageSize: <span class="number">10</span> # pagination size</span><br></pre></td></tr></table></figure><h3 id="重新生成页面"><a class="markdownIt-Anchor" href="#重新生成页面"></a> 重新生成页面</h3><p>执行命令，重新生成并部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p><strong>到这里，查看页面已经可以看到评论系统</strong></p><h2 id="创建留言页面"><a class="markdownIt-Anchor" href="#创建留言页面"></a> 创建留言页面</h2><p>可以为站点创建一个单独的留言板页面</p><h3 id="创建页面"><a class="markdownIt-Anchor" href="#创建页面"></a> 创建页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page guestbook</span><br></pre></td></tr></table></figure><h3 id="配置主题"><a class="markdownIt-Anchor" href="#配置主题"></a> 配置主题</h3><ul><li>修改主题配置文件</li></ul><p>在<span id="inline-yellow">主题配置文件</span>_config.xml的menu字段新增guestbook字段</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">menu</span>:</span><br><span class="line">  home: / || home</span><br><span class="line">  <span class="keyword">tag</span><span class="variable">s:</span> /<span class="keyword">tags</span>/ || <span class="keyword">tags</span></span><br><span class="line">  categorie<span class="variable">s:</span> /categories/ || <span class="keyword">th</span></span><br><span class="line">  archive<span class="variable">s:</span> /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonwea<span class="variable">l:</span> /<span class="number">404</span>/ || heartbeat</span><br><span class="line">  abou<span class="variable">t:</span> /about/ || user</span><br><span class="line">  guestbook: /guestbook/ || comments</span><br></pre></td></tr></table></figure><p><em>可以访问<a href="https://fontawesome.com/v4.7.0/icons/" target="_blank" rel="noopener">fontawesome</a>选择自己喜欢的图标来作为留言板的图标</em></p><ul><li>本地化处理</li></ul><p>编辑对应语言的配置文件<code>themes/next/languages/zh-CN.yml</code>，在menu中增加guestbook的中文</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">menu</span>:</span><br><span class="line">  home: 首页</span><br><span class="line">  archive<span class="variable">s:</span> 归档</span><br><span class="line">  categorie<span class="variable">s:</span> 分类</span><br><span class="line">  <span class="keyword">tag</span><span class="variable">s:</span> 标签</span><br><span class="line">  abou<span class="variable">t:</span> 关于</span><br><span class="line">  <span class="built_in">search</span>: 搜索</span><br><span class="line">  schedule: 日程表</span><br><span class="line">  sitemap: 站点地图</span><br><span class="line">  commonwea<span class="variable">l:</span> 公益 <span class="number">404</span></span><br><span class="line">  guestbook: 留言</span><br></pre></td></tr></table></figure><h3 id="编辑页面"><a class="markdownIt-Anchor" href="#编辑页面"></a> 编辑页面</h3><p>编辑之前生成的guestbook页面</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 留言板</span><br><span class="line">date: <span class="number">2018</span>-<span class="number">03</span>-<span class="number">26</span> <span class="number">23</span>:<span class="number">36</span>:<span class="number">19</span></span><br><span class="line">comment<span class="variable">s:</span> true</span><br><span class="line">---</span><br><span class="line"><span class="symbol">&lt;center&gt;</span>既然来了，就是一种缘分，留下点什么吧:<span class="keyword">ca</span><span class="variable">t:</span>&lt;/<span class="keyword">center</span>&gt;</span><br></pre></td></tr></table></figure><p>重新部署之后就可以看到留言板了 😃</p><h2 id="清除测试留言"><a class="markdownIt-Anchor" href="#清除测试留言"></a> 清除测试留言</h2><p>为了确保留言功能已经正常工作，都会测试一下。测试完毕后，可以通过Leancloud的<a href="https://leancloud.cn/dashboard/applist.html#/apps" target="_blank" rel="noopener">控制台</a>清除测试数据</p><p>点击<em>myblog</em>——存储——Comments，即可查看当前留言，选中测试时的留言，删除即可</p><img src="/post/a072bce6/leancloud_cleancomments.png" title="清除测试留言">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;朋友之前问怎么没有开评论系统，倒不是不想开，而是刚开始建站的时候浏览了好多博文，似乎很多原来的接口都在hexo不太好用了。特别是很多博文都是两年前写的，当然，大多数其他功能都没问题&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://blog.simble.xyz/categories/hexo/"/>
    
    
      <category term="blog" scheme="http://blog.simble.xyz/tags/blog/"/>
    
      <category term="Next" scheme="http://blog.simble.xyz/tags/Next/"/>
    
      <category term="Valine" scheme="http://blog.simble.xyz/tags/Valine/"/>
    
  </entry>
  
  <entry>
    <title>在Ubuntu 16.04上开启Docker的Remote API</title>
    <link href="http://blog.simble.xyz/post/3e41aa59.html"/>
    <id>http://blog.simble.xyz/post/3e41aa59.html</id>
    <published>2018-03-27T06:42:58.000Z</published>
    <updated>2018-05-04T09:59:45.010Z</updated>
    
    <content type="html"><![CDATA[<p>由于自动化的考虑，需要用docker的remote API，尝试了多种方法，最终才找到了可行的方法</p><h3 id="可行的方法"><a class="markdownIt-Anchor" href="#可行的方法"></a> 可行的方法</h3><ul><li>编辑/lib/systemd/system/docker.service</li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><ul><li>修改ExecStart的参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375</span><br></pre></td></tr></table></figure><ul><li>随后执行<code>service docker restart</code>时会提示<code>Warning: docker.service changed on disk. Run 'systemctl daemon-reload' to reload units.</code>则表示配置成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><ul><li>重启docker服务</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure><ul><li>测试是否成功</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://localhost:2375/containers/json</span><br><span class="line">[&#123;<span class="string">"Id"</span>:<span class="string">"30c8e35f1292421d11f6b09385a4fc980d6abaca591d0f52b18dbad8e4f5be04"</span>,<span class="string">"Names"</span>:[<span class="string">"/clever_murdock"</span>],<span class="string">"Image"</span>:<span class="string">"portainer/portainer"</span>,<span class="string">"ImageID"</span>:<span class="string">"sha256:a8f2aeb34cf69178be1d152759fb17ccff7915faf750c82cd7d1851b12ec7b37"</span>,<span class="string">"Command"</span>:<span class="string">"/portainer"</span>,<span class="string">"Created"</span>:1520845664,<span class="string">"Ports"</span>:[&#123;<span class="string">"IP"</span>:<span class="string">"0.0.0.0"</span>,<span class="string">"PrivatePort"</span>:9000,<span class="string">"PublicPort"</span>:9000,<span class="string">"Type"</span>:<span class="string">"tcp"</span>&#125;],<span class="string">"Labels"</span>:&#123;&#125;,<span class="string">"State"</span>:<span class="string">"running"</span>,<span class="string">"Status"</span>:<span class="string">"Up 13 minutes"</span>,<span class="string">"HostConfig"</span>:&#123;<span class="string">"NetworkMode"</span>:<span class="string">"default"</span>&#125;,<span class="string">"NetworkSettings"</span>:&#123;<span class="string">"Networks"</span>:&#123;<span class="string">"bridge"</span>:&#123;<span class="string">"IPAMConfig"</span>:null,<span class="string">"Links"</span>:null,<span class="string">"Aliases"</span>:null,<span class="string">"NetworkID"</span>:<span class="string">"78fa057306e70838bab1e18359c86bd8eff7de2285c351784ad951cd7a73f8d1"</span>,<span class="string">"EndpointID"</span>:<span class="string">"e99ca98169320155c8833a8746be7d0e1c8d98186c75fba9d9bf2486367a4e00"</span>,<span class="string">"Gateway"</span>:<span class="string">"172.17.0.1"</span>,<span class="string">"IPAddress"</span>:<span class="string">"172.17.0.2"</span>,<span class="string">"IPPrefixLen"</span>:16,<span class="string">"IPv6Gateway"</span>:<span class="string">""</span>,<span class="string">"GlobalIPv6Address"</span>:<span class="string">""</span>,<span class="string">"GlobalIPv6PrefixLen"</span>:0,<span class="string">"MacAddress"</span>:<span class="string">"02:42:ac:11:00:02"</span>,<span class="string">"DriverOpts"</span>:null&#125;&#125;&#125;,<span class="string">"Mounts"</span>:[&#123;<span class="string">"Type"</span>:<span class="string">"bind"</span>,<span class="string">"Source"</span>:<span class="string">"/opt/portainer"</span>,<span class="string">"Destination"</span>:<span class="string">"/data"</span>,<span class="string">"Mode"</span>:<span class="string">""</span>,<span class="string">"RW"</span>:<span class="literal">true</span>,<span class="string">"Propagation"</span>:<span class="string">"rprivate"</span>&#125;,&#123;<span class="string">"Type"</span>:<span class="string">"bind"</span>,<span class="string">"Source"</span>:<span class="string">"/var/run/docker.sock"</span>,<span class="string">"Destination"</span>:<span class="string">"/var/run/docker.sock"</span>,<span class="string">"Mode"</span>:<span class="string">""</span>,<span class="string">"RW"</span>:<span class="literal">true</span>,<span class="string">"Propagation"</span>:<span class="string">"rprivate"</span>&#125;]&#125;]</span><br></pre></td></tr></table></figure><h3 id="不可行的方法"><a class="markdownIt-Anchor" href="#不可行的方法"></a> 不可行的方法</h3><p>同时列出在Ubuntu上不可行的方法</p><ul><li>修改<code>/etc/default/docker</code>中的<code>DOCKER_OPTS</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_OPTS=<span class="string">'-H fd:// -H tcp://0.0.0.0:2375'</span></span><br></pre></td></tr></table></figure><ul><li>修改<code>/etc/init/docker.conf</code>中的<code>DOCKER_OPTS</code></li></ul><p><em>网上有人说在Ubuntu14.04上可以生效</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># modify these in /etc/default/$UPSTART_JOB (/etc/default/docker)</span></span><br><span class="line">        DOCKERD=/usr/bin/dockerd</span><br><span class="line">        DOCKER_OPTS=<span class="string">'-H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于自动化的考虑，需要用docker的remote API，尝试了多种方法，最终才找到了可行的方法&lt;/p&gt;
&lt;h3 id=&quot;可行的方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#可行的方法&quot;&gt;&lt;/a&gt; 可行的方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;编辑/lib/systemd/system/docker.service&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.simble.xyz/categories/docker/"/>
    
    
      <category term="docker" scheme="http://blog.simble.xyz/tags/docker/"/>
    
      <category term="自动化" scheme="http://blog.simble.xyz/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建自己的博客——创建站点</title>
    <link href="http://blog.simble.xyz/post/80ca9385.html"/>
    <id>http://blog.simble.xyz/post/80ca9385.html</id>
    <published>2018-03-25T15:29:30.000Z</published>
    <updated>2018-03-30T02:37:58.749Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装及配置"><a class="markdownIt-Anchor" href="#安装及配置"></a> 安装及配置</h2><h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><p><a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a>是一个快速、简介且高效的博客框架，可以使用<a href="https://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>解析文章并生成网站</p><a id="more"></a><h3 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h3><p><span id="inline-blue">站点配置文件</span> <code>$site_dir/_config.xml</code></p><p><span id="inline-yellow">主题配置文件</span><code>$site_dir/theme/$theme_dir/_config</code></p><h3 id="安装hexo"><a class="markdownIt-Anchor" href="#安装hexo"></a> 安装hexo</h3><p>当环境准备好git以及nodejs后便可以安装hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="建站"><a class="markdownIt-Anchor" href="#建站"></a> 建站</h3><p>安装Hexo后，创建站点文件存放的文件夹，如<em>blog</em>，然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>完成后，blog目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h3 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h3><p>修改_config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">your</span> <span class="string">site</span> <span class="string">tile</span></span><br><span class="line"><span class="attr">subtitle:</span> </span><br><span class="line"><span class="attr">description:</span> <span class="string">description</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">your</span> <span class="string">name</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure><h3 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h3><ul><li>清除缓存文件及已生成的静态文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><ul><li>启动服务器</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p><em>默认状况下，服务器将使用4000端口。可以通过<code>hexo server -p 80</code>来将server绑定至80端口</em></p><ul><li>部署网站<br>可将网站按照_config.yml中的配置直接部署于github等（后续看心情写步骤）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h3 id="主题修改"><a class="markdownIt-Anchor" href="#主题修改"></a> 主题修改</h3><p>可访问hexo官方<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题库</a>选择自己喜欢的主题，并下载至theme目录下</p><p>修改_config.xml中的theme字段</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: landscape</span><br></pre></td></tr></table></figure><h2 id="写作"><a class="markdownIt-Anchor" href="#写作"></a> 写作</h2><p>有两种方法创建文章</p><h3 id="创建文章"><a class="markdownIt-Anchor" href="#创建文章"></a> 创建文章</h3><ul><li>hexo命令行方式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &lt;layout&gt; title</span><br></pre></td></tr></table></figure><p><em>layout为模版</em></p><p>命令执行后，默认文章将位于source/_post/目录下，文件内容为：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: test</span><br><span class="line">date: 2018-03-25 23:10:04</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li>直接创建文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="built_in">source</span>/_post/</span><br><span class="line">$ touch myfirstblog.md</span><br></pre></td></tr></table></figure><p>此时文件内容为空，需要自己添加相关内容</p><h3 id="创建标签页"><a class="markdownIt-Anchor" href="#创建标签页"></a> 创建标签页</h3><ul><li>配置确认</li></ul><p>确认<span id="inline-blue">站点配置文件</span>中有以下内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br></pre></td></tr></table></figure><p>确认<span id="inline-yellow">主题配置文件</span>中tags打开</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br></pre></td></tr></table></figure><ul><li>创建标签页</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure><p>修改tags/index.md中的type为&quot;tags&quot;</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Tagcloud</span><br><span class="line">date: 2018-03-23 01:18:00</span><br><span class="line">type: "tags"</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="创建分类页面"><a class="markdownIt-Anchor" href="#创建分类页面"></a> 创建分类页面</h3><p>与创建标签页相似</p><ul><li>确认配置</li></ul><p><span id="inline-blue">站点配置文件</span>中有<code>category_dir: categories</code></p><p><span id="inline-yellow">主题配置文件</span>中的<code>分类: /categories/ || th</code>开启</p><ul><li>创建分类也</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装及配置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#安装及配置&quot;&gt;&lt;/a&gt; 安装及配置&lt;/h2&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简介&quot;&gt;&lt;/a&gt; 简介&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;是一个快速、简介且高效的博客框架，可以使用&lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markdown&lt;/a&gt;解析文章并生成网站&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://blog.simble.xyz/categories/hexo/"/>
    
    
      <category term="blog" scheme="http://blog.simble.xyz/tags/blog/"/>
    
      <category term="hexo" scheme="http://blog.simble.xyz/tags/hexo/"/>
    
      <category term="markdown" scheme="http://blog.simble.xyz/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>docker基本操作（一）</title>
    <link href="http://blog.simble.xyz/post/493f285a.html"/>
    <id>http://blog.simble.xyz/post/493f285a.html</id>
    <published>2018-03-23T01:14:57.000Z</published>
    <updated>2018-05-04T09:58:13.843Z</updated>
    
    <content type="html"><![CDATA[<p>本文作为docker使用笔记供小伙伴们参考</p><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><p>安装最新版的docker-ce，会将自动命令行补齐安装在<code>/usr/share/bash-completion/completions/docker</code>目录</p><a id="more"></a><p>为了方便操作，在ubuntu上打开docker命令行自动补齐功能</p><p>编辑/etc/bash.bashrc文件，查找completion段，将该段内容前的#删除即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># enable bash completion in interactive shells</span></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">shopt</span> -oq posix; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> [ -f /usr/share/bash-completion/bash_completion ]; <span class="keyword">then</span></span><br><span class="line">    . /usr/share/bash-completion/bash_completion</span><br><span class="line">  <span class="keyword">elif</span> [ -f /etc/bash_completion ]; <span class="keyword">then</span></span><br><span class="line">    . /etc/bash_completion</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="image操作"><a class="markdownIt-Anchor" href="#image操作"></a> image操作</h2><ul><li>build image</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t mytest:latest .</span><br></pre></td></tr></table></figure><ul><li>查看image</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx                 &lt;none&gt;              73acd1f0cfad        8 days ago          109MB</span><br><span class="line">mongo                 3                   5b1317f8158f        8 days ago          366MB</span><br><span class="line">$ dockeer image ls</span><br></pre></td></tr></table></figure><ul><li>删除image</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm &lt;id/name&gt;</span><br><span class="line">$ docker rmi &lt;id/name&gt;</span><br></pre></td></tr></table></figure><h3 id="从docker-hub上获取image"><a class="markdownIt-Anchor" href="#从docker-hub上获取image"></a> 从docker hub上获取image</h3><p><em>国内访问docker hub较慢，可使用阿里云的docker镜像服务</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull nginx</span><br></pre></td></tr></table></figure><h2 id="continer相关"><a class="markdownIt-Anchor" href="#continer相关"></a> continer相关</h2><h3 id="创建docker"><a class="markdownIt-Anchor" href="#创建docker"></a> 创建docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name mytest -p 80:80 mynginx</span><br></pre></td></tr></table></figure><p>常用参数说明</p><blockquote><p>–rm 当运行结束（<mark>当CMD或entrypoint或docker run命令行指定的命令运行结束时，容器停止</mark>）时自动删除docker<br><br>-it 重定向docker终端<br><br>-d 在后台执行<br><br>-e 添加运行时的参数，常被用于docker CMD执行时增加参数</p></blockquote><p><strong>docker支持长id和短id方式索引，亦可通过名称进行索引</strong></p><ul><li>stop/start/restart容器</li></ul><ol><li>通过docker stop可以停止运行的容器，也可以使用docker kill来快速停止一个容器</li><li>docker start会保留容器的第一次启动时的所有参数</li><li>docker restart可以重启容器</li><li>可以在启动容器时设置–restart来自动重启容器</li></ol><ul><li>删除容器</li></ul><ol><li>可以使用docker ps列出当前正在运行的容器</li><li>容器停止运行不代表容器已经被删除，可以使用docker ps -a</li><li>使用docker rm来删除一个容器</li><li>使用docker rmi则会删除docker的image</li></ol><h3 id="查看及操作"><a class="markdownIt-Anchor" href="#查看及操作"></a> 查看及操作</h3><ul><li>查看容器状态</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND                   CREATED             STATUS              PORTS                        NAMES</span><br><span class="line">30c8e35f1292        portainer/portainer      <span class="string">"/portainer"</span>              10 days ago         Up 2 days           0.0.0.0:9000-&gt;9000/tcp       clever_murdock</span><br></pre></td></tr></table></figure><p>使用docker ps -a查看所有容器（包含休眠状态）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND                   CREATED             STATUS              PORTS                        NAMES</span><br><span class="line">30c8e35f1292        portainer/portainer      <span class="string">"/portainer"</span>              10 days ago         Up 2 days           0.0.0.0:9000-&gt;9000/tcp       clever_murdock</span><br><span class="line">ef58155f9957        registry:2               <span class="string">"/entrypoint.sh /etc…"</span>    2 days ago          Exited (137) 41 hours ago                                sltregistry</span><br></pre></td></tr></table></figure><ul><li>连接到容器的终端</li></ul><p><em>尽量使用exec方法，attach连入后可查看当前容器命令运行的日志，但不当的操作容易使运行中的容器退出</em></p><ol><li>使用attach</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker attach &lt;id/name&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用exec</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it &lt;id/name&gt; /bin/sh</span><br></pre></td></tr></table></figure><ul><li>查看容器运行的日志</li></ul><p>容器以<code>-d</code>参数运行时，可以使用docker logs查看运行过程中的日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker logs mytest_haproxy</span><br><span class="line">[WARNING] 079/100555 (1) : [haproxy.main()] Cannot raise FD <span class="built_in">limit</span> to 200000011, <span class="built_in">limit</span> is 1048576.</span><br><span class="line">[WARNING] 079/100555 (1) : [haproxy.main()] FD <span class="built_in">limit</span> (1048576) too low <span class="keyword">for</span> maxconn=100000000/maxsock=200000011. Please raise <span class="string">'ulimit-n'</span> to 200000011 or more to avoid any trouble.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文作为docker使用笔记供小伙伴们参考&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#准备工作&quot;&gt;&lt;/a&gt; 准备工作&lt;/h2&gt;
&lt;p&gt;安装最新版的docker-ce，会将自动命令行补齐安装在&lt;code&gt;/usr/share/bash-completion/completions/docker&lt;/code&gt;目录&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://blog.simble.xyz/categories/docker/"/>
    
    
      <category term="docker" scheme="http://blog.simble.xyz/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>在树莓派上部署nodejs</title>
    <link href="http://blog.simble.xyz/post/4fa2931e.html"/>
    <id>http://blog.simble.xyz/post/4fa2931e.html</id>
    <published>2018-03-22T17:32:39.000Z</published>
    <updated>2018-03-30T02:37:58.749Z</updated>
    
    <content type="html"><![CDATA[<p>终于有时间在树莓派上部署一个自己的小博客了，平时用惯了ubuntu，到了树莓派上，发现并没有那么简单。首先就是apt install nodejs，安装完没有npm。不过，经过一番折腾，便有了现在的小站点</p><a id="more"></a><h2 id="安装nodejs"><a class="markdownIt-Anchor" href="#安装nodejs"></a> 安装nodejs</h2><p><a href="https://nodejs.org" target="_blank" rel="noopener">nodejs</a>可以使用源码编译和二进制包来安装。考虑到树莓派的处理能力，要编译一个nodejs，太过耗时。直接选用官网提供的二进制包完成安装</p><h3 id="安装包获取"><a class="markdownIt-Anchor" href="#安装包获取"></a> 安装包获取</h3><p>官网上ARM的bin包有3个，分别是v6，v7和v8。而树莓派的版本是v7</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ uname -a</span><br><span class="line">Linux raspberrypi 4.9.80-v7+ <span class="comment">#1098 SMP Fri Mar 9 19:11:42 GMT 2018 armv7l GNU/Linux</span></span><br></pre></td></tr></table></figure><p>获取<a href="https://nodejs.org/dist/v8.10.0/node-v8.10.0-linux-armv7l.tar.xz" target="_blank" rel="noopener">安装包</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://nodejs.org/dist/v8.10.0/node-v8.10.0-linux-armv7l.tar.xz</span><br></pre></td></tr></table></figure><h3 id="安装nodejs-2"><a class="markdownIt-Anchor" href="#安装nodejs-2"></a> 安装nodejs</h3><p>解压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ tar -Jxv -f node-v8.10.0-linux-armv7l.tar.xz</span><br><span class="line">node-v8.10.0-linux-armv7l/</span><br><span class="line">node-v8.10.0-linux-armv7l/README.md</span><br><span class="line">node-v8.10.0-linux-armv7l/bin/</span><br><span class="line">node-v8.10.0-linux-armv7l/bin/node</span><br><span class="line">node-v8.10.0-linux-armv7l/bin/npm</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可根据个人喜好重命名文件夹，此处重命名为node，分别验证版本信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~/node $ ./bin/node -v</span><br><span class="line">v8.10.0</span><br><span class="line">pi@raspberrypi:~/node $ ./bin/npm -v</span><br><span class="line">5.6.0</span><br></pre></td></tr></table></figure><p>配置node和npm为全局命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~/node $ sudo ln /home/pi/node/bin/node /usr/<span class="built_in">local</span>/bin/node</span><br><span class="line">pi@raspberrypi:~/node $ sudo ln -s /home/pi/node/lib/node_modules/npm/bin/npm /usr/<span class="built_in">local</span>/bin/npm</span><br></pre></td></tr></table></figure><p>此时执行npm会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi:~/node $ npm -v</span><br><span class="line">module.js:471</span><br><span class="line">    throw err;</span><br><span class="line">    ^</span><br><span class="line"></span><br><span class="line">Error: Cannot find module <span class="string">'/usr/local/bin/node_modules/npm/bin/npm-cli.js'</span></span><br></pre></td></tr></table></figure><p>需要修改/usr/local/bin/目录下的npm文件，将$basedir替换为绝对路径，此处为/home/pi/node/</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/<span class="keyword">sh</span></span><br><span class="line">(set -o igncr) 2&gt;/dev/null &amp;&amp; set -o igncr; # cygwin encoding fix</span><br><span class="line"></span><br><span class="line">basedir=`dirname <span class="string">"$0"</span>`</span><br><span class="line"></span><br><span class="line">case `uname` in</span><br><span class="line">    *CYGWIN*) basedir=`cygpath -w "$basedir"`;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">NODE_EXE=<span class="string">"/home/pi/node/bin/node.exe"</span></span><br><span class="line">if ! [ -x "$NODE_EXE" ]; then</span><br><span class="line">  NODE_EXE=node</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">NPM_CLI_JS=<span class="string">"/home/pi/node/lib/node_modules/npm/bin/npm-cli.js"</span></span><br><span class="line"></span><br><span class="line">case `uname` in</span><br><span class="line">  *MINGW*)</span><br><span class="line">    NPM_PREFIX=`<span class="string">"$NODE_EXE"</span> <span class="string">"$NPM_CLI_JS"</span> prefix -g`</span><br><span class="line">    NPM_PREFIX_NPM_CLI_JS=<span class="string">"$NPM_PREFIX/node_modules/npm/bin/npm-cli.js"</span></span><br><span class="line">    if [ -f "$NPM_PREFIX_NPM_CLI_JS" ]; then</span><br><span class="line">      NPM_CLI_JS=<span class="string">"$NPM_PREFIX_NPM_CLI_JS"</span></span><br><span class="line">    fi</span><br><span class="line">    ;;</span><br><span class="line">  *CYGWIN*)</span><br><span class="line">    NPM_PREFIX=`<span class="string">"$NODE_EXE"</span> <span class="string">"$NPM_CLI_JS"</span> prefix -g`</span><br><span class="line">    NPM_PREFIX_NPM_CLI_JS=<span class="string">"$NPM_PREFIX/node_modules/npm/bin/npm-cli.js"</span></span><br><span class="line">    if [ -f "$NPM_PREFIX_NPM_CLI_JS" ]; then</span><br><span class="line">      NPM_CLI_JS=<span class="string">"$NPM_PREFIX_NPM_CLI_JS"</span></span><br><span class="line">    fi</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line"><span class="string">"$NODE_EXE"</span> <span class="string">"$NPM_CLI_JS"</span> <span class="string">"$@"</span></span><br></pre></td></tr></table></figure><p>再次验证，npm已经可以正常工作</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于有时间在树莓派上部署一个自己的小博客了，平时用惯了ubuntu，到了树莓派上，发现并没有那么简单。首先就是apt install nodejs，安装完没有npm。不过，经过一番折腾，便有了现在的小站点&lt;/p&gt;
    
    </summary>
    
      <category term="树莓派" scheme="http://blog.simble.xyz/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="http://blog.simble.xyz/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="nodejs" scheme="http://blog.simble.xyz/tags/nodejs/"/>
    
      <category term="pi" scheme="http://blog.simble.xyz/tags/pi/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.simble.xyz/post/4a17b156.html"/>
    <id>http://blog.simble.xyz/post/4a17b156.html</id>
    <published>2018-03-22T11:14:57.000Z</published>
    <updated>2018-03-30T02:37:58.745Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
