<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Openstack网络——虚拟机通信实验1</title>
    <url>/post/62511fc2.html</url>
    <content><![CDATA[<p>Openstack中的虚拟机流量通常被分为东西向和南北向。而测试环境中可能会遇到各种流量问题，搞清楚每种流量的通路有助于出现问题后的快速定位。</p>
<p>计划将分多篇博文，掰开来详细分析openstack中的各种流量路径。</p>
<p>本文以最简单的单节点为例，介绍在同子网下，虚拟机之间相互访问的流量路径</p>
<a id="more"></a>
<h2 id="环境说明"><a class="markdownIt-Anchor" href="#环境说明"></a> 环境说明</h2>
<ul>
<li>Openstack： stein（all in one）</li>
<li>Host： Ubuntu 18.04</li>
<li>Network driver： openvswitch</li>
</ul>
<h2 id="必要准备"><a class="markdownIt-Anchor" href="#必要准备"></a> 必要准备</h2>
<ol>
<li>外部网络：MyEx</li>
<li>镜像：cirros</li>
<li>flavor： small</li>
</ol>
<h2 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h2>
<h3 id="同子网虚拟机"><a class="markdownIt-Anchor" href="#同子网虚拟机"></a> 同子网虚拟机</h3>
<h4 id="创建网络"><a class="markdownIt-Anchor" href="#创建网络"></a> 创建网络</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openstack network create net1</span><br><span class="line">$ openstack subnet create --network net1 --subnet-range 200.0.0.0/24 sub1</span><br></pre></td></tr></table></figure>
<h4 id="创建虚拟机"><a class="markdownIt-Anchor" href="#创建虚拟机"></a> 创建虚拟机</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openstack server create --flavor small --image cirros --network net1 --min 2 --max 2 vm</span><br><span class="line">$ openstack server list</span><br><span class="line">+--------------------------------------+------+--------+------------------+--------+--------+</span><br><span class="line">| ID                                   | Name | Status | Networks         | Image  | Flavor |</span><br><span class="line">+--------------------------------------+------+--------+------------------+--------+--------+</span><br><span class="line">| ba3d4162-6a4d-45dc-9b41-0aa2e2ae0c88 | vm-1 | ACTIVE | net1=200.0.0.16  | cirros | small  |</span><br><span class="line">| d349a3a1-fdae-473c-83be-ac02ab5997f3 | vm-2 | ACTIVE | net1=200.0.0.224 | cirros | small  |</span><br><span class="line">+--------------------------------------+------+--------+------------------+--------+--------+</span><br></pre></td></tr></table></figure>
<p>分别创建了：</p>
<p>vm-1: 200.0.0.16</p>
<p>vm-2: 200.0.0.224</p>
<blockquote>
<p>先确认两个虚机的连通性</p>
</blockquote>
<h2 id="发生了什么"><a class="markdownIt-Anchor" href="#发生了什么"></a> 发生了什么?</h2>
<h3 id="linux-bridge"><a class="markdownIt-Anchor" href="#linux-bridge"></a> linux bridge</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brctl show</span><br><span class="line">bridge name          bridge id              STP enabled    interfaces</span><br><span class="line">brq459c374c-d3        8000.da9618bd3c8d    no              vxlan-6</span><br><span class="line">qbra95f52ba-a2        8000.c26ea2427d47    no              qvba95f52ba-a2</span><br><span class="line">                                                              tapa95f52ba-a2</span><br><span class="line">qbrebeae637-5c        8000.e2ef56b21ffb    no              qvbebeae637-5c</span><br><span class="line">                                                              tapebeae637-5c</span><br></pre></td></tr></table></figure>
<blockquote>
<p>先不关注<code>brq459c374c-d3</code>的网桥</p>
</blockquote>
<h3 id="openstack"><a class="markdownIt-Anchor" href="#openstack"></a> Openstack</h3>
<p>先来记录一下openstack上的port信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openstack port list</span><br><span class="line">+--------------------------------------+------+-------------------+----------------------------------------------------------------------------+--------+</span><br><span class="line">| ID                                   | Name | MAC Address       | Fixed IP Addresses                                                         | Status |</span><br><span class="line">+--------------------------------------+------+-------------------+----------------------------------------------------------------------------+--------+</span><br><span class="line">| a333499b-e5ea-4658-9ec4-cc9b1942d660 |      | fa:16:3e:c7:8c:10 | ip_address=<span class="string">'192.168.0.2'</span>, subnet_id=<span class="string">'a5b25645-c5df-486b-9a49-9412eebc2e59'</span> | ACTIVE |</span><br><span class="line">| a95f52ba-a255-46a7-b3ca-2c870de30e2d |      | fa:16:3e:53:d5:50 | ip_address=<span class="string">'200.0.0.224'</span>, subnet_id=<span class="string">'690d8c09-5f55-4b0c-b673-aff967fb0765'</span> | ACTIVE |</span><br><span class="line">| e013286e-b707-4992-b9e2-4c1f77d465b1 |      | fa:16:3e:45:00:dc | ip_address=<span class="string">'200.0.0.2'</span>, subnet_id=<span class="string">'690d8c09-5f55-4b0c-b673-aff967fb0765'</span>   | ACTIVE |</span><br><span class="line">| ebeae637-5c92-4a5d-943c-27a7c3abfe1f |      | fa:16:3e:17:60:c2 | ip_address=<span class="string">'200.0.0.16'</span>, subnet_id=<span class="string">'690d8c09-5f55-4b0c-b673-aff967fb0765'</span>  | ACTIVE |</span><br><span class="line">+--------------------------------------+------+-------------------+----------------------------------------------------------------------------+--------+</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>id</th>
<th>用途</th>
<th>ip</th>
</tr>
</thead>
<tbody>
<tr>
<td>a333499b-e5</td>
<td>外部网络MyEx的DHCP port</td>
<td>192.168.0.2</td>
</tr>
<tr>
<td>a95f52ba-a2</td>
<td>vm-2</td>
<td>200.0.0.224</td>
</tr>
<tr>
<td>e013286e-b7</td>
<td>租户网络net1的DHCP port</td>
<td>200.0.0.2</td>
</tr>
<tr>
<td>ebeae637-5c</td>
<td>vm-1</td>
<td>200.0.0.16</td>
</tr>
</tbody>
</table>
<h3 id="网络接口"><a class="markdownIt-Anchor" href="#网络接口"></a> 网络接口</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip link show</span><br><span class="line">...</span><br><span class="line">45: qbra95f52ba-a2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether c2:6e:a2:42:7d:47 brd ff:ff:ff:ff:ff:ff</span><br><span class="line"><span class="comment"># qbra95f52ba-a2: linux bridge，vm-2相关</span></span><br><span class="line">46: qvoa95f52ba-a2@qvba95f52ba-a2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue master ovs-system state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 72:63:10:8c:b6:b4 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">47: qvba95f52ba-a2@qvoa95f52ba-a2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue master qbra95f52ba-a2 state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether c2:6e:a2:42:7d:47 brd ff:ff:ff:ff:ff:ff</span><br><span class="line"><span class="comment"># qvoa95f52ba-a2和qvba95f52ba-a2：veth pair</span></span><br><span class="line">48: qbrebeae637-5c: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether e2:ef:56:b2:1f:fb brd ff:ff:ff:ff:ff:ff</span><br><span class="line"><span class="comment"># qbrebeae637-5c： linux bridge，vm-1相关</span></span><br><span class="line">49: qvoebeae637-5c@qvbebeae637-5c: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue master ovs-system state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 92:19:d7:5f:b7:0c brd ff:ff:ff:ff:ff:ff</span><br><span class="line">50: qvbebeae637-5c@qvoebeae637-5c: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue master qbrebeae637-5c state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether e2:ef:56:b2:1f:fb brd ff:ff:ff:ff:ff:ff</span><br><span class="line"><span class="comment"># qvoebeae637-5c和qvbebeae637-5c：veth pair</span></span><br><span class="line">51: tapa95f52ba-a2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc fq_codel master qbra95f52ba-a2 state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether fe:16:3e:53:d5:50 brd ff:ff:ff:ff:ff:ff</span><br><span class="line"><span class="comment"># tapa95f52ba-a2：tap接口，通过vnet方式与虚拟机vm-2相连</span></span><br><span class="line">52: tapebeae637-5c: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc fq_codel master qbrebeae637-5c state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether fe:16:3e:17:60:c2 brd ff:ff:ff:ff:ff:ff</span><br><span class="line"><span class="comment"># tapebeae637-5c：tap接口，通过vnet方式与虚拟机vm-1相连</span></span><br><span class="line">53: vxlan-6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue master brq459c374c-d3 state UNKNOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether da:96:18:bd:3c:8d brd ff:ff:ff:ff:ff:ff</span><br><span class="line"><span class="comment"># overlay接口</span></span><br><span class="line">54: brq459c374c-d3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether da:96:18:bd:3c:8d brd ff:ff:ff:ff:ff:ff</span><br><span class="line"><span class="comment"># overlay网桥</span></span><br></pre></td></tr></table></figure>
<p>上面出现了两个<code>id</code>：<code>a95f52ba-a2</code>和<code>ebeae637-5c</code>，分别对应了openstack的两个port的<code>id</code></p>
<p>而对于同一个<code>id</code>，有4个前缀：<code>qbr</code>,<code>qvb</code>,<code>qvo</code>,<code>tap</code>:</p>
<table>
<thead>
<tr>
<th>前缀</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>qbr</td>
<td>Linux网桥</td>
</tr>
<tr>
<td>qvb</td>
<td>与qvo互为veth pair，qvb置于qbr网桥中</td>
</tr>
<tr>
<td>qvo</td>
<td>与qvo互为veth pair，qvo置于br-int的ovs网桥中</td>
</tr>
<tr>
<td>tap</td>
<td>tap接口，与虚拟机中的网卡组成veth pair</td>
</tr>
</tbody>
</table>
<h3 id="namespace"><a class="markdownIt-Anchor" href="#namespace"></a> namespace</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns list</span><br><span class="line">qdhcp-459c374c-d347-4c3d-8dca-7dbb6b403f4f (id: 0)</span><br><span class="line">qdhcp-04d375a6-7600-4a62-87ff-9d66a41d15b1 (id: 1)</span><br></pre></td></tr></table></figure>
<p>2个namespace的<code>id</code>分别对应了openstack上的两个network的<code>id</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openstack network list</span><br><span class="line">+--------------------------------------+------+--------------------------------------+</span><br><span class="line">| ID                                   | Name | Subnets                              |</span><br><span class="line">+--------------------------------------+------+--------------------------------------+</span><br><span class="line">| 04d375a6-7600-4a62-87ff-9d66a41d15b1 | MyEx | a5b25645-c5df-486b-9a49-9412eebc2e59 |</span><br><span class="line">| 459c374c-d347-4c3d-8dca-7dbb6b403f4f | net1 | 690d8c09-5f55-4b0c-b673-aff967fb0765 |</span><br><span class="line">+--------------------------------------+------+--------------------------------------+</span><br></pre></td></tr></table></figure>
<p>namespace中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns <span class="built_in">exec</span> qdhcp-459c374c-d347-4c3d-8dca-7dbb6b403f4f ifconfig</span><br><span class="line">...</span><br><span class="line">tape013286e-b7: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 169.254.169.254  netmask 255.255.0.0  broadcast 169.254.255.255</span><br><span class="line">        inet6 fe80::f816:3eff:fe45:dc  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether fa:16:3e:45:00:dc  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 254  bytes 18301 (18.3 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 161  bytes 17139 (17.1 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line">$ ip netns <span class="built_in">exec</span> qdhcp-04d375a6-7600-4a62-87ff-9d66a41d15b1 ifconfig</span><br><span class="line">...</span><br><span class="line">tapa333499b-e5: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 169.254.169.254  netmask 255.255.0.0  broadcast 169.254.255.255</span><br><span class="line">        inet6 fe80::f816:3eff:fec7:8c10  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether fa:16:3e:c7:8c:10  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 153628  bytes 12984859 (12.9 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 151174  bytes 14352784 (14.3 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>每个namespace各有一个接口：<code>tape013286e-b7</code>和<code>tapa333499b-e5</code></p>
</li>
<li>
<p>这两个接口因为在namespace中，在<code>ip link show</code>的时候看不到。</p>
</li>
<li>
<p>其<code>id</code>也分别对应了openstack中的port的<code>id</code>，后面会看到这两个接口出现在ovs的<code>br-int</code>中</p>
</li>
</ul>
<h3 id="openvswitch"><a class="markdownIt-Anchor" href="#openvswitch"></a> openvswitch</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-vsctl show</span><br><span class="line">479f3788-7afb-48a4-accd-eb173f318715</span><br><span class="line">    ...</span><br><span class="line">    Bridge br-int</span><br><span class="line">        Controller <span class="string">"tcp:127.0.0.1:6633"</span></span><br><span class="line">            is_connected: <span class="literal">true</span></span><br><span class="line">        fail_mode: secure</span><br><span class="line">        Port int-br-ext</span><br><span class="line">            Interface int-br-ext</span><br><span class="line">                <span class="built_in">type</span>: patch</span><br><span class="line">                options: &#123;peer=phy-br-ext&#125;</span><br><span class="line">        Port <span class="string">"tapa333499b-e5"</span></span><br><span class="line">            tag: 2</span><br><span class="line">            Interface <span class="string">"tapa333499b-e5"</span></span><br><span class="line">                <span class="built_in">type</span>: internal</span><br><span class="line">        Port <span class="string">"tape013286e-b7"</span></span><br><span class="line">            tag: 3</span><br><span class="line">            Interface <span class="string">"tape013286e-b7"</span></span><br><span class="line">                <span class="built_in">type</span>: internal</span><br><span class="line">        Port <span class="string">"qvoebeae637-5c"</span></span><br><span class="line">            tag: 3</span><br><span class="line">            Interface <span class="string">"qvoebeae637-5c"</span></span><br><span class="line">        Port <span class="string">"qvoa95f52ba-a2"</span></span><br><span class="line">            tag: 3</span><br><span class="line">            Interface <span class="string">"qvoa95f52ba-a2"</span></span><br><span class="line">        Port patch-tun</span><br><span class="line">            Interface patch-tun</span><br><span class="line">                <span class="built_in">type</span>: patch</span><br><span class="line">                options: &#123;peer=patch-int&#125;</span><br><span class="line">        Port int-br-provider</span><br><span class="line">            Interface int-br-provider</span><br><span class="line">                <span class="built_in">type</span>: patch</span><br><span class="line">                options: &#123;peer=phy-br-provider&#125;</span><br><span class="line">        Port br-int</span><br><span class="line">            Interface br-int</span><br><span class="line">                <span class="built_in">type</span>: internal</span><br><span class="line">    ovs_version: <span class="string">"2.11.0"</span></span><br></pre></td></tr></table></figure>
<p><code>br-int</code>下有4个port：<code>tapa333499b-e5</code>,<code>tape013286e-b7</code>,<code>qvoebeae637-5c</code>,<code>qvoa95f52ba-a2</code>，这4个接口在前面都有提及</p>
<table>
<thead>
<tr>
<th>port</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>tapa333499b-e5</td>
<td>MyEx的dhcp相关，位于<code>qdhcp-04d375a6-76...</code>的namespace中</td>
</tr>
<tr>
<td>tape013286e-b7</td>
<td>net1的dhcp相关，位于<code>qdhcp-459c374c-d3...</code>的namespace中</td>
</tr>
<tr>
<td>qvoebeae637-5c</td>
<td>通过veth peer接口<code>qvbebeae637-5c</code>与vm-1连接</td>
</tr>
<tr>
<td>qvoa95f52ba-a2</td>
<td>通过veth peer接口<code>qvoa95f52ba-a2</code>与vm-2连接</td>
</tr>
</tbody>
</table>
<h3 id="ovs流表"><a class="markdownIt-Anchor" href="#ovs流表"></a> ovs流表</h3>
<blockquote>
<p>为了方便观察，手动删除了<code>cookie</code>和<code>duration</code>字段</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl dump-flows br-int</span><br><span class="line">table=0, n_packets=0, n_bytes=0, priority=65535,vlan_tci=0x0fff/0x1fff actions=drop</span><br><span class="line">table=0, n_packets=0, n_bytes=0, priority=10,icmp6,in_port=<span class="string">"qvoebeae637-5c"</span>,icmp_type=136 actions=resubmit(,24)</span><br><span class="line">table=0, n_packets=0, n_bytes=0, priority=10,icmp6,in_port=<span class="string">"qvoa95f52ba-a2"</span>,icmp_type=136 actions=resubmit(,24)</span><br><span class="line">table=0, n_packets=1073, n_bytes=45066, priority=10,arp,in_port=<span class="string">"qvoebeae637-5c"</span> actions=resubmit(,24)</span><br><span class="line">table=0, n_packets=1072, n_bytes=45024, priority=10,arp,in_port=<span class="string">"qvoa95f52ba-a2"</span> actions=resubmit(,24)</span><br><span class="line">table=0, n_packets=3103, n_bytes=926990, priority=2,in_port=<span class="string">"int-br-provider"</span> actions=drop</span><br><span class="line">table=0, n_packets=21, n_bytes=5096, priority=2,in_port=<span class="string">"int-br-ext"</span> actions=drop</span><br><span class="line">table=0, n_packets=18494, n_bytes=1811307, priority=9,in_port=<span class="string">"qvoebeae637-5c"</span> actions=resubmit(,25)</span><br><span class="line">table=0, n_packets=18499, n_bytes=1811728, priority=9,in_port=<span class="string">"qvoa95f52ba-a2"</span> actions=resubmit(,25)</span><br><span class="line">table=0, n_packets=2654, n_bytes=849079, priority=3,in_port=<span class="string">"int-br-ext"</span>,vlan_tci=0x0000/0x1fff actions=mod_vlan_vid:2,resubmit(,60)</span><br><span class="line">table=0, n_packets=763992, n_bytes=72539656, priority=0 actions=resubmit(,60)</span><br><span class="line">table=23, n_packets=0, n_bytes=0, priority=0 actions=drop</span><br><span class="line">table=24, n_packets=0, n_bytes=0, priority=2,icmp6,in_port=<span class="string">"qvoebeae637-5c"</span>,icmp_type=136,nd_target=fe80::f816:3eff:fe17:60c2 actions=resubmit(,60)</span><br><span class="line">table=24, n_packets=0, n_bytes=0, priority=2,icmp6,in_port=<span class="string">"qvoa95f52ba-a2"</span>,icmp_type=136,nd_target=fe80::f816:3eff:fe53:d550 actions=resubmit(,60)</span><br><span class="line">table=24, n_packets=1073, n_bytes=45066, priority=2,arp,in_port=<span class="string">"qvoebeae637-5c"</span>,arp_spa=200.0.0.16 actions=resubmit(,25)</span><br><span class="line">table=24, n_packets=1072, n_bytes=45024, priority=2,arp,in_port=<span class="string">"qvoa95f52ba-a2"</span>,arp_spa=200.0.0.224 actions=resubmit(,25)</span><br><span class="line">table=24, n_packets=0, n_bytes=0, priority=0 actions=drop</span><br><span class="line">table=25, n_packets=19555, n_bytes=1855533, priority=2,in_port=<span class="string">"qvoebeae637-5c"</span>,dl_src=fa:16:3e:17:60:c2 actions=resubmit(,60)</span><br><span class="line">table=25, n_packets=19560, n_bytes=1855982, priority=2,in_port=<span class="string">"qvoa95f52ba-a2"</span>,dl_src=fa:16:3e:53:d5:50 actions=resubmit(,60)</span><br><span class="line">table=60, n_packets=963419, n_bytes=92070282, priority=3 actions=NORMAL</span><br></pre></td></tr></table></figure>
<blockquote>
<p>先忽略icmp6的流表</p>
</blockquote>
<p><strong>table=0</strong></p>
<ul>
<li>in_port为<code>qvoebeae637-5c</code>和<code>qvoa95f52ba-a2</code>的arp报文送往table=24</li>
<li>in_port为<code>qvoebeae637-5c</code>和<code>qvoa95f52ba-a2</code>的其他报文送往table=25</li>
<li>其他报文送往table=60</li>
</ul>
<p><strong>table=24</strong></p>
<ul>
<li>in_port为<code>qvoebeae637-5c</code>和<code>qvoa95f52ba-a2</code>的arp报文，arp_spa分别是<code>200.0.0.224</code>和<code>200.0.0.16</code>的报文，送往table=25</li>
</ul>
<p><strong>table=25</strong></p>
<ul>
<li>in_port为<code>qvoebeae637-5c</code>和<code>qvoa95f52ba-a2</code>的报文，目的mac分别为<code>fa:16:3e:17:60:c2</code>和<code>fa:16:3e:53:d5:50</code>的报文，送往table=60</li>
</ul>
<p><strong>table=60</strong></p>
<ul>
<li>正常转发</li>
</ul>
<blockquote>
<p>通过上面一系列的流表，in_port为<code>qvoebeae637-5c</code>和<code>qvoa95f52ba-a2</code>的报文基本上都会在<code>br-int</code>上正常转发</p>
</blockquote>
<h3 id="梳理一下"><a class="markdownIt-Anchor" href="#梳理一下"></a> 梳理一下</h3>
<img src="/post/62511fc2/62511fc2/same_subnet.png" class title="same_subnet">
<ol>
<li>vm通过vnet与一个tap接口相连</li>
<li>tap接口与qvbxxx接口置于一个linux网桥中</li>
<li>qvbxxx的veth peer置于br-int的ovs网桥中</li>
<li>dhcp服务位于linux namespace中，使用了一个tap接口，而此tap接口同时位于br-int的ovs网桥中</li>
</ol>
<h2 id="报文跟踪"><a class="markdownIt-Anchor" href="#报文跟踪"></a> 报文跟踪</h2>
<h3 id="vm之间互通"><a class="markdownIt-Anchor" href="#vm之间互通"></a> vm之间互通</h3>
<h4 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h4>
<p>根据上面的图我们可以看到，vm-1访问vm-2的流量路径为：</p>
<ol>
<li>tapebeae637-5c</li>
<li>qbrebeae637-5c</li>
<li>qvbebeae637-5c</li>
<li>qvoebeae637-5c</li>
<li>br-int</li>
<li>qvoa95f52ba-a2</li>
<li>qvba95f52ba-a2</li>
<li>qbra95f52ba-a2</li>
<li>tapa95f52ba-a2</li>
</ol>
<h4 id="抓包"><a class="markdownIt-Anchor" href="#抓包"></a> 抓包</h4>
<p>实际上这个抓包很无聊，因为每个上面看到的报文都是一样的，这里只列举其中一个的结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tcpdump -i qvoebeae637-5c</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on qvoebeae637-5c, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">15:42:19.320342 IP 200.0.0.224 &gt; 200.0.0.16: ICMP <span class="built_in">echo</span> request, id 48897, seq 20449, length 64</span><br><span class="line">15:42:19.321219 IP 200.0.0.16 &gt; 200.0.0.224: ICMP <span class="built_in">echo</span> reply, id 48897, seq 20449, length 64</span><br><span class="line">15:42:20.321525 IP 200.0.0.224 &gt; 200.0.0.16: ICMP <span class="built_in">echo</span> request, id 48897, seq 20450, length 64</span><br><span class="line">15:42:20.322566 IP 200.0.0.16 &gt; 200.0.0.224: ICMP <span class="built_in">echo</span> reply, id 48897, seq 20450, length 64</span><br></pre></td></tr></table></figure>
<h3 id="vm-1访问dhcp的port"><a class="markdownIt-Anchor" href="#vm-1访问dhcp的port"></a> vm-1访问dhcp的port</h3>
<h4 id="分析-2"><a class="markdownIt-Anchor" href="#分析-2"></a> 分析</h4>
<p>而访问dhcp的通路，前面到达br-int的报文都一样，到了br-int后，会到达对应的namespace中</p>
<p><strong>1. 在vm-1上ping 200.0.0.2</strong></p>
<p><strong>2. 在ovs中抓包</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-tcpdump -i tape013286e-b7</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on ovsmi644603, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">16:00:35.469101 IP6 :: &gt; ff02::16: HBH ICMP6, multicast listener report v2, 1 group record(s), length 28</span><br><span class="line">16:00:35.552469 IP 200.0.0.16 &gt; 200.0.0.2: ICMP <span class="built_in">echo</span> request, id 48129, seq 480, length 64</span><br><span class="line">16:00:35.552507 IP 200.0.0.2 &gt; 200.0.0.16: ICMP <span class="built_in">echo</span> reply, id 48129, seq 480, length 64</span><br></pre></td></tr></table></figure>
<p><strong>3. 在namespace中抓包</strong></p>
<blockquote>
<p>注意，在namespace中抓包，报文信息可能不会及时打印在屏幕上</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns <span class="built_in">exec</span> qdhcp-459c374c-d347-4c3d-8dca-7dbb6b403f4f tcpdump -i tape013286e-b7</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on tape013286e-b7, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">16:02:00.643387 IP 200.0.0.16 &gt; 200.0.0.2: ICMP <span class="built_in">echo</span> request, id 48129, seq 565, length 64</span><br><span class="line">16:02:00.643461 IP 200.0.0.2 &gt; 200.0.0.16: ICMP <span class="built_in">echo</span> reply, id 48129, seq 565, length 64</span><br></pre></td></tr></table></figure>
<h2 id="more"><a class="markdownIt-Anchor" href="#more"></a> More</h2>
<p>你或许已经发现了，在namespace中的接口的IP为<code>169.254.169.254</code>，这个地址是干嘛的？那么<code>200.0.0.2</code>到底在哪儿呢？</p>
<h3 id="169254169254"><a class="markdownIt-Anchor" href="#169254169254"></a> 169.254.169.254</h3>
<p>在openstack中，你会经常看到这个IP地址，它是metadata service的IP</p>
<p>大多数cloud os实例启动时，都会向这个IP地址发起请求，获取一些信息，如以下实例启动日志中，获取<code>public-keys</code>和<code>user-data</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Starting network...</span><br><span class="line">udhcpc (v1.23.2) started</span><br><span class="line">Sending discover...</span><br><span class="line">Sending select <span class="keyword">for</span> 200.0.0.224...</span><br><span class="line">Lease of 200.0.0.224 obtained, lease time 86400</span><br><span class="line">route: SIOCADDRT: File exists</span><br><span class="line">WARN: failed: route add -net <span class="string">"0.0.0.0/0"</span> gw <span class="string">"200.0.0.1"</span></span><br><span class="line">checking http://169.254.169.254/2009-04-04/instance-id</span><br><span class="line">failed 1/20: up 24.66. request failed</span><br><span class="line">successful after 2/20 tries: up 37.29. iid=i-00000021</span><br><span class="line">failed to get http://169.254.169.254/2009-04-04/meta-data/public-keys</span><br><span class="line">warning: no ec2 metadata <span class="keyword">for</span> public-keys</span><br><span class="line">failed to get http://169.254.169.254/2009-04-04/user-data</span><br><span class="line">warning: no ec2 metadata <span class="keyword">for</span> user-data</span><br></pre></td></tr></table></figure>
<h3 id="200002在哪儿"><a class="markdownIt-Anchor" href="#200002在哪儿"></a> 200.0.0.2在哪儿？</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps -aux | grep dnsmasq</span><br><span class="line">...</span><br><span class="line">nobody    3449  0.0  0.0  53332  2588 ?        S    09:49   0:00 dnsmasq --no-hosts --no-resolv --pid-file=/var/lib/neutron/dhcp/459c374c-d347-4c3d-8dca-7dbb6b403f4f/pid --dhcp-hostsfile=/var/lib/neutron/dhcp/459c374c-d347-4c3d-8dca-7dbb6b403f4f/host --addn-hosts=/var/lib/neutron/dhcp/459c374c-d347-4c3d-8dca-7dbb6b403f4f/addn_hosts --dhcp-optsfile=/var/lib/neutron/dhcp/459c374c-d347-4c3d-8dca-7dbb6b403f4f/opts --dhcp-leasefile=/var/lib/neutron/dhcp/459c374c-d347-4c3d-8dca-7dbb6b403f4f/leases --dhcp-match=<span class="built_in">set</span>:ipxe,175 --dhcp-userclass=<span class="built_in">set</span>:ipxe6,iPXE --<span class="built_in">local</span>-service --<span class="built_in">bind</span>-interfaces --dhcp-range=<span class="built_in">set</span>:tag0,200.0.0.0,static,255.255.255.0,86400s --dhcp-option-force=option:mtu,1450 --dhcp-lease-max=256 --conf-file= --domain=openstacklocal</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><code>--dhcp-leasefile</code>指向了<code>/var/lib/neutron/dhcp/459c374c-d347-4c3d-8dca-7dbb6b403f4f/leases</code>，这个文件记录了dhcp分配的IP地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /var/lib/neutron/dhcp/459c374c-d347-4c3d-8dca-7dbb6b403f4f/leases</span><br><span class="line">1567498384 fa:16:3e:17:60:c2 200.0.0.16 host-200-0-0-16 01:fa:16:3e:17:60:c2</span><br><span class="line">1567475691 fa:16:3e:53:d5:50 200.0.0.224 host-200-0-0-224 01:fa:16:3e:53:d5:50</span><br><span class="line">1567475394 fa:16:3e:45:00:dc 200.0.0.2 host-200-0-0-2 *</span><br></pre></td></tr></table></figure>
<p><code>200.0.0.2</code>的mac地址是<code>fa:16:3e:45:00:dc</code>，而这个mac正是<code>tape013286e-b7</code>的物理地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns <span class="built_in">exec</span> qdhcp-459c374c-d347-4c3d-8dca-7dbb6b403f4f ifconfig</span><br><span class="line">...</span><br><span class="line">tape013286e-b7: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1450</span><br><span class="line">        inet 169.254.169.254  netmask 255.255.0.0  broadcast 169.254.255.255</span><br><span class="line">        inet6 fe80::f816:3eff:fe45:dc  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether fa:16:3e:45:00:dc  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1639  bytes 130817 (130.8 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 1546  bytes 149118 (149.1 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>
<h2 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h2>
<p>在单节点状况下，同子网下的虚拟机相互访问，是一个非常简单的路径。</p>
<p>通过tap接口、veth pair、linux网桥、ovs网桥以及ovs流表来实现了流量通路。</p>
]]></content>
      <categories>
        <category>openstack</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>openstack</tag>
        <tag>neutron</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux虚拟网络之虚拟机</title>
    <url>/post/13a44dc5.html</url>
    <content><![CDATA[<p>本文将通过实验来理解Linux上的虚拟机如何通过tap、bridge、router以及iptables实现相关的网络访问功能。</p>
<h2 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h2>
<blockquote>
<p>系统： Ubuntu 16.04.6 LTS</p>
</blockquote>
<a id="more"></a>
<h3 id="实验topo"><a class="markdownIt-Anchor" href="#实验topo"></a> 实验topo</h3>
<img src="/post/13a44dc5/13a44dc5/qemu_topo.png" class title="TOPO">
<h3 id="软件包"><a class="markdownIt-Anchor" href="#软件包"></a> 软件包</h3>
<p><strong>1. qemu</strong></p>
<p>由于整套实验环境都是在虚拟机上完成，在没有开启诸如Intel-VTx技术的情况下，使用<code>qemu</code>作为虚拟机模拟器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt install qemu</span><br><span class="line">$ apt install uml-utilities</span><br><span class="line">$ apt install bridge-utils</span><br></pre></td></tr></table></figure>
<p><strong>2. 虚拟机镜像</strong></p>
<p>本文使用<strong>cirros</strong>(当前版本：0.4.0)作为虚拟机镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img</span><br><span class="line">$ cp cirros-0.4.0-x86_64-disk.img cirros.img</span><br></pre></td></tr></table></figure>
<p><strong>3. vncserver</strong></p>
<p>使用qemu启动cirros需要用到图形界面，在纯命令行模式启动，需要使用vncserver</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt install tightvncserver</span><br></pre></td></tr></table></figure>
<p><strong>4. 环境检查</strong></p>
<p>先拉起个虚机试试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ qemu-system-x86_64 -vnc 10.180.13.232:99 cirros-0.4.0-x86_64-disk.img</span><br></pre></td></tr></table></figure>
<p><strong>5. 测试</strong></p>
<p>用vnc viewer连接当前虚拟机</p>
<img src="/post/13a44dc5/13a44dc5/qemu_vnc_example.png" class title="vnc viewer">
<h2 id="tap接口使用"><a class="markdownIt-Anchor" href="#tap接口使用"></a> tap接口使用</h2>
<p><strong>1. 创建虚拟机</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(host)$ qemu-system-x86_64 -vnc 10.180.13.232:99 cirros-0.4.0-x86_64-disk.img -netdev tap,id=mynet0,ifname=tap1,script=no,downscript=no -device e1000,netdev=mynet0</span><br></pre></td></tr></table></figure>
<p>创建成功后，可以看到，自动创建了一个<code>tap1</code>的接口，但没有up</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(host)$ ifconfig -a</span><br><span class="line">...</span><br><span class="line">tap1      Link encap:Ethernet  HWaddr 7a:d1:ba:68:06:b2</span><br><span class="line">          BROADCAST MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><strong>2. 测试连通性</strong></p>
<ul>
<li>配置host的tap1接口IP</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(host)$ ifconfig tap1 192.168.1.1/24 up</span><br></pre></td></tr></table></figure>
<ul>
<li>配置虚拟机的IP</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(vm)$ sudo ifconfig eth0 192.168.1.2</span><br></pre></td></tr></table></figure>
<ul>
<li>ping</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(vm)$ ping 192.168.1.2</span><br><span class="line">PING 192.168.1.2 (192.168.1.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.1.2: icmp_seq=1 ttl=64 time=16.6 ms</span><br><span class="line">64 bytes from 192.168.1.2: icmp_seq=2 ttl=64 time=1.51 ms</span><br></pre></td></tr></table></figure>
<p><strong>3. 小结</strong></p>
<p>使用tap类型的netdev创建qemu虚拟机时，会自动创建一个tap接口，而这个tap接口与VM的接口相连。</p>
<p>连接图如下：</p>
<img src="/post/13a44dc5/13a44dc5/qemu_tap.png" class title="tap">
<h2 id="虚拟机通信"><a class="markdownIt-Anchor" href="#虚拟机通信"></a> 虚拟机通信</h2>
<p>理解了虚拟机使用tap接口之后，就可以考虑使用网桥方式进行2个甚至多个虚拟机之间通信了。</p>
<p><strong>1. 创建虚拟机</strong></p>
<p>先拉起4个VM，分别指定网络</p>
<blockquote>
<p>注意，必须为每个虚机指定MAC地址，否则，拉起的虚机将使用同样的MAC地址</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(host)$ qemu-system-x86_64 -vnc 10.180.13.232:10 cirros.img -netdev tap,id=mynet0,ifname=tap0,script=no,downscript=no -device e1000,netdev=mynet0,mac=52:54:98:76:54:30 &amp;</span><br><span class="line">(host)$ qemu-system-x86_64 -vnc 10.180.13.232:11 cirros.img -netdev tap,id=mynet1,ifname=tap1,script=no,downscript=no -device e1000,netdev=mynet1,mac=52:54:98:76:54:31 &amp;</span><br></pre></td></tr></table></figure>
<p><strong>查看Host网卡</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(host)$ ip link show</span><br><span class="line">...</span><br><span class="line">46: tap0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 42:47:1b:de:8e:07 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">47: tap1: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether f2:23:b1:c5:55:d3 brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure>
<p>可以看到随虚拟机启动，创建了4个tap接口</p>
<p><strong>2. 配置IP</strong></p>
<p><strong>VM1</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(vm1)$ sudo ifconfig eth0 192.168.1.10</span><br></pre></td></tr></table></figure>
<p><strong>VM2</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(vm2)$ sudo ifconfig eth0 192.168.1.11</span><br></pre></td></tr></table></figure>
<p><strong>3. 创建网桥</strong></p>
<p><strong>Host</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(host)$ brctl addbr br0</span><br><span class="line">(host)$ brctl addif br0 tap0</span><br><span class="line">(host)$ brctl addif br0 tap1</span><br><span class="line">(host)$ bridge name bridge id               STP enabled interfaces</span><br><span class="line">  br0         8000.42471bde8e07       no          tap0</span><br><span class="line">                                                  tap1</span><br></pre></td></tr></table></figure>
<p>尝试ping一下，发现还是ping不通。因为对应的tap接口及br0没有up</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(host)$ ifconfig br0 up</span><br><span class="line">(host)$ ifconfig tap0 up</span><br><span class="line">(host)$ ifconfig tap1 up</span><br></pre></td></tr></table></figure>
<p>现在，可以两个VM相互ping一下了</p>
<p><strong>4. 访问外部PC</strong></p>
<p>虚拟机需要访问外部网络，则需要添加物理接口，如下图</p>
<img src="/post/13a44dc5/13a44dc5/qemu_bridge.png" class title="bridge">
<p><strong>Host</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(host)$ ifconfig ens192 up</span><br><span class="line">(host)$ brctl addif br0 ens192</span><br></pre></td></tr></table></figure>
<p><strong>VM1</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(vm1)$ ping 192.168.1.3</span><br><span class="line">PING 192.168.1.3 (192.168.1.3): 56 data bytes</span><br><span class="line">64 bytes from 192.168.1.3: seq=0 ttl=64 time=29.700 ms</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><strong>抓个包看看 - ens192</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(host)$ tcpdump -i ens192</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">11:15:02.317164 IP 192.168.1.11 &gt; 192.168.1.3: ICMP <span class="built_in">echo</span> request, id 47873, seq 0, length 64</span><br><span class="line">11:15:02.317527 IP 192.168.1.3 &gt; 192.168.1.11: ICMP <span class="built_in">echo</span> reply, id 47873, seq 0, length 64</span><br></pre></td></tr></table></figure>
<p><strong>5. 小结</strong></p>
<p>本节主要实验了虚拟机通过网桥进行相互通信及访问外网。对应了qemu网络的<strong>基于网桥的虚拟网卡</strong></p>
<h2 id="nat模式"><a class="markdownIt-Anchor" href="#nat模式"></a> NAT模式</h2>
<blockquote>
<p>Host需要开启转发功能</p>
<p>临时修改：<code>echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward</code></p>
</blockquote>
<p>NAT模式主要通过iptables来实现。通过将虚拟机发出的报文的源地址转换为物理接口的IP，实现与外网的通信</p>
<p>拓扑图如下：</p>
<img src="/post/13a44dc5/13a44dc5/qemu_nat.png" class title="nat">
<p><strong>1. 为网桥配置IP地址</strong></p>
<p>用网桥的br0接口作为192.168.1.0/24网段的网关</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(host)$ ifconfig br0 192.168.1.1/24</span><br></pre></td></tr></table></figure>
<p>测试host与外部网络连通性</p>
<blockquote>
<p>需要确保host有通往外部网络的路由</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(host)$ ping 223.5.5.5</span><br><span class="line">PING 223.5.5.5 (223.5.5.5) 56(84) bytes of data.</span><br><span class="line">64 bytes from 223.5.5.5: icmp_seq=1 ttl=115 time=11.7 ms</span><br></pre></td></tr></table></figure>
<p><strong>2. 配置iptables</strong></p>
<p>将192.168.1.0/24网段转换为发送出去的接口IP</p>
<blockquote>
<p>MASQUERADE: 用发送数据的网卡上的IP来替换源IP</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(host)$ iptables -t nat -A POSTROUTING -s 192.168.1.0/24 ! -d 192.168.1.0/24  -j MASQUERADE</span><br></pre></td></tr></table></figure>
<p><strong>3. 虚拟机配置默认路由</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(vm1)$ route add -net 0.0.0.0/0 gw 192.168.1.1</span><br></pre></td></tr></table></figure>
<p><strong>4. 测试连通性</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(vm1)$ ping 223.5.5.5</span><br><span class="line">PING 223.5.5.5 (223.5.5.5): 56 data bytes</span><br><span class="line">64 bytes from 223.5.5.5: seq=0 ttl=114 time=14.161 ms</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><strong>5. 抓包看看</strong></p>
<p><strong>tap1</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(host)$ tcpdump -i tap0 -n</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on tap0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">14:33:41.158181 IP 192.168.1.10 &gt; 223.5.5.5: ICMP <span class="built_in">echo</span> request, id 53761, seq 0, length 64</span><br><span class="line">14:33:41.332908 IP 223.5.5.5 &gt; 192.168.1.10: ICMP <span class="built_in">echo</span> reply, id 53761, seq 0, length 64</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><code>tap1</code>接口上体现了虚拟机的请求： 192.168.1.10 - 223.5.5.5</p>
<p><strong>br0</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tcpdump -i br0 -n</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on br0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">14:35:05.964841 IP 192.168.1.10 &gt; 223.5.5.5: ICMP <span class="built_in">echo</span> request, id 54017, seq 0, length 64</span><br><span class="line">14:35:06.028936 IP 223.5.5.5 &gt; 192.168.1.10: ICMP <span class="built_in">echo</span> reply, id 54017, seq 0, length 64</span><br></pre></td></tr></table></figure>
<p>网桥接口<code>br0</code>上的报文于<code>tap0</code>相同，既当前并没有修改报文</p>
<p><strong>ens160</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tcpdump -i ens160 -n host 223.5.5.5</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on ens160, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">14:36:22.762002 IP 10.180.13.232 &gt; 223.5.5.5: ICMP <span class="built_in">echo</span> request, id 54273, seq 0, length 64</span><br><span class="line">14:36:22.775182 IP 223.5.5.5 &gt; 10.180.13.232: ICMP <span class="built_in">echo</span> reply, id 54273, seq 0, length 64</span><br></pre></td></tr></table></figure>
<p>可以看到在<code>ens160</code>接口上，IP则变成了10.180.13.232 - 223.5.5.5之间的通信</p>
<p><strong>6. 小结</strong></p>
<p>在本节中，当虚拟机访问外部网络时，从虚拟机内部发出的报文，在主机上通过查路由的方式转发到外部网络中。而在转发出去之前，将源IP地址修改为当前主机的接口IP</p>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>西班牙申根签证快速攻略</title>
    <url>/post/29ce55ae.html</url>
    <content><![CDATA[<h2 id="适用对象"><a class="markdownIt-Anchor" href="#适用对象"></a> 适用对象</h2>
<ol>
<li>北京领区</li>
<li>在职人员</li>
<li>旅游签证</li>
<li>2019年</li>
</ol>
<blockquote>
<p><strong>小提醒</strong></p>
<ul>
<li>签证中心只收<strong>现金</strong></li>
<li>据签证中心工作人员介绍，周一和周五人最多，其他时间都还好</li>
<li>只需一张照片，但多带几张总不坏</li>
<li>流水余额取决于旅行时间，最少3W吧</li>
</ul>
</blockquote>
<a id="more"></a>
<h2 id="主要网站"><a class="markdownIt-Anchor" href="#主要网站"></a> 主要网站</h2>
<p>西班牙签证申请中心：<a href="https://china.blsspainvisa.com/chinese/index.php">https://china.blsspainvisa.com/chinese/index.php</a></p>
<h2 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h2>
<ol>
<li>准备资料</li>
<li>预约</li>
<li>前往签证中心</li>
<li>坐等快递</li>
</ol>
<h2 id="资料清单"><a class="markdownIt-Anchor" href="#资料清单"></a> 资料清单</h2>
<h3 id="官网文件"><a class="markdownIt-Anchor" href="#官网文件"></a> 官网文件</h3>
<blockquote>
<p>来源：<a href="https://china.blsspainvisa.com/chinese/index.php">西班牙签证申请中心官网</a></p>
<p>获取：首页 -&gt; 签证类型 -&gt; 短期 -&gt; 旅游。或直接点击<a href="https://china.blsspainvisa.com/chinese/short_term_visa_tourism.php">这里</a></p>
</blockquote>
<ol>
<li>检查清单（Checklist）</li>
<li>签证申请表</li>
<li>知悉声明</li>
</ol>
<h3 id="准备文件"><a class="markdownIt-Anchor" href="#准备文件"></a> 准备文件</h3>
<p>相关填写及说明参看后续章节</p>
<blockquote>
<p>准备文件均来源于<strong>检查清单</strong>中</p>
</blockquote>
<h4 id="工作相关必须"><a class="markdownIt-Anchor" href="#工作相关必须"></a> 工作相关（必须）</h4>
<ol>
<li>公司营业执照复应件，需盖章</li>
<li>在职证明（中文，英文各一份），可参看<a href="#%E5%9C%A8%E8%81%8C%E8%AF%81%E6%98%8E%E6%A8%A1%E7%89%88">在职证明模版</a>
<ol>
<li>任职公司的地址、电话及传真号码</li>
<li>任职公司签字人的姓名和职务</li>
<li>申请人姓名、职务、收入及工作年限</li>
</ol>
</li>
</ol>
<h4 id="旅行资料必须"><a class="markdownIt-Anchor" href="#旅行资料必须"></a> 旅行资料（必须）</h4>
<ol>
<li>完整旅行计划</li>
<li>全部机票预订单</li>
<li>所有住宿证明</li>
<li>旅行保险（投保金额至少30000 欧元或等值的人民币）</li>
</ol>
<h4 id="身份证明必须"><a class="markdownIt-Anchor" href="#身份证明必须"></a> 身份证明（必须）</h4>
<ol>
<li>护照原件（如有旧护照，一并提供）</li>
<li><strong>整本</strong>护照复印件（首页需要复印两张）</li>
<li>户口本原件</li>
<li>户口本所有页复印件</li>
<li>照片</li>
</ol>
<h4 id="收入类必须"><a class="markdownIt-Anchor" href="#收入类必须"></a> 收入类（必须）</h4>
<ol>
<li>工资卡3-6个月的流水，无需存款证明</li>
<li>收入证明（包含于在职证明）</li>
</ol>
<h4 id="辅助资料非必须"><a class="markdownIt-Anchor" href="#辅助资料非必须"></a> 辅助资料（非必须）</h4>
<ol>
<li>房产证及复印件</li>
<li>机动车产权证</li>
</ol>
<h2 id="预约"><a class="markdownIt-Anchor" href="#预约"></a> 预约</h2>
<p>在西班牙签证申请中心官网： 申请预约 -&gt; BLS签证中心 -&gt; 网上预约，或直接点击<a href="https://china.blsspainvisa.com/chinese/book_appointment.php">这里</a></p>
<h3 id="预约表单填写"><a class="markdownIt-Anchor" href="#预约表单填写"></a> 预约表单填写</h3>
<p><strong>基本信息</strong></p>
<img src="/post/29ce55ae/29ce55ae/booking_1.png" class title="Booking form">
<p><strong>预约申请表</strong></p>
<img src="/post/29ce55ae/29ce55ae/booking_table.png" class title="Booking Table">
<p><strong>预约确认信</strong></p>
<blockquote>
<p>预约完成后，注意保存预约确认信，可打印也可保存在手机上</p>
</blockquote>
<img src="/post/29ce55ae/29ce55ae/booking_confirm.png" class title="Confirm">
<h2 id="前往签证中心"><a class="markdownIt-Anchor" href="#前往签证中心"></a> 前往签证中心</h2>
<h3 id="地址"><a class="markdownIt-Anchor" href="#地址"></a> 地址</h3>
<blockquote>
<p>签证中心楼下并没有明显的标示</p>
</blockquote>
<p>北京市朝阳区新源里16号琨莎中心 1号楼1006室</p>
<h3 id="费用"><a class="markdownIt-Anchor" href="#费用"></a> 费用</h3>
<blockquote>
<p>签证中心当前只收现金</p>
</blockquote>
<ol>
<li>签证费：469</li>
<li>服务费：121</li>
<li>快递费：60</li>
</ol>
<h3 id="流程-2"><a class="markdownIt-Anchor" href="#流程-2"></a> 流程</h3>
<ol>
<li>排队</li>
<li>前台检查资料，填写快递单</li>
<li>拿号</li>
<li>递交材料</li>
<li>缴费</li>
<li>录指纹+拍照</li>
</ol>
<h3 id="回执"><a class="markdownIt-Anchor" href="#回执"></a> 回执</h3>
<p>离开签证中心时，你手里应该有：</p>
<ol>
<li>缴费回执（上含受理号）</li>
<li>一张护照首页复印件（上含受理号）</li>
<li>其他文件原件（如户口本、房产证等）</li>
<li>快递单照片（没有原件）</li>
</ol>
<h2 id="坐等快递"><a class="markdownIt-Anchor" href="#坐等快递"></a> 坐等快递</h2>
<p>提交完所有资料后，你只需要在家等待签证的快递，是否通过，已经由不得你了。</p>
<h3 id="查询进度"><a class="markdownIt-Anchor" href="#查询进度"></a> 查询进度</h3>
<p>可以登陆<a href="https://china.blsspainvisa.com/chinese/index.php">西班牙签证申请中心官网</a>，通过<strong>受理号</strong>在线查询您的申请</p>
<img src="/post/29ce55ae/29ce55ae/status.png" class title="Status">
<h2 id="在职证明模版"><a class="markdownIt-Anchor" href="#在职证明模版"></a> 在职证明模版</h2>
<blockquote>
<p>在职证明需要有公司名称、地址、电话并加盖公章</p>
</blockquote>
<h3 id="中文"><a class="markdownIt-Anchor" href="#中文"></a> 中文</h3>
<p>兹证明<strong>张三</strong>，护照号：<strong>E12345678</strong>，自<strong>xxxx/xx/xx</strong>日入职至今，现在我司任职<strong>xxx</strong>，月收入税前人民币：<strong>xxxx</strong>元，大写： <strong>xxxx</strong>。经公司批准，他将于<strong>xxxx/xx/xx</strong>至<strong>xxxx/xx/xx</strong>休假。旅行期间的费用由他本人承担。</p>
<p>他的假期期间，我公司将保留他的职务。贵处如需要其他信息，请随时联系我们。如果他的签证申请能顺利通过，我们将非常感激。</p>
<h3 id="英文"><a class="markdownIt-Anchor" href="#英文"></a> 英文</h3>
<p>Employment Certificate</p>
<p>To Spain Visa Application Center:</p>
<p>This is to certify that <strong>SAN ZHANG</strong>(Passport No.: <strong>E12345678</strong>) works for <strong>xxxxxxxx Co., Ltd</strong>. Since <strong>xxxx/xx/xx</strong> till present. He has been allowed for a leave from <strong>xxxx/xx/xx</strong> to <strong>xxxx/xx/xx</strong>. His position is <strong>xxxxxxxx</strong> and average monthly pre-tax salary is <strong>xxxxx</strong> RMB. All costs relating to his trip will be covered by himself.</p>
<p>We will keep his position during his leave. Meanwhile, we guarantee that during this trip he will abide laws of your country and be back as scheduled. If any other information is needed, please feel free to contact us. It will be grateful if his visa is issued successfully.</p>
<p><strong>最后，祝君好运</strong></p>
]]></content>
      <categories>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>旅行</tag>
        <tag>visa</tag>
      </tags>
  </entry>
  <entry>
    <title>Openstack安全组基于ovs的学习笔记</title>
    <url>/post/9b8e4f01.html</url>
    <content><![CDATA[<p>本文主要介绍Openstack的安全组在规则及其在ovs的流表中的体现。</p>
<p>实验基于openstack的stein版本，devstack安装，采用了ovs作为虚拟交换机。描述Openflow在Openstack安全组中的应用分析。实验环境以Ubuntu 18.04.3 LTS搭建</p>
<a id="more"></a>
<h2 id="openstack安全组"><a class="markdownIt-Anchor" href="#openstack安全组"></a> Openstack安全组</h2>
<p><strong>1. 安全组</strong></p>
<p>在Openstack中，安全组是做哦那个在neutron port上的一组策略，这些策略可以理解为一些防火墙的规则集合。</p>
<p><strong>2. 安全组的实现</strong></p>
<p>Openstack中的安全组的实现有以下集中：</p>
<ul>
<li>ovs + iptables + connection track</li>
<li>ovs + openflow + connection track</li>
<li>linuxbridge + iptables + connection track</li>
</ul>
<p>由于本文实验环境基于devstack（stein），因此，仅基于第二种情况进行说明</p>
<h2 id="实验准备"><a class="markdownIt-Anchor" href="#实验准备"></a> 实验准备</h2>
<p><strong>1. 创建项目及用户（非必须）</strong></p>
<p>创建一个test的project和user</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openstack project create --domain default --description <span class="string">"Security Group Test Project"</span> <span class="built_in">test</span></span><br><span class="line">$ openstack user create --domain default --password-prompt <span class="built_in">test</span></span><br><span class="line">$ openstack role add --project <span class="built_in">test</span> --user <span class="built_in">test</span> admin</span><br></pre></td></tr></table></figure>
<p><strong>2. 查看test租户的默认安全组下的规则</strong></p>
<p>以test用户登陆openstack的dashboard，在<strong>网络</strong> &gt; <strong>安全组</strong> 下找到default安全组，查看对应的规则</p>
<img src="/post/9b8e4f01/9b8e4f01/rule_list.png" class title="Rule List">
<h2 id="安全组实验"><a class="markdownIt-Anchor" href="#安全组实验"></a> 安全组实验</h2>
<blockquote>
<p>需要事先创建一个虚拟机示例，默认关联default的安全组</p>
</blockquote>
<p><strong>0. 获取一些信息</strong></p>
<ul>
<li>端口ID</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openstack port list</span><br><span class="line">+--------------------------------------+------+-------------------+-----------------------------------------------------------------------------------------------------+--------+</span><br><span class="line">| ID                                   | Name | MAC Address       | Fixed IP Addresses                                                                                  | Status |</span><br><span class="line">+--------------------------------------+------+-------------------+-----------------------------------------------------------------------------------------------------+--------+</span><br><span class="line">| 41ca5359-2edc-4d74-8321-5883ecb618c5 |      | fa:16:3e:fa:fd:13 | ip_address=<span class="string">'192.168.233.49'</span>, subnet_id=<span class="string">'ef4d1362-24b5-4d01-8748-ffe9cc2ca2e5'</span>                       | ACTIVE |</span><br><span class="line">+--------------------------------------+------+-------------------+-----------------------------------------------------------------------------------------------------+--------+</span><br></pre></td></tr></table></figure>
<p>创建了一个ID为<code>41ca5359-2edc-4d74-8321-5883ecb618c5</code>的port，分配IP地址为<code>192.168.233.49</code></p>
<ul>
<li>接口名称</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-vsctl show</span><br><span class="line">...</span><br><span class="line">    Bridge br-int</span><br><span class="line">        Controller <span class="string">"tcp:127.0.0.1:6633"</span></span><br><span class="line">            is_connected: <span class="literal">true</span></span><br><span class="line">            ...</span><br><span class="line">            </span><br><span class="line">        Port <span class="string">"tap41ca5359-2e"</span></span><br><span class="line">            tag: 3</span><br><span class="line">            Interface <span class="string">"tap41ca5359-2e"</span></span><br><span class="line">            </span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>
<p>对应的创建了一个<code>tap41ca5359-2e</code>的接口</p>
<p><strong>1. 创建一条ingress的规则</strong></p>
<p>通过Dashboard在default的安全组下创建一条ingress的规则，remote-ip为199.0.0.0/24，协议为tcp，目的端口为80</p>
<ul>
<li>查看br-int流表</li>
</ul>
<blockquote>
<p>br-int下的流表非常的多，可以使用过滤规则进行匹配</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl dump-flows br-int | grep 199.0.0.0</span><br><span class="line"> cookie=0xd9177c011dbdf439, duration=98.493s, table=82, n_packets=0, n_bytes=0, idle_age=98, priority=77,ct_state=+est-rel-rpl,tcp,reg5=0xe,nw_src=199.0.0.0/24,tp_dst=80 actions=output:14</span><br><span class="line"> cookie=0xd9177c011dbdf439, duration=98.493s, table=82, n_packets=0, n_bytes=0, idle_age=98, priority=77,ct_state=+new-est,tcp,reg5=0xe,nw_src=199.0.0.0/24,tp_dst=80 actions=ct(commit,zone=NXM_NX_REG6[0..15]),output:14,resubmit(,92)</span><br></pre></td></tr></table></figure>
<p>可以看到，共新增了两条流表</p>
<p><strong>3. 创建一条egress的规则</strong></p>
<blockquote>
<p>同样以remote-ip为199.0.0.0/24，协议为tcp，目的端口为80的参数创建egress规则</p>
</blockquote>
<p>查看流表看到新增了如下两条：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cookie=0xd9177c011dbdf439, duration=19.261s, table=72, n_packets=0, n_bytes=0, idle_age=19, priority=77,ct_state=+est-rel-rpl,tcp,reg5=0xe,nw_dst=199.0.0.0/24,tp_dst=80 actions=resubmit(,73)</span><br><span class="line">cookie=0xd9177c011dbdf439, duration=19.261s, table=72, n_packets=0, n_bytes=0, idle_age=19, priority=77,ct_state=+new-est,tcp,reg5=0xe,nw_dst=199.0.0.0/24,tp_dst=80 actions=resubmit(,73)</span><br></pre></td></tr></table></figure>
<p><strong>4. 流表解读</strong></p>
<p><strong>4.1 ingress</strong></p>
<ul>
<li>stpe2中的流表，分别指定了<code>tcp</code>协议，<code>nw_src</code>为<code>199.0.0.0/24</code>，<code>tp_dst</code>为<code>80</code></li>
<li>step2的action，第一条为直接从14的接口送出，第二条为重定向到了92</li>
</ul>
<p>先来看看ID为14的接口是哪个？不出所料，自然是<code>tap41ca5359-2e</code>的接口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl show br-int</span><br><span class="line">...</span><br><span class="line"> 14(tap41ca5359-2e): addr:fe:16:3e:fa:fd:13</span><br><span class="line">     config:     0</span><br><span class="line">     state:      0</span><br><span class="line">     current:    10MB-FD COPPER</span><br><span class="line">     speed: 10 Mbps now, 0 Mbps max</span><br><span class="line">     </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ul>
<li>table 92</li>
</ul>
<blockquote>
<p>丢弃</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cookie=0xd9177c011dbdf439, duration=3197934.551s, table=92, n_packets=0, n_bytes=0, priority=0 actions=drop</span><br></pre></td></tr></table></figure>
<p><strong>以上可看到，源地址为<code>199.0.0.0/24</code>，目的端口为<code>80</code>的<code>TCP</code>报文大多数情况将送往<code>tap41ca5359-2e</code>的接口</strong></p>
<p><strong>4.2 egress</strong></p>
<ul>
<li>step3中的流表，则分别指定了<code>tcp</code>协议，<code>nw_dst</code>为<code>199.0.0.0/24</code>，<code>tp_dst</code>为<code>80</code></li>
<li>step3的action则送往了73的table，而73则非常复杂，又涉及到了81，91，94的table</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cookie=0xd9177c011dbdf439, duration=1305.051s, table=73, n_packets=10, n_bytes=1345, priority=100,reg6=0x3,dl_dst=fa:16:3e:fa:fd:13 actions=load:0xe-&gt;NXM_NX_REG5[],resubmit(,81)</span><br><span class="line">cookie=0xd9177c011dbdf439, duration=1305.051s, table=73, n_packets=5, n_bytes=438, priority=90,ct_state=+new-est,ip,reg5=0xe actions=ct(commit,zone=NXM_NX_REG6[0..15]),resubmit(,91)</span><br><span class="line">cookie=0xd9177c011dbdf439, duration=1305.051s, table=73, n_packets=0, n_bytes=0, priority=90,ct_state=+new-est,ipv6,reg5=0xe actions=ct(commit,zone=NXM_NX_REG6[0..15]),resubmit(,91)</span><br><span class="line">cookie=0xd9177c011dbdf439, duration=3197929.613s, table=73, n_packets=0, n_bytes=0, priority=80,reg5=0x6 actions=resubmit(,94)</span><br><span class="line">cookie=0xd9177c011dbdf439, duration=3197929.613s, table=73, n_packets=0, n_bytes=0, priority=80,reg5=0x3 actions=resubmit(,94)</span><br><span class="line">cookie=0xd9177c011dbdf439, duration=3197929.613s, table=73, n_packets=0, n_bytes=0, priority=80,reg5=0x4 actions=resubmit(,94)</span><br><span class="line">cookie=0xd9177c011dbdf439, duration=3197929.613s, table=73, n_packets=0, n_bytes=0, priority=80,reg5=0x7 actions=resubmit(,94)</span><br><span class="line">cookie=0xd9177c011dbdf439, duration=3197929.613s, table=73, n_packets=0, n_bytes=0, priority=80,reg5=0x5 actions=resubmit(,94)</span><br><span class="line">cookie=0xd9177c011dbdf439, duration=3197849.617s, table=73, n_packets=5, n_bytes=446, priority=80,reg5=0x9 actions=resubmit(,94)</span><br><span class="line">cookie=0xd9177c011dbdf439, duration=3197849.617s, table=73, n_packets=2, n_bytes=180, priority=80,reg5=0x8 actions=resubmit(,94)</span><br><span class="line">cookie=0xd9177c011dbdf439, duration=3197817.084s, table=73, n_packets=11, n_bytes=778, priority=80,reg5=0xa actions=resubmit(,94)</span><br><span class="line">cookie=0xd9177c011dbdf439, duration=3197815.612s, table=73, n_packets=49080, n_bytes=5791412, priority=80,reg5=0xb actions=resubmit(,94)</span><br><span class="line">cookie=0xd9177c011dbdf439, duration=3197815.612s, table=73, n_packets=8, n_bytes=648, priority=80,reg5=0xc actions=resubmit(,94)</span><br><span class="line">cookie=0xd9177c011dbdf439, duration=1305.051s, table=73, n_packets=6, n_bytes=1078, priority=80,reg5=0xe actions=resubmit(,94)</span><br><span class="line">cookie=0xd9177c011dbdf439, duration=3197934.616s, table=73, n_packets=0, n_bytes=0, priority=0 actions=drop</span><br></pre></td></tr></table></figure>
<ul>
<li>table 91</li>
</ul>
<blockquote>
<p>重定向到了94</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cookie=0xd9177c011dbdf439, duration=3197934.561s, table=91, n_packets=10, n_bytes=876, priority=1 actions=resubmit(,94)</span><br></pre></td></tr></table></figure>
<ul>
<li>table 94</li>
</ul>
<blockquote>
<p>正常转发</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cookie=0xd9177c011dbdf439, duration=3197934.572s, table=94, n_packets=49280, n_bytes=5803120, priority=1 actions=NORMAL</span><br></pre></td></tr></table></figure>
<ul>
<li>table 81</li>
</ul>
<blockquote>
<p>送往<code>tap41ca5359-2e</code>的接口</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cookie=0xd9177c011dbdf439, duration=1305.051s, table=81, n_packets=3, n_bytes=126, priority=100,arp,reg5=0xe actions=output:<span class="string">"tap41ca5359-2e"</span></span><br><span class="line">cookie=0xd9177c011dbdf439, duration=1305.051s, table=81, n_packets=0, n_bytes=0, priority=100,icmp6,reg5=0xe,icmp_type=130 actions=output:<span class="string">"tap41ca5359-2e"</span></span><br><span class="line">cookie=0xd9177c011dbdf439, duration=1305.051s, table=81, n_packets=0, n_bytes=0, priority=100,icmp6,reg5=0xe,icmp_type=135 actions=output:<span class="string">"tap41ca5359-2e"</span></span><br><span class="line">cookie=0xd9177c011dbdf439, duration=1305.051s, table=81, n_packets=0, n_bytes=0, priority=100,icmp6,reg5=0xe,icmp_type=136 actions=output:<span class="string">"tap41ca5359-2e"</span></span><br><span class="line">cookie=0xd9177c011dbdf439, duration=1305.051s, table=81, n_packets=2, n_bytes=729, priority=95,udp,reg5=0xe,tp_src=67,tp_dst=68 actions=output:<span class="string">"tap41ca5359-2e"</span></span><br><span class="line">cookie=0xd9177c011dbdf439, duration=1305.051s, table=81, n_packets=0, n_bytes=0, priority=95,udp6,reg5=0xe,tp_src=547,tp_dst=546 actions=output:<span class="string">"tap41ca5359-2e"</span></span><br><span class="line">cookie=0xd9177c011dbdf439, duration=1305.051s, table=81, n_packets=5, n_bytes=490, priority=90,ct_state=-trk,ip,reg5=0xe actions=ct(table=82,zone=NXM_NX_REG6[0..15])</span><br><span class="line">cookie=0xd9177c011dbdf439, duration=1305.051s, table=81, n_packets=0, n_bytes=0, priority=90,ct_state=-trk,ipv6,reg5=0xe actions=ct(table=82,zone=NXM_NX_REG6[0..15])</span><br><span class="line">cookie=0xd9177c011dbdf439, duration=1305.051s, table=81, n_packets=0, n_bytes=0, priority=80,ct_state=+trk,reg5=0xe actions=resubmit(,82)</span><br><span class="line">cookie=0xd9177c011dbdf439, duration=3197934.606s, table=81, n_packets=0, n_bytes=0, priority=0 actions=drop</span><br></pre></td></tr></table></figure>
<p><strong>由上可看到，送往<code>199.0.0.0/24</code>，目的端口为<code>80</code>的<code>TCP</code>报文大多数情况将正常转发出去</strong></p>
]]></content>
      <categories>
        <category>openstack</category>
      </categories>
      <tags>
        <tag>ovs</tag>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux虚拟网络学习笔记</title>
    <url>/post/575b6208.html</url>
    <content><![CDATA[<p>Linux虚拟网络是近几年虚拟化及容器等技术的基础，掌握了这些基础，可以更深入的理解openstack、docker的网络功能，以及测试过程中的问题定位。</p>
<p>本文通过实验的方式学习这些虚拟网络功能，包括tap设备，veth pair， bridge及router</p>
<a id="more"></a>
<h2 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h2>
<blockquote>
<p>注：本实验基于Ubuntu16.04</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt install uml-utilities</span><br><span class="line">$ apt install bridge-utils</span><br></pre></td></tr></table></figure>
<h2 id="tap设备"><a class="markdownIt-Anchor" href="#tap设备"></a> tap设备</h2>
<blockquote>
<p>Linux的tun/tap驱动实现了虚拟网卡的功能，tun表示虚拟的是点对点设备，tap表示虚拟的是以太网设备</p>
<p>tap位于网络OSI模型的二层（数据链路层），tun位于网络的三层。</p>
</blockquote>
<p><strong>1. 创建tap</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tunctl -t tap_test</span><br><span class="line">$ ifconfig tap_test 192.168.100.1/24</span><br></pre></td></tr></table></figure>
<p><strong>2. 创建namespace</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns add ns_test</span><br></pre></td></tr></table></figure>
<p><strong>3. 迁移网口到namespace</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip link <span class="built_in">set</span> tap_test netns ns_test</span><br></pre></td></tr></table></figure>
<blockquote>
<p>迁移后，对应的ip会没有</p>
</blockquote>
<p><strong>4. 进入namespace并查看接口信息</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns <span class="built_in">exec</span> ns_test /bin/bash</span><br><span class="line">$ ifconfig tap_test 192.168.50.1/24</span><br><span class="line">$ ifconfig</span><br><span class="line">tap_test  Link encap:Ethernet  HWaddr 76:71:70:f2:ac:f6</span><br><span class="line">          inet addr:192.168.50.1  Bcast:192.168.50.255  Mask:255.255.255.0</span><br><span class="line">          UP BROADCAST MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure>
<h2 id="veth-pair"><a class="markdownIt-Anchor" href="#veth-pair"></a> veth pair</h2>
<blockquote>
<p>Veth pair是一对虚拟网卡，从一个veth网卡发出的数据包可以直接到达它的peer veth。相当于两个接口之间接着一根网线</p>
</blockquote>
<p><strong>1. 创建两个ns</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns add ns1</span><br><span class="line">$ ip netns add ns2</span><br></pre></td></tr></table></figure>
<p><strong>2. 创建veth pair</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip link add tap1 <span class="built_in">type</span> veth peer name tap2</span><br></pre></td></tr></table></figure>
<p><strong>3. 迁移网口到namespace</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip link <span class="built_in">set</span> tap1 netns ns1</span><br><span class="line">$ ip link <span class="built_in">set</span> tap2 netns ns2</span><br></pre></td></tr></table></figure>
<p><strong>4. 分别绑定IP地址</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns <span class="built_in">exec</span> ns1 ifconfig tap1 192.168.40.1/24</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns2 ifconfig tap2 192.168.40.2/24</span><br></pre></td></tr></table></figure>
<p><strong>5. 测试连通性</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns <span class="built_in">exec</span> ns1 ping 192.168.40.2</span><br><span class="line">PING 192.168.40.2 (192.168.40.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.40.2: icmp_seq=1 ttl=64 time=0.096 ms</span><br><span class="line">64 bytes from 192.168.40.2: icmp_seq=2 ttl=64 time=0.049 ms</span><br></pre></td></tr></table></figure>
<h2 id="bridge"><a class="markdownIt-Anchor" href="#bridge"></a> bridge</h2>
<blockquote>
<p>两个namespace中的网络可以通过veth pair访问，但3个之间甚至多个互通，veth pair就无法胜任，此时需要用到bridge/switch</p>
</blockquote>
<p>下面的实验模拟4个namespace中的接口通过bridge互通</p>
<img src="/post/575b6208/575b6208/bridge.jpg" class title="Rule List">
<p><strong>1. 创建veth pair</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip link add tap1 <span class="built_in">type</span> veth peer name tap1_peer</span><br><span class="line">$ ip link add tap2 <span class="built_in">type</span> veth peer name tap2_peer</span><br><span class="line">$ ip link add tap3 <span class="built_in">type</span> veth peer name tap3_peer</span><br><span class="line">$ ip link add tap4 <span class="built_in">type</span> veth peer name tap4_peer</span><br></pre></td></tr></table></figure>
<p><strong>2. 创建namespace并迁移tap接口</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns add ns1</span><br><span class="line">$ ip netns add ns2</span><br><span class="line">$ ip netns add ns3</span><br><span class="line">$ ip netns add ns4</span><br><span class="line"><span class="comment"># 迁移tap接口</span></span><br><span class="line">$ ip link <span class="built_in">set</span> tap1 netns ns1</span><br><span class="line">$ ip link <span class="built_in">set</span> tap2 netns ns2</span><br><span class="line">$ ip link <span class="built_in">set</span> tap3 netns ns3</span><br><span class="line">$ ip link <span class="built_in">set</span> tap4 netns ns4</span><br></pre></td></tr></table></figure>
<p><strong>3. 创建bridge</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brctl addbr br1</span><br></pre></td></tr></table></figure>
<p><strong>4. 将对应的tap添加到bridge中</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brctl addif br1 tap1_peer</span><br><span class="line">$ brctl addif br1 tap2_peer</span><br><span class="line">$ brctl addif br1 tap3_peer</span><br><span class="line">$ brctl addif br1 tap4_peer</span><br></pre></td></tr></table></figure>
<p><strong>5. 配置IP地址</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns <span class="built_in">exec</span> ns1 ifconfig tap1 192.168.50.1/24</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns2 ifconfig tap2 192.168.50.2/24</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns3 ifconfig tap3 192.168.50.3/24</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns4 ifconfig tap4 192.168.50.4/24</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注： 此时是无法相互访问</p>
</blockquote>
<p><strong>6. 设置网桥及对应接口状态为up</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ifconfig br1 up</span><br><span class="line">$ ifconfig tap1_peer up</span><br><span class="line">$ ifconfig tap2_peer up</span><br><span class="line">$ ifconfig tap3_peer up</span><br><span class="line">$ ifconfig tap4_peer up</span><br></pre></td></tr></table></figure>
<p><strong>7. 测试连通性</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns <span class="built_in">exec</span> ns4 ping 192.168.50.1 -c 1</span><br><span class="line">PING 192.168.50.1 (192.168.50.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.50.1: icmp_seq=1 ttl=64 time=0.095 ms</span><br><span class="line"></span><br><span class="line">--- 192.168.50.1 ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span><br><span class="line">rtt min/avg/max/mdev = 0.095/0.095/0.095/0.000 ms</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns4 ping 192.168.50.2 -c 1</span><br><span class="line">PING 192.168.50.2 (192.168.50.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.50.2: icmp_seq=1 ttl=64 time=0.106 ms</span><br><span class="line"></span><br><span class="line">--- 192.168.50.2 ping statistics ---</span><br><span class="line">1 packets transmitted, 1 received, 0% packet loss, time 0ms</span><br><span class="line">rtt min/avg/max/mdev = 0.106/0.106/0.106/0.000 ms</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="router"><a class="markdownIt-Anchor" href="#router"></a> router</h2>
<blockquote>
<p>注：Linux默认不开启转发功能，实验前需要先打开</p>
<p>修改<code>/etc/sysctl.conf</code>文件，设置<code>net.ipv4.ip_forward=1</code>，重启生效</p>
<p>临时修改： <code>echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward</code></p>
</blockquote>
<img src="/post/575b6208/575b6208/router.jpg" class title="Rule List">
<p><strong>1. 创建veth pair</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip link add tap5 <span class="built_in">type</span> veth peer name tap5_peer</span><br><span class="line">$ ip link add tap6 <span class="built_in">type</span> veth peer name tap6_peer</span><br></pre></td></tr></table></figure>
<p><strong>2. 创建namespace并迁移tap接口</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns add ns5</span><br><span class="line">$ ip netns add ns6</span><br><span class="line">$ ip link <span class="built_in">set</span> tap5 netns ns5</span><br><span class="line">$ ip link <span class="built_in">set</span> tap6 netns ns6</span><br></pre></td></tr></table></figure>
<p><strong>3. 配置IP地址</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ifconfig tap5_peer 192.168.100.1/24</span><br><span class="line">$ ifconfig tap6_peer 192.168.200.1/24</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns5 ifconfig tap5 192.168.100.2/24</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns6 ifconfig tap6 192.168.200.2/24</span><br></pre></td></tr></table></figure>
<p><strong>4. 为namespace配置路由</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns <span class="built_in">exec</span> ns5 route add -net 192.168.200.0/24 gw 192.168.100.1</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns6 route add -net 192.168.100.0/24 gw 192.168.200.1</span><br></pre></td></tr></table></figure>
<p><strong>5. 测试</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns <span class="built_in">exec</span> ns5 ping 192.168.200.2</span><br><span class="line">PING 192.168.200.2 (192.168.200.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.200.2: icmp_seq=1 ttl=63 time=0.077 ms</span><br><span class="line">64 bytes from 192.168.200.2: icmp_seq=2 ttl=63 time=0.087 ms</span><br></pre></td></tr></table></figure>
<h2 id="tun"><a class="markdownIt-Anchor" href="#tun"></a> tun</h2>
<blockquote>
<p>tun应该是tunnel的缩写，启用了IP层隧道功能</p>
<p>Linux原生支持5种隧道<code>{ ipip | gre | sit | isatap | vti }</code></p>
</blockquote>
<img src="/post/575b6208/575b6208/tunnel.jpg" class title="Rule List">
<p>忽略上图中的tun1和tun2后，整个topo与router中的一样。那么先按照<a href="#router">router</a>章节创建两个ns及配置</p>
<p><strong>1. 创建veth pair并分别迁移到对应的namespace</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip link add tap1 <span class="built_in">type</span> veth peer name tap1_peer</span><br><span class="line">$ ip link add tap2 <span class="built_in">type</span> veth peer name tap2_peer</span><br><span class="line">$ ip netns add ns1</span><br><span class="line">$ ip netns add ns2</span><br><span class="line">$ ip link <span class="built_in">set</span> tap1 netns ns1</span><br><span class="line">$ ip link <span class="built_in">set</span> tap2 netns ns2</span><br></pre></td></tr></table></figure>
<p><strong>2. 配置IP和路由</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ifconfig tap1_peer 192.168.100.1/24</span><br><span class="line">$ ifconfig tap2_peer 192.168.200.1/24</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns1 ifconfig tap1 192.168.100.2/24</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns2 ifconfig tap2 192.168.200.2/24</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns1 route add -net 192.168.200.0/24 gw 192.168.100.1</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns2 route add -net 192.168.100.0/24 gw 192.168.200.1</span><br></pre></td></tr></table></figure>
<p><strong>3. 在ns1中创建tun1</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns <span class="built_in">exec</span> ns1 ip tunnel add tun1 mode ipip remote 192.168.200.2 <span class="built_in">local</span> 192.168.100.2 ttl 255</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns1 ip addr add 192.168.50.10 peer 192.168.60.10 dev tun1</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns1 ifconfig tun1 up</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns1 ifconfig</span><br><span class="line">tap1      Link encap:Ethernet  HWaddr 46:a0:97:02:8c:07</span><br><span class="line">          inet addr:192.168.100.2  Bcast:192.168.100.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::44a0:97ff:fe02:8c07/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:12 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:12 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:928 (928.0 B)  TX bytes:928 (928.0 B)</span><br><span class="line"></span><br><span class="line">tun1      Link encap:IPIP Tunnel  HWaddr</span><br><span class="line">          inet addr:192.168.50.10  P-t-P:192.168.60.10  Mask:255.255.255.255</span><br><span class="line">          UP POINTOPOINT RUNNING NOARP  MTU:1480  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1</span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure>
<p><strong>4. 在ns2中创建tun2</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns <span class="built_in">exec</span> ns2 ip tunnel add tun2 mode ipip remote 192.168.100.2 <span class="built_in">local</span> 192.168.200.2 ttl 255</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns2 ip addr add 192.168.60.10 peer 192.168.50.10 dev tun2</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns2 ifconfig tun2 up</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns2 ifconfig</span><br><span class="line">tap2      Link encap:Ethernet  HWaddr aa:2e:e9:18:94:95</span><br><span class="line">          inet addr:192.168.200.2  Bcast:192.168.200.255  Mask:255.255.255.0</span><br><span class="line">          inet6 addr: fe80::a82e:e9ff:fe18:9495/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:12 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:12 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:928 (928.0 B)  TX bytes:928 (928.0 B)</span><br><span class="line"></span><br><span class="line">tun2      Link encap:IPIP Tunnel  HWaddr</span><br><span class="line">          inet addr:192.168.60.10  P-t-P:192.168.50.10  Mask:255.255.255.255</span><br><span class="line">          UP POINTOPOINT RUNNING NOARP  MTU:1480  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1</span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure>
<p><strong>5. 测试tun的连通性</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns <span class="built_in">exec</span> ns1 ping 192.168.60.10</span><br><span class="line">PING 192.168.60.10 (192.168.60.10) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.60.10: icmp_seq=1 ttl=64 time=0.333 ms</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><strong>6. 抓包看看</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns <span class="built_in">exec</span> ns2 tcpdump -i tap2</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on tap2, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">09:55:19.399964 IP 192.168.100.2 &gt; 192.168.200.2: IP 192.168.50.10 &gt; 192.168.60.10: ICMP <span class="built_in">echo</span> request, id 17197, seq 1, length 64 (ipip-proto-4)</span><br><span class="line">09:55:19.400004 IP 192.168.200.2 &gt; 192.168.100.2: IP 192.168.60.10 &gt; 192.168.50.10: ICMP <span class="built_in">echo</span> reply, id 17197, seq 1, length 64 (ipip-proto-4)</span><br><span class="line">...</span><br><span class="line">$ ip netns <span class="built_in">exec</span> ns2 tcpdump -i tun2</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on tun2, link-type RAW (Raw IP), capture size 262144 bytes</span><br><span class="line">09:55:57.735663 IP 192.168.50.10 &gt; 192.168.60.10: ICMP <span class="built_in">echo</span> request, id 17199, seq 1, length 64</span><br><span class="line">09:55:57.735685 IP 192.168.60.10 &gt; 192.168.50.10: ICMP <span class="built_in">echo</span> reply, id 17199, seq 1, length 64</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：namespace中抓包可能不会立即打印在屏幕上</p>
</blockquote>
<p><strong>7. 查看路由表项</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip netns <span class="built_in">exec</span> ns1 route -n</span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">192.168.60.10   0.0.0.0         255.255.255.255 UH    0      0        0 tun1</span><br><span class="line">192.168.100.0   0.0.0.0         255.255.255.0   U     0      0        0 tap1</span><br><span class="line">192.168.200.0   192.168.100.1   255.255.255.0   UG    0      0        0 tap1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以看到，ns1中自动创建了一条指向192.168.60.10的路由，下一跳是tun1</p>
</blockquote>
<h2 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h2>
<p>Openstack的neutron组件正是基于这些Linux虚拟网络功能实现了虚拟机之间的网络通道。</p>
<p>其中，tap、tun、veth pair被用于bridge之间的连接、bridge与vm的连接、bridge与router之间的连接。</p>
<p>而bridge提供二层转发功能，router提供三层转发功能。</p>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker + ovs，原来如此简单</title>
    <url>/post/56e1f957.html</url>
    <content><![CDATA[<p>一直没敢下手尝试docker的网络使用ovs，总觉得可能很复杂。所以，人往往都是自己把自己拒之门外的。</p>
<blockquote>
<p>我整整折腾了一天，容器内以二层方式访问外部的IP始终不通。最后发现原来是网卡<strong>混杂模式</strong>惹的祸</p>
</blockquote>
<a id="more"></a>
<h2 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h2>
<h3 id="安装docker"><a class="markdownIt-Anchor" href="#安装docker"></a> 安装docker</h3>
<p>在我的其他博文里有国内源安装docker的内容，原样照搬</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update &amp;&amp; sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">$ curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">$ add-apt-repository <span class="string">"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br><span class="line">$ apt update</span><br><span class="line">$ apt-get -y install docker-ce</span><br></pre></td></tr></table></figure>
<h3 id="安装ovs"><a class="markdownIt-Anchor" href="#安装ovs"></a> 安装ovs</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install openvswitch-switch</span><br></pre></td></tr></table></figure>
<h3 id="安装ovs-docker"><a class="markdownIt-Anchor" href="#安装ovs-docker"></a> 安装ovs-docker</h3>
<p>简单介绍一下，ovs-docker实际上是一个shell脚本，封装了ovs和docker的一些操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/bin</span><br><span class="line">$ wget https://raw.githubusercontent.com/openvswitch/ovs/master/utilities/ovs-docker</span><br><span class="line">$ chmod a+rwx ovs-docker</span><br></pre></td></tr></table></figure>
<h2 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h2>
<p>两个docker容器经过ovs网桥进行访问及访问外部网络</p>
<h3 id="容器互访"><a class="markdownIt-Anchor" href="#容器互访"></a> 容器互访</h3>
<ul>
<li>创建ovs网桥</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-vsctl add-br br0</span><br></pre></td></tr></table></figure>
<ul>
<li>创建两个容器</li>
</ul>
<blockquote>
<p>注：实验使用了busybox的镜像，需要提前pull到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull busybox</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -it --net=none --privileged=<span class="literal">true</span> --name=h1 busybox</span><br></pre></td></tr></table></figure>
<p>在另外一个shell中执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -it --net=none --privileged=<span class="literal">true</span> --name=h2 busybox</span><br></pre></td></tr></table></figure>
<ul>
<li>查看当前网络</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># ifconfig</span></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1</span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br></pre></td></tr></table></figure>
<p>可以看到当前仅有一个loopback接口</p>
<ul>
<li>连接容器到网桥</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-docker add-port br0 eth0 h1</span><br><span class="line">$ ovs-docker add-port br0 eth0 h2</span><br></pre></td></tr></table></figure>
<ul>
<li>配置IP地址</li>
</ul>
<p>分别在两个docker容器中配置eth0的IP地址为同一个网段</p>
<p><strong>h1</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ifconfig eth0 192.168.1.2</span><br></pre></td></tr></table></figure>
<p><strong>h2</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ifconfig eth0 192.168.1.3</span><br></pre></td></tr></table></figure>
<ul>
<li>测试连通性</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ping 192.168.1.3</span><br><span class="line">PING 192.168.1.2 (192.168.1.3): 56 data bytes</span><br><span class="line">64 bytes from 192.168.1.3: seq=0 ttl=64 time=1.065 ms</span><br><span class="line">64 bytes from 192.168.1.3: seq=1 ttl=64 time=0.139 ms</span><br></pre></td></tr></table></figure>
<p><strong>没错</strong>，就是这么简单</p>
<h3 id="访问外部网络"><a class="markdownIt-Anchor" href="#访问外部网络"></a> 访问外部网络</h3>
<p>当我解决了<strong>混杂模式</strong>的问题之后，原来一切都是那么简单</p>
<blockquote>
<p>在外部另外一个PC上配置了192.168.1.1</p>
</blockquote>
<ul>
<li>为br0增加物理接口</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-vsctl add-port br0 ens192</span><br></pre></td></tr></table></figure>
<ul>
<li>测试</li>
</ul>
<p>从容器中ping 192.168.1.1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ping 192.168.1.1</span><br><span class="line">PING 192.168.1.1 (192.168.1.1): 56 data bytes</span><br><span class="line">64 bytes from 192.168.1.1: seq=30 ttl=64 time=1.319 ms</span><br><span class="line">64 bytes from 192.168.1.1: seq=31 ttl=64 time=0.461 ms</span><br></pre></td></tr></table></figure>
<p><strong>大功告成</strong></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>ovs</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s环境安装之差点儿我就放弃了</title>
    <url>/post/d0b629f4.html</url>
    <content><![CDATA[<p>尝试了好几种方式，想要准备一个k8s的实验集群，都或多或少的遇到了些问题。主要是因为要入门，所以要搭一套环境，但因为还没有入门，搭建过程中遇到问题，就不知如何下手。<br>
在行将放弃之际，<a href="https://github.com/easzlab/kubeasz">kubeasz</a>挽救了我，本文主要记录如何用kubeasz搭建一个allinone的环境</p>
<a id="more"></a>
<h2 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h2>
<p>其实kubeasz的文档写的非常简单，因为本身搭建过程就是很简单，可参看<a href="https://github.com/easzlab/kubeasz/blob/master/docs/setup/quickStart.md">官方文档</a></p>
<ol>
<li>一台Linux虚拟机(Ubuntu16.04 server或CentOS 7 Minimal)</li>
<li>内存需要2G</li>
<li>硬盘30G</li>
</ol>
<h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2>
<h3 id="下载文件"><a class="markdownIt-Anchor" href="#下载文件"></a> 下载文件</h3>
<p>github的说明文档提供的下载方式，我其实都疑惑了，因为有一个<code>${release}</code>，并非开箱即食。可以这样做</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/easzlab/kubeasz.git</span><br></pre></td></tr></table></figure>
<p>随后，进入kubeasz目录，使用工具脚本下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> kubeasz</span><br><span class="line">$ bash tools/easzup -D</span><br></pre></td></tr></table></figure>
<h3 id="安装-2"><a class="markdownIt-Anchor" href="#安装-2"></a> 安装</h3>
<p>下面就是按部就班的运行了，注意，你也不需要提前安装docker，所有的都是自动下载及安装的</p>
<ol>
<li>容器化运行 kubeasz</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bash tools/easzup -S</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用默认配置安装 aio 集群</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it kubeasz easzctl start-aio</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如遇到失败，可再次尝试执行</p>
</blockquote>
<h3 id="验证安装"><a class="markdownIt-Anchor" href="#验证安装"></a> 验证安装</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl version                   <span class="comment"># 验证集群版本     </span></span><br><span class="line">$ kubectl get componentstatus       <span class="comment"># 验证 scheduler/controller-manager/etcd等组件状态</span></span><br><span class="line">$ kubectl get node                  <span class="comment"># 验证节点就绪 (Ready) 状态</span></span><br><span class="line">$ kubectl get pod --all-namespaces  <span class="comment"># 验证集群pod状态，默认已安装网络插件、coredns、metrics-server等</span></span><br><span class="line">$ kubectl get svc --all-namespaces  <span class="comment"># 验证集群服务状态</span></span><br></pre></td></tr></table></figure>
<h3 id="登陆dashboard"><a class="markdownIt-Anchor" href="#登陆dashboard"></a> 登陆dashboard</h3>
<p>安装完成后，dashboard已经准备好了，只需要获取登陆方式即可。</p>
<p>按照官方文档的说法，登陆dashboard有好几种方式，选择一种即可。如token方式</p>
<h4 id="获取port"><a class="markdownIt-Anchor" href="#获取port"></a> 获取port</h4>
<p>按照以上方式安装完成后，默认的port应该是34980，所以，可以访问<code>https://当前IP:34980</code>，即可登陆dashboard</p>
<p>也可以查看dashboard的端口开放状况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get svc --all-namespaces</span><br><span class="line">NAMESPACE     NAME                      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                       AGE</span><br><span class="line">default       kubernetes                ClusterIP   10.68.0.1       &lt;none&gt;        443/TCP                       30m</span><br><span class="line">kube-system   heapster                  ClusterIP   10.68.91.148    &lt;none&gt;        80/TCP                        114s</span><br><span class="line">kube-system   kube-dns                  ClusterIP   10.68.0.2       &lt;none&gt;        53/UDP,53/TCP,9153/TCP        2m20s</span><br><span class="line">kube-system   kubernetes-dashboard      NodePort    10.68.23.76     &lt;none&gt;        443:34980/TCP                 118s</span><br><span class="line">kube-system   metrics-server            ClusterIP   10.68.29.183    &lt;none&gt;        443/TCP                       2m13s</span><br><span class="line">kube-system   traefik-ingress-service   NodePort    10.68.226.239   &lt;none&gt;        80:23456/TCP,8080:38858/TCP   105s</span><br></pre></td></tr></table></figure>
<h4 id="获取token"><a class="markdownIt-Anchor" href="#获取token"></a> 获取token</h4>
<ul>
<li>查看如下文件是否存在</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls /etc/ansible/manifests/dashboard/admin-user-sa-rbac.yaml</span><br></pre></td></tr></table></figure>
<ul>
<li>获取token</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f /etc/ansible/manifests/dashboard/admin-user-sa-rbac.yaml</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">====</span><br><span class="line">ca.crt:     1350 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IiJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWRoNjYyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiJmZDdjZjc4Mi1hOTM0LTExZTktOTA1Zi0wMDBjMjlhMzc1YmYiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.KXFNuuibxRpF7AJHZBRkGgvpiVl4axfGA0A8haLIR3coX0HHPrQph8sO9GKl7C0KP6YXN-43VIxlpDXy-i_UkimxDJRVS08IW4r39Z4HhD-rKFYafQJROMrFG9lcbn1pZWTLBRGsO3lFCI1DyRDC7W_HSb63mgO2IoiQXGhgdhEWc7OnyNfxovkbtQA5xfsVqWqeWE-Dn4Jeo0lFe630I-iREMXPQvF5I7UNJFMJLCgFV0fG8J7__MYBf8xVnYL3ryaMBwKjQxQVsD3IOGS6TAk7RLZzjevySl-pXE1CcE8fosQQwJsOjOoKn5u1LGK3XUkIJR2rOf3jVMoQYYqe1Q</span><br></pre></td></tr></table></figure>
<h2 id="踩过的坑"><a class="markdownIt-Anchor" href="#踩过的坑"></a> 踩过的坑</h2>
<h3 id="node出于notready状态"><a class="markdownIt-Anchor" href="#node出于notready状态"></a> node出于NotReady状态</h3>
<ul>
<li>排查思路</li>
</ul>
<p>查看服务状态及相关错误信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ journalctl -f -u kubelet</span><br></pre></td></tr></table></figure>
<p>最终发现我的内存因为是1G导致运行失败</p>
]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>Kubernetes</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>pyenv使用笔记</title>
    <url>/post/72a09cbb.html</url>
    <content><![CDATA[<p>OSX上的python版本纷繁复杂。</p>
<ul>
<li>有系统自带的: /System/Library/Frameworks/Python.framework/Versions/</li>
<li>有后来安装的: /Library/Frameworks/Python.framework/Versions/</li>
</ul>
<a id="more"></a>
<p>经常搞不清楚用的是哪里的python。遇到要升级python版本，又提心吊胆的怕把系统的那个给搞挂了。于是，便试着用pyenv来管理版本</p>
<h2 id="关于pyenv"><a class="markdownIt-Anchor" href="#关于pyenv"></a> 关于Pyenv</h2>
<blockquote>
<p>pyenv是Python版本管理工具，能够使你轻松的在多个python版本之间进行切换</p>
</blockquote>
<ul>
<li>
<p>pyenv当前在<a href="https://github.com/pyenv/pyenv">github</a>上有14k的关注量</p>
</li>
<li>
<p>安装说明参看github上的<a href="https://github.com/pyenv/pyenv#installation">安装文档</a></p>
</li>
</ul>
<h2 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h2>
<p>使用<code>pyenv commands</code>可以查看所有命令或者通过<code>pyenv -h</code>来查看常用命令</p>
<h3 id="版本管理"><a class="markdownIt-Anchor" href="#版本管理"></a> 版本管理</h3>
<h4 id="查看已安装的python版本"><a class="markdownIt-Anchor" href="#查看已安装的python版本"></a> 查看已安装的python版本</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv versions</span><br><span class="line">* system (<span class="built_in">set</span> by /Users/xxx/.pyenv/version)</span><br><span class="line">  3.7.0</span><br></pre></td></tr></table></figure>
<h4 id="查看可以安装的版本"><a class="markdownIt-Anchor" href="#查看可以安装的版本"></a> 查看可以安装的版本</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv install -l</span><br><span class="line">Available versions:</span><br><span class="line">  2.1.3</span><br><span class="line">  2.2.3</span><br><span class="line">  ...</span><br><span class="line">  stackless-3.5.4</span><br></pre></td></tr></table></figure>
<p>可以看到，可安装的版本有python2, python3, activepython, anaconda, ironpython, jython, pypy, stackless, etc.</p>
<h4 id="安装指定版本"><a class="markdownIt-Anchor" href="#安装指定版本"></a> 安装指定版本</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv install 2.7.15</span><br><span class="line">python-build: use openssl from homebrew</span><br><span class="line">python-build: use readline from homebrew</span><br><span class="line">Installing Python-2.7.15...</span><br><span class="line">python-build: use readline from homebrew</span><br><span class="line">Installed Python-2.7.15 to /Users/xxx/.pyenv/versions/2.7.15</span><br></pre></td></tr></table></figure>
<p><strong>注</strong>：Mac上安装可能会遇到<code>The Python zlib extension was not compiled. Missing the zlib?</code>的错误，可以尝试<code>CFLAGS=&quot;-I$(xcrun --show-sdk-path)/usr/include&quot; pyenv install 2.7.15</code></p>
<p><em>更多错误，可查看项目的wiki中的<a href="https://github.com/pyenv/pyenv/wiki/Common-build-problems">常见问题</a></em></p>
<blockquote>
<p>安装完毕一个python版本后，需要执行<code>pyenv rehash</code>来更新后，才能看到已安装的版本</p>
</blockquote>
<h3 id="优先级"><a class="markdownIt-Anchor" href="#优先级"></a> 优先级</h3>
<p>可以为当前目录、当前shell以及全局进行不同的python版本定义</p>
<p>遵循<strong>shell&gt;local&gt;global</strong>的优先级顺序</p>
<h4 id="设置版本"><a class="markdownIt-Anchor" href="#设置版本"></a> 设置版本</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv global 2.7.15 <span class="comment">#设置全局版本，版本信息记录在~/.pyenv/version</span></span><br><span class="line">$ pyenv <span class="built_in">local</span> 3.7.0 <span class="comment">#设置当前目录的python版本，将在当前目录生成.python-version文件</span></span><br></pre></td></tr></table></figure>
<ul>
<li>当需要为一个目录设置特定的python版本时，可以先进入该目录下执行<code>pyenv local xxx</code></li>
<li>当需要为该目录下的一个子目录设置特定的python版本，可进入该子目录设置local</li>
<li>设置完毕后，会在响应的目录下生成<code>.python-version</code>的文件</li>
<li>使用时，将从当前目录开始查找，如果不存在<code>.python-version</code>文件，则向上一级查找，直到根目录为止</li>
<li>如果到跟目录任然没有查找到，则使用global的设置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv shell 3.6.0 <span class="comment">#为当前shell设置python版本，将通过环境变量的方式设置</span></span><br><span class="line">$ env | grep PYENV_VERSION</span><br><span class="line">PYENV_VERSION=2.7.15</span><br><span class="line">$ pyenv shell --<span class="built_in">unset</span> <span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h3 id="virtualenv"><a class="markdownIt-Anchor" href="#virtualenv"></a> virtualenv</h3>
<p>默认情况下，安装pyenv后会安装<strong>pyenv-virtualenv</strong>的插件，可以通过<code>pyenv virtualenv</code>创建虚拟环境</p>
<h4 id="查看已有的virtualenv"><a class="markdownIt-Anchor" href="#查看已有的virtualenv"></a> 查看已有的virtualenv</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv virtualenvs</span><br><span class="line">  3.7.0/envs/common3 (created from /Users/abc/.pyenv/versions/3.7.0)</span><br><span class="line">  common3 (created from /Users/abc/.pyenv/versions/3.7.0)</span><br></pre></td></tr></table></figure>
<h4 id="创建virtualenv"><a class="markdownIt-Anchor" href="#创建virtualenv"></a> 创建virtualenv</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv virtualenv 2.7.15 my2.7.15</span><br><span class="line">Collecting virtualenv</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/8f/f1/c0b069ca6cb44f9681715232e6d3d65c75866dd231c5e4a88e80a46634bb/virtualenv-16.3.0-py2.py3-none-any.whl (2.0MB)</span><br><span class="line">    100% |████████████████████████████████| 2.0MB 117kB/s</span><br><span class="line">Requirement already satisfied: setuptools&gt;=18.0.0 <span class="keyword">in</span> ./.pyenv/versions/2.7.15/lib/python2.7/site-packages (from virtualenv) (39.0.1)</span><br><span class="line">Installing collected packages: virtualenv</span><br><span class="line">Successfully installed virtualenv-16.3.0</span><br><span class="line">New python executable <span class="keyword">in</span> /Users/abc/.pyenv/versions/2.7.15/envs/my2.7.15/bin/python2.7</span><br><span class="line">Also creating executable <span class="keyword">in</span> /Users/abc/.pyenv/versions/2.7.15/envs/my2.7.15/bin/python</span><br><span class="line">Installing setuptools, pip, wheel...</span><br><span class="line"><span class="keyword">done</span>.</span><br><span class="line">Requirement already satisfied: setuptools <span class="keyword">in</span> /Users/abc/.pyenv/versions/2.7.15/envs/my2.7.15/lib/python2.7/site-packages</span><br><span class="line">Requirement already satisfied: pip <span class="keyword">in</span> /Users/abc/.pyenv/versions/2.7.15/envs/my2.7.15/lib/python2.7/site-packages</span><br><span class="line"></span><br><span class="line">$ pyenv virtualenvs</span><br><span class="line">  2.7.15/envs/my2.7.15 (created from /Users/abc/.pyenv/versions/2.7.15)</span><br><span class="line">  3.7.0/envs/common3 (created from /Users/abc/.pyenv/versions/3.7.0)</span><br><span class="line">  common3 (created from /Users/abc/.pyenv/versions/3.7.0)</span><br><span class="line">  my2.7.15 (created from /Users/abc/.pyenv/versions/2.7.15)</span><br></pre></td></tr></table></figure>
<h4 id="active-deactive"><a class="markdownIt-Anchor" href="#active-deactive"></a> active &amp; deactive</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv activate my2.7.15</span><br><span class="line">(my2.7.15) $</span><br><span class="line">(my2.7.15) $ pyenv deactivate</span><br></pre></td></tr></table></figure>
<h4 id="删除virtualenv"><a class="markdownIt-Anchor" href="#删除virtualenv"></a> 删除virtualenv</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv uninstall my2.7.15</span><br><span class="line">pyenv-virtualenv: remove /Users/abc/.pyenv/versions/2.7.15/envs/my2.7.15? Y</span><br></pre></td></tr></table></figure>
<p><strong>Have Fun</strong> 😄</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用国内资源（备忘）</title>
    <url>/post/612ebe35.html</url>
    <content><![CDATA[<h2 id="使用阿里云镜像安装docker-ce"><a class="markdownIt-Anchor" href="#使用阿里云镜像安装docker-ce"></a> 使用阿里云镜像安装Docker-CE</h2>
<blockquote>
<p>docker.com越来越难访问了</p>
</blockquote>
<a id="more"></a>
<ol>
<li>
<p>安装必要工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装阿里云的GPG证书</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>添加软件源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ add-apt-repository <span class="string">"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>拉取更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt update</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装docker-ce</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt-get -y install docker-ce</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="使用阿里云的pip源"><a class="markdownIt-Anchor" href="#使用阿里云的pip源"></a> 使用阿里云的pip源</h2>
<ol>
<li>
<p>安装pip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span><br><span class="line">$ python get-pip.py</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改pip源为阿里云（永久修改）</p>
<p>在用户根目录创建 <code>.pip/pip.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="mac使用清华homebrew源"><a class="markdownIt-Anchor" href="#mac使用清华homebrew源"></a> MAC使用清华homebrew源</h2>
<blockquote>
<p>可直接访问<a href="https://mirror.tuna.tsinghua.edu.cn/help/homebrew/">清华大学开源软件镜像站</a>获取</p>
</blockquote>
<ul>
<li>
<p>替换现有的git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">$ git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">$ git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line">$ brew update</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>docker</tag>
        <tag>Linux</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04 VPP环境搭建</title>
    <url>/post/c80fffe0.html</url>
    <content><![CDATA[<h1 id="环境"><a class="markdownIt-Anchor" href="#环境"></a> 环境</h1>
<h2 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h2>
<ol>
<li>VmWare虚拟环境</li>
<li>Host需求：2cpu，4G内存，3块网卡</li>
<li>Ubuntu16.04</li>
</ol>
<h2 id="拓扑"><a class="markdownIt-Anchor" href="#拓扑"></a> 拓扑</h2>
<p>搭建典型的c2s拓扑</p>
<a id="more"></a>
<img src="/post/c80fffe0/c80fffe0/vpp_setup_topo.png" class title="topo">
<ul>
<li>通过vsphere创建两个虚拟交换机</li>
<li>host1的第二个接口与vpp的第二个接口连在同一个交换机上</li>
<li>host2的第二个接口与vpp的第三个接口连在同一个交换机上</li>
</ul>
<h2 id="vpp安装先决条件"><a class="markdownIt-Anchor" href="#vpp安装先决条件"></a> VPP安装先决条件</h2>
<ol>
<li>Ubuntu安装git（git默认安装）</li>
<li>Ubuntu安装dpdk，并绑定PCI的另外两个接口到dpdk</li>
</ol>
<h1 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h1>
<p>官方文档提供了多种安装方式，并且推荐使用vagrant包，由于这里使用的是虚拟环境，则使用直接安装的方式</p>
<h2 id="获取源码"><a class="markdownIt-Anchor" href="#获取源码"></a> 获取源码</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://gerrit.fd.io/r/vpp</span><br></pre></td></tr></table></figure>
<h2 id="安装vpp"><a class="markdownIt-Anchor" href="#安装vpp"></a> 安装vpp</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> vpp</span><br></pre></td></tr></table></figure>
<ul>
<li>Step1</li>
</ul>
<p>可以先执行一下<code>make</code>查看可以执行哪些操作</p>
<ul>
<li>Step2 - make</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make build-release</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">by executing <span class="string">"make install-dep"</span></span><br><span class="line"></span><br><span class="line">Makefile:262: recipe <span class="keyword">for</span> target <span class="string">'/root/vpp/build-root/.deps.ok'</span> failed</span><br><span class="line">make: *** [/root/vpp/build-root/.deps.ok] Error 1</span><br></pre></td></tr></table></figure>
<p>如果遇到以上错误，则意味着缺少依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make install-dep</span><br></pre></td></tr></table></figure>
<p>依赖包安装完成后，再次执行<code>make build-release</code></p>
<ul>
<li>Step3 - Build deb包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make pkg-deb</span><br></pre></td></tr></table></figure>
<ul>
<li>Step4 - 安装VPP packages</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dpkg -i /vpp/build-root/*.deb</span><br></pre></td></tr></table></figure>
<p>中间可能会遇到<code>vpp-api-python</code>的错误，使用apt安装后重新安装packages</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt install vpp-api-python</span><br></pre></td></tr></table></figure>
<h1 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/vpp</span><br><span class="line">cp ./build-root/deb/debian/vpp/etc/vpp/startup.conf /etc/vpp/</span><br><span class="line">cp ./build-root/deb/debian/vpp/etc/sysctl.d/80-vpp.conf /etc/sysctl.d/</span><br></pre></td></tr></table></figure>
<p>修改<code>/etc/vpp/startup.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unix &#123;</span><br><span class="line">  nodaemon</span><br><span class="line">  <span class="built_in">log</span> /var/<span class="built_in">log</span>/vpp/vpp.log</span><br><span class="line">  full-coredump</span><br><span class="line">  <span class="comment">#cli-listen /run/vpp/cli.sock</span></span><br><span class="line">  cli-listen 0.0.0.0:5002</span><br><span class="line">  gid vpp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">api-trace &#123;</span><br><span class="line">  on</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">api-segment &#123;</span><br><span class="line">  gid vpp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">socksvr &#123;</span><br><span class="line">  default</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cpu &#123;</span><br><span class="line">    main-core 0</span><br><span class="line">    workers 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dpdk &#123;</span><br><span class="line">    dev 0000:0b:00.0 &#123;num-rx-queues 2&#125;</span><br><span class="line">    dev 0000:13:00.0 &#123;num-rx-queues 2&#125;</span><br><span class="line">    num-mbufs 128000</span><br><span class="line">    socket-mem 1024,1024</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">plugins &#123;</span><br><span class="line">    path /root/vpp/build-root/install-vpp-native/vpp/lib/vpp_plugins</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="启动vpp"><a class="markdownIt-Anchor" href="#启动vpp"></a> 启动VPP</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ service vpp start</span><br></pre></td></tr></table></figure>
<p>查看状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl status vpp.service</span><br><span class="line">● vpp.service - vector packet processing engine</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/vpp.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Thu 2018-11-15 16:00:09 CST; 4min 52s ago</span><br><span class="line">  Process: 19959 ExecStopPost=/bin/rm -f /dev/shm/db /dev/shm/global_vm /dev/shm/vpe-api (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 19985 ExecStartPre=/sbin/modprobe uio_pci_generic (code=exited, status=0/SUCCESS)</span><br><span class="line">  Process: 19981 ExecStartPre=/bin/rm -f /dev/shm/db /dev/shm/global_vm /dev/shm/vpe-api (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 19989 (vpp_main)</span><br><span class="line">    Tasks: 6</span><br><span class="line">   Memory: 55.9M</span><br><span class="line">      CPU: 9min 46.890s</span><br><span class="line">   CGroup: /system.slice/vpp.service</span><br><span class="line">           └─19989 /usr/bin/vpp -c /etc/vpp/startup.conf</span><br><span class="line"></span><br><span class="line">Nov 15 16:00:09 fdio /usr/bin/vpp[19989]: load_one_vat_plugin:67: Loaded plugin: nat_test_plugin.so</span><br><span class="line">Nov 15 16:00:09 fdio /usr/bin/vpp[19989]: load_one_vat_plugin:67: Loaded plugin: lb_test_plugin.so</span><br><span class="line">Nov 15 16:00:09 fdio /usr/bin/vpp[19989]: load_one_vat_plugin:67: Loaded plugin: gtpu_test_plugin.so</span><br><span class="line">Nov 15 16:00:09 fdio /usr/bin/vpp[19989]: load_one_vat_plugin:67: Loaded plugin: avf_test_plugin.so</span><br><span class="line">Nov 15 16:00:09 fdio /usr/bin/vpp[19989]: load_one_vat_plugin:67: Loaded plugin: acl_test_plugin.so</span><br><span class="line">Nov 15 16:00:09 fdio /usr/bin/vpp[19989]: load_one_vat_plugin:67: Loaded plugin: memif_test_plugin.so</span><br><span class="line">Nov 15 16:00:09 fdio /usr/bin/vpp[19989]: load_one_vat_plugin:67: Loaded plugin: stn_test_plugin.so</span><br><span class="line">Nov 15 16:00:09 fdio vpp[19989]: /usr/bin/vpp[19989]: dpdk: EAL init args: -c 7 -n 4 --huge-dir /run/vpp/hugepages --file-prefix vpp -w 0000:0b:00.0 -w 0000:13:00.0 --master-lcor</span><br><span class="line">Nov 15 16:00:09 fdio /usr/bin/vpp[19989]: dpdk: EAL init args: -c 7 -n 4 --huge-dir /run/vpp/hugepages --file-prefix vpp -w 0000:0b:00.0 -w 0000:13:00.0 --master-lcore 0 --socket</span><br><span class="line">Nov 15 16:00:10 fdio vnet[19989]: dpdk_ipsec_process:1015: not enough DPDK crypto resources, default to OpenSSL</span><br></pre></td></tr></table></figure>
<p>虽然有警告信息，但似乎不影响使用</p>
<h1 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h1>
<blockquote>
<p>根据<code>startup.conf</code>中的配置不同，选择不同的连接vpp方式</p>
</blockquote>
<h2 id="登陆vpp-cli"><a class="markdownIt-Anchor" href="#登陆vpp-cli"></a> 登陆VPP CLI</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ telnet 127.0.0.1 5002</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">    _______    _        _   _____  ___</span><br><span class="line"> __/ __/ _ \  (_)__    | | / / _ \/ _ \</span><br><span class="line"> _/ _// // / / / _ \   | |/ / ___/ ___/</span><br><span class="line"> /_/ /____(_)_/\___/   |___/_/  /_/</span><br><span class="line"></span><br><span class="line">vpp<span class="comment"># show interface</span></span><br><span class="line">              Name               Idx    State  MTU (L3/IP4/IP6/MPLS)     Counter          Count</span><br><span class="line">GigabitEthernet13/0/0             2     down         9000/0/0/0</span><br><span class="line">GigabitEthernetb/0/0              1     down         9000/0/0/0</span><br><span class="line">local0                            0     down          0/0/0/0</span><br><span class="line">vpp<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h2 id="开启端口"><a class="markdownIt-Anchor" href="#开启端口"></a> 开启端口</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vpp<span class="comment"># set interface state GigabitEthernet13/0/0 up</span></span><br><span class="line">vpp<span class="comment"># set interface state GigabitEthernetb/0/0 up</span></span><br><span class="line">vpp<span class="comment"># show interface</span></span><br><span class="line">              Name               Idx    State  MTU (L3/IP4/IP6/MPLS)     Counter          Count</span><br><span class="line">GigabitEthernet13/0/0             2      up          9000/0/0/0     rx packets                     1</span><br><span class="line">                                                                    rx bytes                      60</span><br><span class="line">                                                                    drops                          1</span><br><span class="line">                                                                    ip4                            1</span><br><span class="line">GigabitEthernetb/0/0              1      up          9000/0/0/0     rx packets                     4</span><br><span class="line">                                                                    rx bytes                     240</span><br><span class="line">                                                                    drops                          4</span><br><span class="line">                                                                    ip4                            1</span><br><span class="line">local0                            0     down          0/0/0/0</span><br><span class="line">vpp<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h2 id="配置为switch模式"><a class="markdownIt-Anchor" href="#配置为switch模式"></a> 配置为switch模式</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vpp<span class="comment"># set interface l2 bridge GigabitEthernet13/0/0 1</span></span><br><span class="line">vpp<span class="comment"># set interface l2 bridge GigabitEthernetb/0/0 1</span></span><br><span class="line">vpp<span class="comment"># show bridge-domain</span></span><br><span class="line">  BD-ID   Index   BSN  Age(min)  Learning  U-Forwrd   UU-Flood   Flooding  ARP-Term   BVI-Intf</span><br><span class="line">    1       1      0     off        on        on       flood        on       off        N/A</span><br></pre></td></tr></table></figure>
<h2 id="测试连通性"><a class="markdownIt-Anchor" href="#测试连通性"></a> 测试连通性</h2>
<ul>
<li>c2s</li>
</ul>
<ol>
<li>Host1: 192.168.0.2/24</li>
<li>Host2: 192.168.0.3/24</li>
</ol>
<p>通过host1 ping host2</p>
<ul>
<li>配置loopback口测试连通性</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vpp<span class="comment"># create loopback interface</span></span><br><span class="line">loop0</span><br><span class="line">vpp<span class="comment"># set interface ip address loop0 192.168.0.1/24</span></span><br><span class="line">vpp<span class="comment"># set interface state loop0 up</span></span><br><span class="line">vpp<span class="comment"># set interface l2 bridge loop0 1 bvi</span></span><br><span class="line">vpp<span class="comment"># show bridge-domain</span></span><br><span class="line">  BD-ID   Index   BSN  Age(min)  Learning  U-Forwrd   UU-Flood   Flooding  ARP-Term   BVI-Intf</span><br><span class="line">    1       1      0     off        on        on       flood        on       off       loop0</span><br><span class="line">vpp<span class="comment"># ping 192.168.0.2</span></span><br><span class="line">116 bytes from 192.168.0.2: icmp_seq=2 ttl=64 time=.8704 ms</span><br><span class="line">116 bytes from 192.168.0.2: icmp_seq=3 ttl=64 time=.2564 ms</span><br><span class="line">116 bytes from 192.168.0.2: icmp_seq=4 ttl=64 time=.2653 ms</span><br><span class="line">116 bytes from 192.168.0.2: icmp_seq=5 ttl=64 time=.3413 ms</span><br><span class="line"></span><br><span class="line">Statistics: 5 sent, 4 received, 20% packet loss</span><br></pre></td></tr></table></figure>
<p><code>set interface l2 bridge loop0 1 bvi</code>中的<strong>bvi</strong>意味着这个接口将用来接收、发送以及转发该bridge domain的报文</p>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>vpp</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04上安装DPDK</title>
    <url>/post/879abefb.html</url>
    <content><![CDATA[<h1 id="dpdk安装"><a class="markdownIt-Anchor" href="#dpdk安装"></a> DPDK安装</h1>
<blockquote>
<p>DPDK（Data Plane Development Kit）是一个用来进行包数据处理加速的软件库</p>
</blockquote>
<h2 id="从git获取源码"><a class="markdownIt-Anchor" href="#从git获取源码"></a> 从git获取源码</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://dpdk.org/dpdk</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="创建环境变量"><a class="markdownIt-Anchor" href="#创建环境变量"></a> 创建环境变量</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/dpdk</span><br><span class="line">$ <span class="built_in">export</span> RTE_SDK=`<span class="built_in">pwd</span>`</span><br><span class="line">$ <span class="built_in">export</span> DESTDIR=`<span class="built_in">pwd</span>`</span><br><span class="line">$ <span class="built_in">export</span> RTE_TARGET=x86_64-default-linuxapp-gcc</span><br></pre></td></tr></table></figure>
<p>因为这些环境变量总是会用到，可以将其放入一个文件，如<code>env.source</code>，使用<code>source env.source</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/dpdk</span><br><span class="line">$ more env.source</span><br><span class="line"><span class="built_in">export</span> RTE_SDK=`<span class="built_in">pwd</span>`</span><br><span class="line"><span class="built_in">export</span> DESTDIR=`<span class="built_in">pwd</span>`</span><br><span class="line"><span class="built_in">export</span> RTE_TARGET=x86_64-default-linuxapp-gcc</span><br><span class="line">$ <span class="built_in">source</span> env.source</span><br></pre></td></tr></table></figure>
<h2 id="开始安装"><a class="markdownIt-Anchor" href="#开始安装"></a> 开始安装</h2>
<blockquote>
<p>使用<code>dpdk-setup.sh</code>脚本进行安装</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./usertools/dpdk-setup.sh</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"> RTE_SDK exported as /root/dpdk</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">----------------------------------------------------------</span><br><span class="line"> Step 1: Select the DPDK environment to build</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">[1] arm64-armv8a-linuxapp-clang</span><br><span class="line">[2] arm64-armv8a-linuxapp-gcc</span><br><span class="line">[3] arm64-dpaa2-linuxapp-gcc</span><br><span class="line">[4] arm64-dpaa-linuxapp-gcc</span><br><span class="line">[5] arm64-stingray-linuxapp-gcc</span><br><span class="line">[6] arm64-thunderx-linuxapp-gcc</span><br><span class="line">[7] arm64-xgene1-linuxapp-gcc</span><br><span class="line">[8] arm-armv7a-linuxapp-gcc</span><br><span class="line">[9] i686-native-linuxapp-gcc</span><br><span class="line">[10] i686-native-linuxapp-icc</span><br><span class="line">[11] ppc_64-power8-linuxapp-gcc</span><br><span class="line">[12] x86_64-native-bsdapp-clang</span><br><span class="line">[13] x86_64-native-bsdapp-gcc</span><br><span class="line">[14] x86_64-native-linuxapp-clang</span><br><span class="line">[15] x86_64-native-linuxapp-gcc</span><br><span class="line">[16] x86_64-native-linuxapp-icc</span><br><span class="line">[17] x86_x32-native-linuxapp-gcc</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"> Step 2: Setup linuxapp environment</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">[18] Insert IGB UIO module</span><br><span class="line">[19] Insert VFIO module</span><br><span class="line">[20] Insert KNI module</span><br><span class="line">[21] Setup hugepage mappings <span class="keyword">for</span> non-NUMA systems</span><br><span class="line">[22] Setup hugepage mappings <span class="keyword">for</span> NUMA systems</span><br><span class="line">[23] Display current Ethernet/Crypto device settings</span><br><span class="line">[24] Bind Ethernet/Crypto device to IGB UIO module</span><br><span class="line">[25] Bind Ethernet/Crypto device to VFIO module</span><br><span class="line">[26] Setup VFIO permissions</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"> Step 3: Run <span class="built_in">test</span> application <span class="keyword">for</span> linuxapp environment</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">[27] Run <span class="built_in">test</span> application (<span class="variable">$RTE_TARGET</span>/app/<span class="built_in">test</span>)</span><br><span class="line">[28] Run testpmd application <span class="keyword">in</span> interactive mode (<span class="variable">$RTE_TARGET</span>/app/testpmd)</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"> Step 4: Other tools</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">[29] List hugepage info from /proc/meminfo</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"> Step 5: Uninstall and system cleanup</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">[30] Unbind devices from IGB UIO or VFIO driver</span><br><span class="line">[31] Remove IGB UIO module</span><br><span class="line">[32] Remove VFIO module</span><br><span class="line">[33] Remove KNI module</span><br><span class="line">[34] Remove hugepage mappings</span><br><span class="line"></span><br><span class="line">[35] Exit Script</span><br><span class="line"></span><br><span class="line">Option:</span><br></pre></td></tr></table></figure>
<ul>
<li>Step1</li>
</ul>
<p>根据自己环境选择相应的build，如我是64位的Intel架构的环境，则选择**[15]**</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">Installation <span class="keyword">in</span> /root/dpdk/ complete</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"> RTE_TARGET exported as x86_64-native-linuxapp-gcc</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Press enter to <span class="built_in">continue</span> ...</span><br></pre></td></tr></table></figure>
<ul>
<li>Step2</li>
</ul>
<ol>
<li>选择**[18]**来家在哪里<code>igb_uio</code>模块</li>
<li>选择**[21]**来创建Hugepage，这里我输入了128</li>
<li>选择**[24]**来绑定PCI网卡</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Option: 21</span><br><span class="line"></span><br><span class="line">Removing currently reserved hugepages</span><br><span class="line">Unmounting /mnt/huge and removing directory</span><br><span class="line"></span><br><span class="line">  Input the number of 2048kB hugepages</span><br><span class="line">  Example: to have 128MB of hugepages available <span class="keyword">in</span> a 2MB huge page system,</span><br><span class="line">  enter <span class="string">'64'</span> to reserve 64 * 2MB pages</span><br><span class="line">Number of pages: 128</span><br><span class="line">Reserving hugepages</span><br><span class="line">Creating /mnt/huge and mounting as hugetlbfs</span><br><span class="line"></span><br><span class="line">Press enter to <span class="built_in">continue</span> ...</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">Option: 24</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">Other Compress devices</span><br><span class="line">======================</span><br><span class="line">&lt;none&gt;</span><br><span class="line"></span><br><span class="line">Enter PCI address of device to <span class="built_in">bind</span> to IGB UIO driver: 0b:00.0</span><br><span class="line"></span><br><span class="line">Network devices using DPDK-compatible driver</span><br><span class="line">============================================</span><br><span class="line">0000:0b:00.0 <span class="string">'VMXNET3 Ethernet Controller 07b0'</span> drv=igb_uio unused=vmxnet3,uio_pci_generic</span><br><span class="line">0000:13:00.0 <span class="string">'VMXNET3 Ethernet Controller 07b0'</span> drv=igb_uio unused=vmxnet3,uio_pci_generic</span><br></pre></td></tr></table></figure>
<p>确认需要使用的PCI网卡为<strong>drv=igb_uio</strong>则说明绑定成功</p>
<ul>
<li>Step3 - 测试</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Option: 27</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Enter hex bitmask of cores to execute <span class="built_in">test</span> app on</span><br><span class="line">  Example: to execute app on cores 0 to 7, enter 0xff</span><br><span class="line">bitmask: 0x3</span><br><span class="line">Launching app</span><br><span class="line">sudo: x86_64-default-linuxapp-gcc/app/<span class="built_in">test</span>: <span class="built_in">command</span> not found</span><br><span class="line"></span><br><span class="line">Press enter to <span class="built_in">continue</span> ...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Option: 28</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Enter hex bitmask of cores to execute testpmd app on</span><br><span class="line">  Example: to execute app on cores 0 to 7, enter 0xff</span><br><span class="line">bitmask: 0x3</span><br><span class="line">Launching app</span><br><span class="line">sudo: x86_64-default-linuxapp-gcc/app/testpmd: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure>
<p>执行27和28都有可能报错，提示<code>command not found</code>，此时，可以先退出安装脚本</p>
<p>进入<code>/dpdk/x86_64-native-linuxapp-gcc/app</code>目录，会看到<code>testpmd</code>存在于目录下，运行测试，正常状况时，会如下显示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./testpmd</span><br><span class="line">EAL: Detected 8 lcore(s)</span><br><span class="line">EAL: Detected 1 NUMA nodes</span><br><span class="line">EAL: Multi-process socket /var/run/dpdk/rte/mp_socket</span><br><span class="line">EAL: Probing VFIO support...</span><br><span class="line">EAL: PCI device 0000:03:00.0 on NUMA socket -1</span><br><span class="line">EAL:   Invalid NUMA socket, default to 0</span><br><span class="line">EAL:   probe driver: 15ad:7b0 net_vmxnet3</span><br><span class="line">EAL: PCI device 0000:0b:00.0 on NUMA socket -1</span><br><span class="line">EAL:   Invalid NUMA socket, default to 0</span><br><span class="line">EAL:   probe driver: 15ad:7b0 net_vmxnet3</span><br><span class="line">EAL: PCI device 0000:13:00.0 on NUMA socket -1</span><br><span class="line">EAL:   Invalid NUMA socket, default to 0</span><br><span class="line">EAL:   probe driver: 15ad:7b0 net_vmxnet3</span><br><span class="line">testpmd: create a new mbuf pool &lt;mbuf_pool_socket_0&gt;: n=203456, size=2176, socket=0</span><br><span class="line">testpmd: preferred mempool ops selected: ring_mp_mc</span><br><span class="line">Configuring Port 0 (socket 0)</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">    TX queue: 0</span><br><span class="line">      TX desc=0 - TX free threshold=0</span><br><span class="line">      TX threshold registers: pthresh=0 hthresh=0  wthresh=0</span><br><span class="line">      TX offloads=0x0 - TX RS bit threshold=0</span><br><span class="line">Press enter to <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">Telling cores to stop...</span><br><span class="line">Waiting <span class="keyword">for</span> lcores to finish...</span><br><span class="line"></span><br><span class="line">  ---------------------- Forward statistics <span class="keyword">for</span> port 0  ----------------------</span><br><span class="line">  RX-packets: 57             RX-dropped: 0             RX-total: 57</span><br><span class="line">  TX-packets: 57             TX-dropped: 0             TX-total: 57</span><br><span class="line">  ----------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">  ---------------------- Forward statistics <span class="keyword">for</span> port 1  ----------------------</span><br><span class="line">  RX-packets: 57             RX-dropped: 0             RX-total: 57</span><br><span class="line">  TX-packets: 57             TX-dropped: 0             TX-total: 57</span><br><span class="line">  ----------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">  +++++++++++++++ Accumulated forward statistics <span class="keyword">for</span> all ports+++++++++++++++</span><br><span class="line">  RX-packets: 114            RX-dropped: 0             RX-total: 114</span><br><span class="line">  TX-packets: 114            TX-dropped: 0             TX-total: 114</span><br><span class="line">  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line"></span><br><span class="line">Done.</span><br><span class="line"></span><br><span class="line">Shutting down port 0...</span><br><span class="line">Stopping ports...</span><br><span class="line">Done</span><br><span class="line">Closing ports...</span><br><span class="line">Done</span><br><span class="line"></span><br><span class="line">Shutting down port 1...</span><br><span class="line">Stopping ports...</span><br><span class="line">Done</span><br><span class="line">Closing ports...</span><br><span class="line">Done</span><br><span class="line"></span><br><span class="line">Bye...</span><br></pre></td></tr></table></figure>
<h2 id="hugepage问题解决"><a class="markdownIt-Anchor" href="#hugepage问题解决"></a> HugePage问题解决</h2>
<ul>
<li>问题</li>
</ul>
<p>当运行测试时或者<code>testpmd</code>，可能会遇到如下问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./testpmd</span><br><span class="line">EAL: Detected 8 lcore(s)</span><br><span class="line">EAL: Detected 1 NUMA nodes</span><br><span class="line">EAL: Multi-process socket /var/run/dpdk/rte/mp_socket</span><br><span class="line">EAL: No free hugepages reported <span class="keyword">in</span> hugepages-2048kB</span><br><span class="line">EAL: No free hugepages reported <span class="keyword">in</span> hugepages-2048kB</span><br><span class="line">EAL: FATAL: Cannot get hugepage information.</span><br><span class="line">EAL: Cannot get hugepage information.</span><br><span class="line">PANIC <span class="keyword">in</span> main():</span><br><span class="line">Cannot init EAL</span><br><span class="line">5: [./testpmd(_start+0x29) [0x498829]]</span><br><span class="line">4: [/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0) [0x7f8a0fee0830]]</span><br><span class="line">3: [./testpmd(main+0xc48) [0x48f528]]</span><br><span class="line">2: [./testpmd(__rte_panic+0xbb) [0x47eb09]]</span><br><span class="line">1: [./testpmd(rte_dump_stack+0x2b) [0x5c8a1b]]</span><br><span class="line">Aborted (core dumped)</span><br></pre></td></tr></table></figure>
<ul>
<li>问题原因及解决</li>
</ul>
<p>这说明Hugepage不够用，可以先查看系统内存状况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /proc/meminfo | grep Huge</span><br><span class="line">AnonHugePages:         0 kB</span><br><span class="line">HugePages_Total:     665</span><br><span class="line">HugePages_Free:        0</span><br><span class="line">HugePages_Rsvd:        0</span><br><span class="line">HugePages_Surp:      537</span><br><span class="line">Hugepagesize:       2048 kB</span><br></pre></td></tr></table></figure>
<p>很显然，这里总共有665，太小了，不够用，需要修改系统相关内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> 2048 &gt; /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages</span><br><span class="line">$ cat /proc/meminfo | grep Huge</span><br><span class="line">AnonHugePages:         0 kB</span><br><span class="line">HugePages_Total:    2048</span><br><span class="line">HugePages_Free:     1080</span><br><span class="line">HugePages_Rsvd:        0</span><br><span class="line">HugePages_Surp:        0</span><br><span class="line">Hugepagesize:       2048 kB</span><br></pre></td></tr></table></figure>
<p><strong>注</strong> 如果系统重启或者重新编译，则该值会被重新刷新为默认值，需要重新设置</p>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>dpdk</tag>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>OVS学习笔记——常用命令练习</title>
    <url>/post/4c6bf73b.html</url>
    <content><![CDATA[<h1 id="控制管理"><a class="markdownIt-Anchor" href="#控制管理"></a> 控制管理</h1>
<ul>
<li>创建网桥</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-vsctl add-br testbr</span><br></pre></td></tr></table></figure>
<ul>
<li>查看网桥和端口</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-vsctl show</span><br><span class="line">b66c0897-27c9-441a-9486-42cfb65a4649</span><br><span class="line">    Bridge testbr</span><br><span class="line">        Port testbr</span><br><span class="line">            Interface testbr</span><br><span class="line">                <span class="built_in">type</span>: internal</span><br><span class="line">    ovs_version: <span class="string">"2.5.5"</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>网桥端口操作</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-vsctl add-port br0 eth1</span><br><span class="line">$ ovs-vsctl del-port br0 eth1</span><br></pre></td></tr></table></figure>
<ul>
<li>查看流表</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl dump-flows testbr</span><br><span class="line">NXST_FLOW reply (xid=0x4):</span><br><span class="line"> cookie=0x0, duration=364.789s, table=0, n_packets=0, n_bytes=0, idle_age=364, priority=0 actions=NORMAL</span><br></pre></td></tr></table></figure>
<ul>
<li>控制器设置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置控制器</span></span><br><span class="line">$ ovs-vsctl <span class="built_in">set</span>-controller testbr tcp:10.180.9.62:6633</span><br><span class="line">$ ovs-vsctl show</span><br><span class="line">b66c0897-27c9-441a-9486-42cfb65a4649</span><br><span class="line">    Bridge testbr</span><br><span class="line">        Controller <span class="string">"tcp:10.180.9.62:6633"</span></span><br><span class="line">        Port testbr</span><br><span class="line">            Interface testbr</span><br><span class="line">                <span class="built_in">type</span>: internal</span><br><span class="line">    ovs_version: <span class="string">"2.5.5"</span></span><br><span class="line"><span class="comment"># 查看控制器列表</span></span><br><span class="line">$ ovs-vsctl list controller</span><br><span class="line">_uuid               : 2fe35662-3f4f-446b-9296-6f1eae38ba5e</span><br><span class="line">connection_mode     : []</span><br><span class="line">controller_burst_limit: []</span><br><span class="line">controller_rate_limit: []</span><br><span class="line">enable_async_messages: []</span><br><span class="line">external_ids        : &#123;&#125;</span><br><span class="line">inactivity_probe    : []</span><br><span class="line">is_connected        : <span class="literal">true</span></span><br><span class="line">local_gateway       : []</span><br><span class="line">local_ip            : []</span><br><span class="line">local_netmask       : []</span><br><span class="line">max_backoff         : []</span><br><span class="line">other_config        : &#123;&#125;</span><br><span class="line">role                : other</span><br><span class="line">status              : &#123;sec_since_connect=<span class="string">"4"</span>, state=ACTIVE&#125;</span><br><span class="line">target              : <span class="string">"tcp:10.180.9.62:6633"</span></span><br><span class="line"><span class="comment"># 删除控制器</span></span><br><span class="line">$ ovs-vsctl del-controller testbr</span><br></pre></td></tr></table></figure>
<ul>
<li>接口相关</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl dump-ports s1</span><br><span class="line">OFPST_PORT reply (xid=0x2): 3 ports</span><br><span class="line">  port LOCAL: rx pkts=0, bytes=0, drop=94, errs=0, frame=0, over=0, crc=0</span><br><span class="line">           tx pkts=0, bytes=0, drop=0, errs=0, coll=0</span><br><span class="line">  port  1: rx pkts=124, bytes=8418, drop=0, errs=0, frame=0, over=0, crc=0</span><br><span class="line">           tx pkts=130, bytes=8898, drop=0, errs=0, coll=0</span><br><span class="line">  port  2: rx pkts=123, bytes=8340, drop=0, errs=0, frame=0, over=0, crc=0</span><br><span class="line">           tx pkts=130, bytes=8886, drop=0, errs=0, coll=0</span><br><span class="line">$ ovs-appctl dpif/show</span><br><span class="line">system@ovs-system: hit:318465 missed:735</span><br><span class="line">    s1:</span><br><span class="line">        s1 65534/3: (internal)</span><br><span class="line">        s1-eth1 1/2: (system)</span><br><span class="line">        s1-eth2 2/1: (system)</span><br></pre></td></tr></table></figure>
<h1 id="流表类"><a class="markdownIt-Anchor" href="#流表类"></a> 流表类</h1>
<h2 id="流表操作"><a class="markdownIt-Anchor" href="#流表操作"></a> 流表操作</h2>
<h3 id="查看流表"><a class="markdownIt-Anchor" href="#查看流表"></a> 查看流表</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl dump-flows s1</span><br><span class="line">NXST_FLOW reply (xid=0x4):</span><br><span class="line"> cookie=0x0, duration=356.689s, table=0, n_packets=708, n_bytes=42480, idle_age=0, priority=65535,dl_dst=01:80:c2:00:00:0e,dl_type=0x88cc actions=CONTROLLER:65535</span><br><span class="line"> cookie=0x0, duration=356.699s, table=0, n_packets=94, n_bytes=7488, idle_age=346, priority=0 actions=CONTROLLER:65535</span><br></pre></td></tr></table></figure>
<h3 id="添加普通流表"><a class="markdownIt-Anchor" href="#添加普通流表"></a> 添加普通流表</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl add-flow s1 in_port=1,actions=drop</span><br><span class="line">$ ovs-ofctl dump-flows s1</span><br><span class="line">NXST_FLOW reply (xid=0x4):</span><br><span class="line"> cookie=0x0, duration=441.879s, table=0, n_packets=878, n_bytes=52680, idle_age=0, priority=65535,dl_dst=01:80:c2:00:00:0e,dl_type=0x88cc actions=CONTROLLER:65535</span><br><span class="line"> cookie=0x0, duration=2.861s, table=0, n_packets=0, n_bytes=0, idle_age=2, in_port=1 actions=drop</span><br><span class="line"> cookie=0x0, duration=441.889s, table=0, n_packets=94, n_bytes=7488, idle_age=432, priority=0 actions=CONTROLLER:65535</span><br></pre></td></tr></table></figure>
<h3 id="按照匹配删除流表"><a class="markdownIt-Anchor" href="#按照匹配删除流表"></a> 按照匹配删除流表</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl del-flows s1 <span class="string">"in_port=1"</span></span><br><span class="line">mininet&gt; sh ovs-ofctl dump-flows s1</span><br><span class="line">NXST_FLOW reply (xid=0x4):</span><br><span class="line"> cookie=0x0, duration=521.249s, table=0, n_packets=1036, n_bytes=62160, idle_age=0, priority=65535,dl_dst=01:80:c2:00:00:0e,dl_type=0x88cc actions=CONTROLLER:65535</span><br><span class="line"> cookie=0x0, duration=521.259s, table=0, n_packets=94, n_bytes=7488, idle_age=511, priority=0 actions=CONTROLLER:65535</span><br></pre></td></tr></table></figure>
<h2 id="常用匹配项"><a class="markdownIt-Anchor" href="#常用匹配项"></a> 常用匹配项</h2>
<h3 id="vlan-tag"><a class="markdownIt-Anchor" href="#vlan-tag"></a> VLAN Tag</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vs-ofctl add-flow s1 priority=401,in_port=1,dl_vlan=777,actions=output:2</span><br><span class="line">$ ovs-ofctl dump-flows s1</span><br><span class="line">NXST_FLOW reply (xid=0x4):</span><br><span class="line"> cookie=0x0, duration=663.043s, table=0, n_packets=1318, n_bytes=79080, idle_age=0, priority=65535,dl_dst=01:80:c2:00:00:0e,dl_type=0x88cc actions=CONTROLLER:65535</span><br><span class="line"> cookie=0x0, duration=3.022s, table=0, n_packets=0, n_bytes=0, idle_age=3, priority=401,in_port=1,dl_vlan=777 actions=output:2</span><br><span class="line"> cookie=0x0, duration=663.053s, table=0, n_packets=94, n_bytes=7488, idle_age=653, priority=0 actions=CONTROLLER:65535</span><br></pre></td></tr></table></figure>
<h3 id="mac"><a class="markdownIt-Anchor" href="#mac"></a> MAC</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl add-flow s3 in_port=1,dl_src=0a:f6:95:7e:c6:4a/0a:f6:95:7e:c6:4a,action=output:3</span><br><span class="line">$ ovs-ofctl add-flow s3 in_port=1,dl_dst=be:7c:6a:e9:e6:b1/be:7c:6a:e9:e6:b1,action=output:2</span><br><span class="line">$ sh ovs-ofctl dump-flows s3</span><br><span class="line">NXST_FLOW reply (xid=0x4):</span><br><span class="line"> cookie=0x0, duration=69.067s, table=0, n_packets=0, n_bytes=0, idle_age=69, in_port=1,dl_src=0a:f6:95:7e:c6:4a/0a:f6:95:7e:c6:4a actions=output:3</span><br><span class="line"> cookie=0x0, duration=14.496s, table=0, n_packets=0, n_bytes=0, idle_age=14, in_port=1,dl_dst=be:7c:6a:e9:e6:b1/be:7c:6a:e9:e6:b1 actions=output:2</span><br></pre></td></tr></table></figure>
<h3 id="ip"><a class="markdownIt-Anchor" href="#ip"></a> IP</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl add-flow s3 ip,in_port=1,nw_src=192.168.0.0/16,action=drop</span><br><span class="line">$ ovs-ofctl add-flow s3 ip,in_port=1,nw_dst=192.168.0.0/16,action=drop</span><br><span class="line">$ ovs-ofctl dump-flows s3</span><br><span class="line">NXST_FLOW reply (xid=0x4):</span><br><span class="line"> cookie=0x0, duration=119.033s, table=0, n_packets=119, n_bytes=7140, idle_age=0, priority=65535,dl_dst=01:80:c2:00:00:0e,dl_type=0x88cc actions=CONTROLLER:65535</span><br><span class="line"> cookie=0x0, duration=28.864s, table=0, n_packets=0, n_bytes=0, idle_age=28, ip,in_port=1,nw_src=192.168.0.0/16 actions=drop</span><br><span class="line"> cookie=0x0, duration=10.036s, table=0, n_packets=0, n_bytes=0, idle_age=10, ip,in_port=1,nw_dst=192.168.0.0/16 actions=drop</span><br><span class="line"> cookie=0x0, duration=119.057s, table=0, n_packets=90, n_bytes=7164, idle_age=109, priority=0 actions=CONTROLLER:65535</span><br></pre></td></tr></table></figure>
<h3 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h3>
<table>
<thead>
<tr>
<th>匹配项</th>
<th>关键字</th>
<th>条件</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>以太网类型</td>
<td>dl_type</td>
<td></td>
<td><code>in_port=1,dl_type=0x0806,actions=output:2</code></td>
</tr>
<tr>
<td>协议号</td>
<td>nw_proto</td>
<td>指定dl_type=0x0800或者ip</td>
<td><code>ip,in_port=1,nw_proto=1,actions=output:2</code></td>
</tr>
<tr>
<td>TCP flags</td>
<td>tcp_flags</td>
<td>指定TCP</td>
<td><code>tcp,tcp_flags=ack,actions=output:2</code></td>
</tr>
</tbody>
</table>
<h3 id="一些速记符"><a class="markdownIt-Anchor" href="#一些速记符"></a> 一些速记符</h3>
<table>
<thead>
<tr>
<th>速记符</th>
<th>匹配项</th>
</tr>
</thead>
<tbody>
<tr>
<td>ip</td>
<td>dl_type=0x800</td>
</tr>
<tr>
<td>ipv6</td>
<td>dl_type=0x86dd</td>
</tr>
<tr>
<td>icmp</td>
<td>dl_type=0x0800,nw_proto=1</td>
</tr>
<tr>
<td>icmp6</td>
<td>dl_type=0x86dd,nw_proto=58</td>
</tr>
<tr>
<td>tcp</td>
<td>dl_type=0x0800,nw_proto=6</td>
</tr>
<tr>
<td>tcp6</td>
<td>dl_type=0x86dd,nw_proto=6</td>
</tr>
<tr>
<td>udp</td>
<td>dl_type=0x0800,nw_proto=17</td>
</tr>
<tr>
<td>udp6</td>
<td>dl_type=0x86dd,nw_proto=17</td>
</tr>
<tr>
<td>arp</td>
<td>dl_type=0x0806</td>
</tr>
</tbody>
</table>
<h2 id="指令动作actions"><a class="markdownIt-Anchor" href="#指令动作actions"></a> 指令动作（actions）</h2>
<h3 id="基础动作"><a class="markdownIt-Anchor" href="#基础动作"></a> 基础动作</h3>
<table>
<thead>
<tr>
<th>动作</th>
<th>说明</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>normal</td>
<td>L2/L3处理</td>
<td><code>actions=normal</code></td>
</tr>
<tr>
<td>output</td>
<td>出接口</td>
<td><code>actions=output:2</code></td>
</tr>
<tr>
<td>group</td>
<td>指定的group</td>
<td><code>actions=group:1</code></td>
</tr>
<tr>
<td>flood</td>
<td>从所有物理接口转发出去，除了入接口和已关闭flooding的接口</td>
<td><code>actions=flood</code></td>
</tr>
<tr>
<td>all</td>
<td>从所有物理接口转发出去，除了入接口</td>
<td><code>actions=all</code></td>
</tr>
<tr>
<td>local</td>
<td>转发给本地网桥</td>
<td><code>actions=local</code></td>
</tr>
<tr>
<td>in_port</td>
<td>从入接口转发出去</td>
<td><code>actions=in_port</code></td>
</tr>
<tr>
<td>controller</td>
<td>以packet-in消息上送给控制器</td>
<td><code>actions=controller</code></td>
</tr>
<tr>
<td>drop</td>
<td>丢弃数据包</td>
<td><code>actions=drop</code></td>
</tr>
</tbody>
</table>
<h3 id="修改vlan-id"><a class="markdownIt-Anchor" href="#修改vlan-id"></a> 修改VLAN ID</h3>
<ul>
<li>
<p>关键字： <code>mod_vlan_vid</code></p>
</li>
<li>
<p>举例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl add-flow s1 in_port=1,actions=mod_vlan_vid:1034,output:2</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="剥除vlan"><a class="markdownIt-Anchor" href="#剥除vlan"></a> 剥除VLAN</h3>
<ul>
<li>
<p>关键字： <code>strip_vlan</code></p>
</li>
<li>
<p>举例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl add-flow s1 in_port=1,actions=strip_vlan,output:2</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="弹出最外层vlan"><a class="markdownIt-Anchor" href="#弹出最外层vlan"></a> 弹出最外层VLAN</h3>
<ul>
<li>
<p>关键字： <code>pop_vlan</code></p>
</li>
<li>
<p>举例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl add-flow br0 in_port=1,dl_type=0x8100,dl_vlan=777,actions=pop_vlan,output:2</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="修改源目的mac"><a class="markdownIt-Anchor" href="#修改源目的mac"></a> 修改源/目的MAC</h3>
<ul>
<li>
<p>关键字：<code>mod_dl_src</code> / <code>mod_dl_dst</code></p>
</li>
<li>
<p>举例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl add-flow s1 in_port=1,actions=mod_dl_src:01:80:c2:00:00:0e,output:2</span><br><span class="line">$ ovs-ofctl add-flow s1 in_port=1,actions=mod_dl_dst:01:80:c2:00:00:0e,output:2</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="修改源目的ip"><a class="markdownIt-Anchor" href="#修改源目的ip"></a> 修改源/目的IP</h3>
<ul>
<li>
<p>关键字： <code>mod_nw_src</code>/<code>mod_nw_dst</code></p>
</li>
<li>
<p>举例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl add-flow s1 in_port=1,actions=mod_nw_src:192.168.0.10,output:2</span><br><span class="line">$ ovs-ofctl add-flow s1 in_port=1,actions=mod_nw_dst:192.168.0.10,output:2</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="修改tcpudp端口"><a class="markdownIt-Anchor" href="#修改tcpudp端口"></a> 修改TCP/UDP端口</h3>
<ul>
<li>
<p>关键字：<code>mod_tp_src</code>/<code>mod_tp_dst</code></p>
</li>
<li>
<p>举例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl add-flow s1 tcp,in_port=1,actions=mod_tp_src:1039,output:2</span><br><span class="line">$ ovs-ofctl add-flow s1 tcp,in_port=1,actions=mod_tp_dst:21,output:2</span><br><span class="line">$ ovs-ofctl add-flow s1 udp,in_port=1,actions=mod_tp_src:1039,output:2</span><br><span class="line">$ ovs-ofctl add-flow s1 udp,in_port=1,actions=mod_tp_dst:53,output:2</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="vxlan"><a class="markdownIt-Anchor" href="#vxlan"></a> VxLan</h3>
<ul>
<li>
<p>创建VxLAN接口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-vsctl add-port s3 vxlan1 -- <span class="built_in">set</span> Interface vxlan1 <span class="built_in">type</span>=vxlan options:remote_ip=1.1.1.1 ofport_request=2000</span><br><span class="line">$ ovs-vsctl show</span><br><span class="line">    Bridge <span class="string">"s3"</span></span><br><span class="line">        Controller <span class="string">"tcp:10.180.9.62:6633"</span></span><br><span class="line">        Controller <span class="string">"ptcp:6636"</span></span><br><span class="line">        fail_mode: secure</span><br><span class="line">        Port <span class="string">"s3-eth2"</span></span><br><span class="line">            Interface <span class="string">"s3-eth2"</span></span><br><span class="line">        Port <span class="string">"vxlan1"</span></span><br><span class="line">            Interface <span class="string">"vxlan1"</span></span><br><span class="line">                <span class="built_in">type</span>: vxlan</span><br><span class="line">                options: &#123;remote_ip=<span class="string">"1.1.1.1"</span>&#125;</span><br><span class="line">        Port <span class="string">"s3-eth3"</span></span><br><span class="line">            Interface <span class="string">"s3-eth3"</span></span><br><span class="line">        Port <span class="string">"s3-eth1"</span></span><br><span class="line">            Interface <span class="string">"s3-eth1"</span></span><br><span class="line">        Port <span class="string">"s3"</span></span><br><span class="line">            Interface <span class="string">"s3"</span></span><br><span class="line">                <span class="built_in">type</span>: internal</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>VxLAN流表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl add-flow s3 ip,in_port=1,nw_dst=192.168.0.0/16,actions=output:2000</span><br><span class="line">$ ovs-ofctl add-flow s3 in_port=2000,actions=output:1</span><br><span class="line">$ ovs-ofctl dump-flows s3</span><br><span class="line">NXST_FLOW reply (xid=0x4):</span><br><span class="line"> cookie=0x0, duration=35.227s, table=0, n_packets=0, n_bytes=0, idle_age=35, ip,in_port=1,nw_dst=192.168.0.0/16 actions=output:2000</span><br><span class="line"> cookie=0x0, duration=2.469s, table=0, n_packets=0, n_bytes=0, idle_age=2, in_port=2000 actions=output:1</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h1>
<h2 id="拓扑"><a class="markdownIt-Anchor" href="#拓扑"></a> 拓扑</h2>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">                <span class="string">+------------+</span></span><br><span class="line">                <span class="string">|</span>     <span class="string">s2</span>     <span class="string">|</span></span><br><span class="line">                <span class="string">+---+----+---+</span></span><br><span class="line">                    <span class="string">|</span>    <span class="string">|</span></span><br><span class="line">         <span class="string">+----------+</span>    <span class="string">+----------+</span></span><br><span class="line">         <span class="string">|</span>                          <span class="string">|</span></span><br><span class="line"><span class="string">+--------+--------+</span>        <span class="string">+--------+--------+</span></span><br><span class="line"><span class="string">|</span>       <span class="string">s3</span>        <span class="string">|</span>        <span class="string">|</span>        <span class="string">s4</span>       <span class="string">|</span></span><br><span class="line"><span class="string">+---+---------+---+</span>        <span class="string">+---+---------+---+</span></span><br><span class="line">    <span class="string">|</span>         <span class="string">|</span>                <span class="string">|</span>         <span class="string">|</span></span><br><span class="line"><span class="string">+---+--+</span>   <span class="string">+--+---+</span>        <span class="string">+---+--+</span>   <span class="string">+--+---+</span></span><br><span class="line"><span class="string">|</span>  <span class="string">h1</span>  <span class="string">|</span>   <span class="string">|</span>  <span class="string">h2</span>  <span class="string">|</span>        <span class="string">|</span>  <span class="string">h3</span>  <span class="string">|</span>   <span class="string">|</span>  <span class="string">h4</span>  <span class="string">|</span></span><br><span class="line"><span class="string">+------+</span>   <span class="string">+------+</span>        <span class="string">+------+</span>   <span class="string">+------+</span></span><br></pre></td></tr></table></figure>
<h2 id="实验要求"><a class="markdownIt-Anchor" href="#实验要求"></a> 实验要求</h2>
<ol>
<li>h1可以与h3通信，但不可以与h2和h4通信</li>
<li>h2可以与h4通信，但不可以与h1和h3通信</li>
</ol>
<h2 id="具体操作"><a class="markdownIt-Anchor" href="#具体操作"></a> 具体操作</h2>
<ol>
<li>由h1送出的报文，在s3上打上vlan tag 1000</li>
<li>随后s3将报文送往s2</li>
<li>s2收到s3的vlan1000的报文，直接转送s4</li>
<li>s4收到vlan1000的报文后，剥离vlan，送到h3</li>
<li>h3收到请求报文后，返回响应报文，送往s4</li>
<li>s4收到h3的报文后，打上vlan tag 1000</li>
<li>随后s4将报文送往s2</li>
<li>s2收到s4的vlan1000的报文，直接送往s3</li>
<li>s3收到s2的vlan1000报文后，剥离vlan，送往h1</li>
</ol>
<h2 id="h1-h3流表"><a class="markdownIt-Anchor" href="#h1-h3流表"></a> h1-h3流表</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl dump-flows s2</span><br><span class="line">NXST_FLOW reply (xid=0x4):</span><br><span class="line"> cookie=0x0, duration=1664.027s, table=0, n_packets=79, n_bytes=4026, idle_age=803, in_port=1,dl_vlan=1000 actions=output:2</span><br><span class="line"> cookie=0x0, duration=1642.112s, table=0, n_packets=10, n_bytes=852, idle_age=803, in_port=2,dl_vlan=1000 actions=output:1</span><br><span class="line"></span><br><span class="line">$ ovs-ofctl dump-flows s3</span><br><span class="line">NXST_FLOW reply (xid=0x4):</span><br><span class="line"> cookie=0x0, duration=2826.459s, table=0, n_packets=330, n_bytes=14700, idle_age=807, in_port=1 actions=mod_vlan_vid:1000,output:3</span><br><span class="line"> cookie=0x0, duration=1895.062s, table=0, n_packets=10, n_bytes=852, idle_age=807, in_port=3,dl_vlan=1000 actions=strip_vlan,output:1</span><br><span class="line"></span><br><span class="line">$ ovs-ofctl dump-flows s4</span><br><span class="line">NXST_FLOW reply (xid=0x4):</span><br><span class="line"> cookie=0x0, duration=2776.175s, table=0, n_packets=229, n_bytes=10010, idle_age=810, in_port=1 actions=mod_vlan_vid:1000,output:3</span><br><span class="line"> cookie=0x0, duration=1507.500s, table=0, n_packets=10, n_bytes=852, idle_age=810, in_port=3,dl_vlan=1000 actions=strip_vlan,output:1</span><br></pre></td></tr></table></figure>
<h2 id="h2-h4流表"><a class="markdownIt-Anchor" href="#h2-h4流表"></a> h2-h4流表</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ovs-ofctl dump-flows s2</span><br><span class="line">NXST_FLOW reply (xid=0x4):</span><br><span class="line"> cookie=0x0, duration=827.167s, table=0, n_packets=60, n_bytes=2816, idle_age=698, in_port=2,dl_vlan=2000 actions=output:1</span><br><span class="line"> cookie=0x0, duration=812.342s, table=0, n_packets=60, n_bytes=2816, idle_age=698, in_port=1,dl_vlan=2000 actions=output:2</span><br><span class="line"> </span><br><span class="line">$ ovs-ofctl dump-flows s3</span><br><span class="line">NXST_FLOW reply (xid=0x4):</span><br><span class="line"> cookie=0x0, duration=1347.703s, table=0, n_packets=60, n_bytes=2576, idle_age=702, in_port=2 actions=mod_vlan_vid:2000,output:3</span><br><span class="line"> cookie=0x0, duration=710.639s, table=0, n_packets=3, n_bytes=194, idle_age=702, in_port=3,dl_vlan=2000 actions=strip_vlan,output:2</span><br><span class="line"> </span><br><span class="line">$ ovs-ofctl dump-flows s4</span><br><span class="line">NXST_FLOW reply (xid=0x4):</span><br><span class="line"> cookie=0x0, duration=1133.570s, table=0, n_packets=60, n_bytes=2576, idle_age=705, in_port=2 actions=mod_vlan_vid:2000,output:3</span><br><span class="line"> cookie=0x0, duration=1088.590s, table=0, n_packets=60, n_bytes=2816, idle_age=705, in_port=3,dl_vlan=2000 actions=strip_vlan,output:2</span><br></pre></td></tr></table></figure>
<h2 id="命令列表"><a class="markdownIt-Anchor" href="#命令列表"></a> 命令列表</h2>
<ul>
<li>h1-h3</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ovs-ofctl add-flow s2 in_port=1,dl_vlan=1000,actions=output:2</span><br><span class="line">ovs-ofctl add-flow s2 in_port=2,dl_vlan=1000,actions=output:1</span><br><span class="line">ovs-ofctl add-flow s3 in_port=1,actions=mod_vlan_vid:1000,output:3</span><br><span class="line">ovs-ofctl add-flow s3 in_port=3,dl_vlan=1000,actions=strip_vlan,output:1</span><br><span class="line">ovs-ofctl add-flow s4 in_port=1,actions=mod_vlan_vid:1000,output:3</span><br><span class="line">ovs-ofctl add-flow s4 in_port=3,dl_vlan=1000,actions=strip_vlan,output:1</span><br></pre></td></tr></table></figure>
<ul>
<li>h2-h4</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ovs-ofctl add-flow s2 in_port=2,dl_vlan=2000,actions=output:1</span><br><span class="line">ovs-ofctl add-flow s2 in_port=1,dl_vlan=2000,actions=output:2</span><br><span class="line">ovs-ofctl add-flow s3 in_port=2,actions=mod_vlan_vid:2000,output:3</span><br><span class="line">ovs-ofctl add-flow s3 in_port=3,dl_vlan=2000,actions=strip_vlan,output:2</span><br><span class="line">ovs-ofctl add-flow s4 in_port=2,actions=mod_vlan_vid:2000,output:3</span><br><span class="line">ovs-ofctl add-flow s4 in_port=3,dl_vlan=2000,actions=strip_vlan,output:2</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>ovs</tag>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>Mininet自定义topo</title>
    <url>/post/dd7d5c81.html</url>
    <content><![CDATA[<h2 id="mininet自带topo"><a class="markdownIt-Anchor" href="#mininet自带topo"></a> mininet自带topo</h2>
<p>通过<code>mn -h</code>可以看到Mininet自带的几种topo类型，分别有Linear, minimal, reversed, single, torus和tree类型，但有时候这些类型无法满足需求，需要自定义topo</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mn --<span class="built_in">help</span></span><br><span class="line">Usage: mn [options]</span><br><span class="line">(<span class="built_in">type</span> mn -h <span class="keyword">for</span> details)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  --topo=TOPO           linear|minimal|reversed|single|torus|tree[,param=value</span><br><span class="line">                        ...] linear=LinearTopo torus=TorusTopo tree=TreeTopo</span><br><span class="line">                        single=SingleSwitchTopo</span><br><span class="line">                        reversed=SingleSwitchReversedTopo minimal=MinimalTopo</span><br></pre></td></tr></table></figure>
<h2 id="获取示例"><a class="markdownIt-Anchor" href="#获取示例"></a> 获取示例</h2>
<p>Mininet提供了topo-2sw-2host的示例，可以通过<a href="https://github.com/mininet/mininet">Mininet github</a>的custom目录下获取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""Custom topology example</span></span><br><span class="line"><span class="string">Two directly connected switches plus a host for each switch:</span></span><br><span class="line"><span class="string">   host --- switch --- switch --- host</span></span><br><span class="line"><span class="string">Adding the 'topos' dict with a key/value pair to generate our newly defined</span></span><br><span class="line"><span class="string">topology enables one to pass in '--topo=mytopo' from the command line.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mininet.topo <span class="keyword">import</span> Topo</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTopo</span><span class="params">( Topo )</span>:</span></span><br><span class="line">    <span class="string">"Simple topology example."</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">( self )</span>:</span></span><br><span class="line">        <span class="string">"Create custom topo."</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Initialize topology</span></span><br><span class="line">        Topo.__init__( self )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add hosts and switches</span></span><br><span class="line">        leftHost = self.addHost( <span class="string">'h1'</span> )</span><br><span class="line">        rightHost = self.addHost( <span class="string">'h2'</span> )</span><br><span class="line">        leftSwitch = self.addSwitch( <span class="string">'s3'</span> )</span><br><span class="line">        rightSwitch = self.addSwitch( <span class="string">'s4'</span> )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add links</span></span><br><span class="line">        self.addLink( leftHost, leftSwitch )</span><br><span class="line">        self.addLink( leftSwitch, rightSwitch )</span><br><span class="line">        self.addLink( rightSwitch, rightHost )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">topos = &#123; <span class="string">'mytopo'</span>: ( <span class="keyword">lambda</span>: MyTopo() ) &#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义topo"><a class="markdownIt-Anchor" href="#自定义topo"></a> 自定义topo</h2>
<p>如要创建如下topo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                         +------------+</span><br><span class="line">              +----------+     s3     +---------+</span><br><span class="line">              |          +------------+         |</span><br><span class="line">              |                                 |</span><br><span class="line">         +----+----+                       +----+----+</span><br><span class="line">   +-----+    s1   +-----+           +-----+   s2    +-----+</span><br><span class="line">   |     +---------+     |           |     +---------+     |</span><br><span class="line">   |                     |           |                     |</span><br><span class="line">+--+--+               +--+--+     +--+--+               +--+--+</span><br><span class="line">| h1  |               | h2  |     | h3  |               | h4  |</span><br><span class="line">+-----+               +-----+     +-----+               +-----+</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mininet.topo <span class="keyword">import</span> Topo</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTopo</span><span class="params">( Topo )</span>:</span></span><br><span class="line">    <span class="string">"Simple topology example."</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">( self )</span>:</span></span><br><span class="line">        <span class="string">"Create custom topo."</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Initialize topology</span></span><br><span class="line">        Topo.__init__( self )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add hosts and switches</span></span><br><span class="line">        h1 = self.addHost( <span class="string">'h1'</span> )</span><br><span class="line">        h2 = self.addHost( <span class="string">'h2'</span> )</span><br><span class="line">        h3 = self.addHost( <span class="string">'h3'</span> )</span><br><span class="line">        h4 = self.addHost( <span class="string">'h4'</span> )</span><br><span class="line">        s1 = self.addSwitch( <span class="string">'s1'</span> )</span><br><span class="line">        s2 = self.addSwitch( <span class="string">'s2'</span> )</span><br><span class="line">        s3 = self.addSwitch( <span class="string">'s3'</span> )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add links</span></span><br><span class="line">        self.addLink( h1, s1 )</span><br><span class="line">        self.addLink( s1, h2 )</span><br><span class="line">        self.addLink( s1, s3 )</span><br><span class="line">        self.addLink( s3, s2 )</span><br><span class="line">        self.addLink( h3, s2 )</span><br><span class="line">        self.addLink( s2, h4 )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">topos = &#123; <span class="string">'mytopo'</span>: ( <span class="keyword">lambda</span>: MyTopo() ) &#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用自定义topo"><a class="markdownIt-Anchor" href="#使用自定义topo"></a> 使用自定义topo</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mininet:~<span class="comment"># mn --custom ./testtopo.py --topo mytopo --controller=remote,ip=127.0.0.1,port=6633</span></span><br><span class="line">*** Creating network</span><br><span class="line">*** Adding controller</span><br><span class="line">*** Adding hosts:</span><br><span class="line">h1 h2 h3 h4</span><br><span class="line">*** Adding switches:</span><br><span class="line">s1 s2 s3</span><br><span class="line">*** Adding links:</span><br><span class="line">(h1, s1) (h3, s2) (s1, h2) (s1, s3) (s2, h4) (s3, s2)</span><br><span class="line">*** Configuring hosts</span><br><span class="line">h1 h2 h3 h4</span><br><span class="line">*** Starting controller</span><br><span class="line">c0</span><br><span class="line">*** Starting 3 switches</span><br><span class="line">s1 s2 s3 ...</span><br><span class="line">*** Starting CLI:</span><br><span class="line">mininet&gt;</span><br></pre></td></tr></table></figure>
<p>查看连接状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mininet&gt; links</span><br><span class="line">h1-eth0&lt;-&gt;s1-eth1 (OK OK)</span><br><span class="line">h3-eth0&lt;-&gt;s2-eth2 (OK OK)</span><br><span class="line">s1-eth2&lt;-&gt;h2-eth0 (OK OK)</span><br><span class="line">s1-eth3&lt;-&gt;s3-eth1 (OK OK)</span><br><span class="line">s2-eth3&lt;-&gt;h4-eth0 (OK OK)</span><br><span class="line">s3-eth2&lt;-&gt;s2-eth1 (OK OK)</span><br><span class="line">mininet&gt; pingall</span><br><span class="line">*** Ping: testing ping reachability</span><br><span class="line">h1 -&gt; h2 h3 h4</span><br><span class="line">h2 -&gt; h1 h3 h4</span><br><span class="line">h3 -&gt; h1 h2 h4</span><br><span class="line">h4 -&gt; h1 h2 h3</span><br><span class="line">*** Results: 0% dropped (12/12 received)</span><br><span class="line">mininet&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>sdn</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>sdn</tag>
      </tags>
  </entry>
  <entry>
    <title>Opendaylight Oxygen环境准备</title>
    <url>/post/5594d322.html</url>
    <content><![CDATA[<h2 id="安装opendaylight"><a class="markdownIt-Anchor" href="#安装opendaylight"></a> 安装Opendaylight</h2>
<h3 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h3>
<ol>
<li>
<p>基础包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt-get install unzip lrzsz</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装jdk</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>设置<code>JAVA_HOME</code></p>
<p>在<code>/etc/environment</code>的末尾添加<code>JAVA_HOME=&quot;/usr/lib/jvm/java-8-openjdk-amd64&quot;</code>，需要退出当前终端重新登陆</p>
</li>
</ol>
<a id="more"></a>
<h3 id="获取安装包"><a class="markdownIt-Anchor" href="#获取安装包"></a> 获取安装包</h3>
<blockquote>
<p><a href="https://docs.opendaylight.org/en/latest/downloads.html">https://docs.opendaylight.org/en/latest/downloads.html</a></p>
</blockquote>
<ul>
<li>运行karaf</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ unzip karaf-0.8.3.zip</span><br><span class="line">   ...</span><br><span class="line">$ <span class="built_in">cd</span> karaf-0.8.3/</span><br><span class="line">$ ./bin/karaf</span><br><span class="line">Apache Karaf starting up. Press Enter to open the shell now...</span><br><span class="line">100% [========================================================================]</span><br><span class="line">Karaf started <span class="keyword">in</span> 1s. Bundle stats: 54 active, 55 total</span><br><span class="line"></span><br><span class="line">    ________                       ________                .__  .__       .__     __</span><br><span class="line">    \_____  \ ______   ____   ____ \______ \ _____  ___.__.|  | |__| ____ |  |___/  |_</span><br><span class="line">     /   |   \\____ \_/ __ \ /    \ |    |  \\__  \&lt;   |  ||  | |  |/ ___\|  |  \   __\</span><br><span class="line">    /    |    \  |_&gt; &gt;  ___/|   |  \|    `   \/ __ \\___  ||  |_|  / /_/  &gt;   Y  \  |</span><br><span class="line">    \_______  /   __/ \___  &gt;___|  /_______  (____  / ____||____/__\___  /|___|  /__|</span><br><span class="line">            \/|__|        \/     \/        \/     \/\/            /_____/      \/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Hit <span class="string">'&lt;tab&gt;'</span> <span class="keyword">for</span> a list of available commands</span><br><span class="line">and <span class="string">'[cmd] --help'</span> <span class="keyword">for</span> <span class="built_in">help</span> on a specific <span class="built_in">command</span>.</span><br><span class="line">Hit <span class="string">'&lt;ctrl-d&gt;'</span> or <span class="built_in">type</span> <span class="string">'system:shutdown'</span> or <span class="string">'logout'</span> to shutdown OpenDaylight.</span><br><span class="line"></span><br><span class="line">opendaylight-user@root&gt;</span><br></pre></td></tr></table></figure>
<h3 id="安装feature"><a class="markdownIt-Anchor" href="#安装feature"></a> 安装feature</h3>
<blockquote>
<p>说起来，这真的是一件让人崩溃的事情，不同的版本，安装feature不同，在什么都还不懂的情况下安装feature，遇到了无数的问题，终于当我将要换到更老的版本之前（0.7.3），让我找到了**Oxygen（0.8.3）**的feature</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">opendaylight-user@root&gt;feature:install odl-restconf odl-l2switch-switch odl-dlux-core odl-dluxapps-nodes odl-dluxapps-topology odl-dluxapps-yangui odl-dluxapps-yangvisualizer odl-dluxapps-yangman</span><br></pre></td></tr></table></figure>
<p>我有必要把这些feature再次列出来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">feature:install odl-restconf</span><br><span class="line">feature:install odl-l2switch-switch </span><br><span class="line">feature:install odl-dlux-core </span><br><span class="line">feature:install odl-dluxapps-nodes </span><br><span class="line">feature:install odl-dluxapps-topology </span><br><span class="line">feature:install odl-dluxapps-yangui </span><br><span class="line">feature:install odl-dluxapps-yangvisualizer </span><br><span class="line">feature:install odl-dluxapps-yangman</span><br></pre></td></tr></table></figure>
<p><strong>务必按照顺序安装，如果出现错误，删了目录重新来过吧</strong></p>
<h3 id="登陆web"><a class="markdownIt-Anchor" href="#登陆web"></a> 登陆Web</h3>
<p>使用<code>admin:admin</code>登陆即可</p>
<img src="/post/5594d322/5594d322/opendaylight_login.png" class title="ODL WebUI">
]]></content>
      <categories>
        <category>sdn</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>sdn</tag>
        <tag>opendaylight</tag>
      </tags>
  </entry>
  <entry>
    <title>Mininet基础使用</title>
    <url>/post/46d30180.html</url>
    <content><![CDATA[<h2 id="mininet是什么"><a class="markdownIt-Anchor" href="#mininet是什么"></a> Mininet是什么</h2>
<p>Mininet是一个网络模拟器，可以创建虚拟主机，交换机，控制器和链接的网络。</p>
<p>Mininet的交换机支持OpenFlow，可实现高度灵活的自定义路由和SDN，为开发和测试SDN提供实验环境</p>
<a id="more"></a>
<h2 id="mininet用途"><a class="markdownIt-Anchor" href="#mininet用途"></a> Mininet用途</h2>
<ul>
<li>为开发OpenFlow应用程序提供简单而廉价的<strong>网络测试平台</strong></li>
<li>允许<strong>多个并发开发人员</strong>在同一拓扑上独立工作</li>
<li>支持<strong>系统级回归测试</strong>，这些<strong>测试</strong>可重复且易于打包</li>
<li>支持<strong>复杂的拓扑测试</strong>，无需连接物理网络</li>
<li>包括具有拓扑感知和OpenFlow感知的<strong>CLI</strong>，用于调试或运行网络范围的测试</li>
<li>支持<strong>任意自定义拓扑</strong>，并包括一组基本的<strong>参数化拓扑</strong></li>
<li><strong>可以在</strong>没有编程<strong>的情况下开箱</strong>即<strong>用</strong></li>
<li>提供了一个简单易用的**Python API，**用于网络创建和实验</li>
</ul>
<h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2>
<h3 id="ubuntu1604"><a class="markdownIt-Anchor" href="#ubuntu1604"></a> Ubuntu16.04</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install mininet</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mn --<span class="built_in">test</span> pingall</span><br></pre></td></tr></table></figure>
<h2 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h2>
<h3 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h3>
<ul>
<li>进入mininet命令行模式</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@mininet:~<span class="comment"># mn</span></span><br><span class="line">*** No default OpenFlow controller found <span class="keyword">for</span> default switch!</span><br><span class="line">*** Falling back to OVS Bridge</span><br><span class="line">*** Creating network</span><br><span class="line">*** Adding controller</span><br><span class="line">*** Adding hosts:</span><br><span class="line">h1 h2</span><br><span class="line">*** Adding switches:</span><br><span class="line">s1</span><br><span class="line">*** Adding links:</span><br><span class="line">(h1, s1) (h2, s1)</span><br><span class="line">*** Configuring hosts</span><br><span class="line">h1 h2</span><br><span class="line">*** Starting controller</span><br><span class="line"></span><br><span class="line">*** Starting 1 switches</span><br><span class="line">s1 ...</span><br><span class="line">*** Starting CLI:</span><br><span class="line">mininet&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>查看节点</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mininet&gt; nodes</span><br><span class="line">available nodes are:</span><br><span class="line">h1 h2 s1</span><br><span class="line">mininet&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以看到当前包含3个节点，包括两个host，一个switch</p>
</blockquote>
<ul>
<li>查看连接状况</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mininet&gt; net</span><br><span class="line">h1 h1-eth0:s1-eth1</span><br><span class="line">h2 h2-eth0:s1-eth2</span><br><span class="line">s1 lo:  s1-eth1:h1-eth0 s1-eth2:h2-eth0</span><br><span class="line">mininet&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>h1的eth0与s1的eth1相连<br>
h2的eth0与s1的eth2相连</p>
</blockquote>
<ul>
<li>查看详细信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mininet&gt; dump</span><br><span class="line">&lt;Host h1: h1-eth0:10.0.0.1 pid=6896&gt;</span><br><span class="line">&lt;Host h2: h2-eth0:10.0.0.2 pid=6899&gt;</span><br><span class="line">&lt;OVSBridge s1: lo:127.0.0.1,s1-eth1:None,s1-eth2:None pid=6905&gt;</span><br><span class="line">mininet&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>环境清理</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mn -c</span></span><br><span class="line">*** Removing excess controllers/ofprotocols/ofdatapaths/pings/noxes</span><br><span class="line">killall controller ofprotocol ofdatapath ping nox_core lt-nox_core ovs-openflowd ovs-controller udpbwtest mnexec ivs 2&gt; /dev/null</span><br><span class="line">killall -9 controller ofprotocol ofdatapath ping nox_core lt-nox_core ovs-openflowd ovs-controller udpbwtest mnexec ivs 2&gt; /dev/null</span><br><span class="line">pkill -9 -f <span class="string">"sudo mnexec"</span></span><br><span class="line">*** Removing junk from /tmp</span><br><span class="line">rm -f /tmp/vconn* /tmp/vlogs* /tmp/*.out /tmp/*.<span class="built_in">log</span></span><br><span class="line">*** Removing old X11 tunnels</span><br><span class="line">*** Removing excess kernel datapaths</span><br><span class="line">ps ax | egrep -o <span class="string">'dp[0-9]+'</span> | sed <span class="string">'s/dp/nl:/'</span></span><br><span class="line">***  Removing OVS datapaths</span><br><span class="line">ovs-vsctl --timeout=1 list-br</span><br><span class="line">ovs-vsctl --timeout=1 list-br</span><br><span class="line">*** Removing all links of the pattern foo-ethX</span><br><span class="line">ip link show | egrep -o <span class="string">'([-_.[:alnum:]]+-eth[[:digit:]]+)'</span></span><br><span class="line">ip link show</span><br><span class="line">*** Killing stale mininet node processes</span><br><span class="line">pkill -9 -f mininet:</span><br><span class="line">*** Shutting down stale tunnels</span><br><span class="line">pkill -9 -f Tunnel=Ethernet</span><br><span class="line">pkill -9 -f .ssh/mn</span><br><span class="line">rm -f ~/.ssh/mn/*</span><br><span class="line">*** Cleanup complete.</span><br><span class="line">root@mininet:~<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<ul>
<li>节点命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mininet&gt; h1 ifconfig</span><br><span class="line">h1-eth0   Link encap:Ethernet  HWaddr a2:5f:da:ed:6a:74</span><br><span class="line">          inet addr:10.0.0.1  Bcast:10.255.255.255  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: fe80::a05f:daff:feed:6a74/64 Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:15 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:1206 (1.2 KB)  TX bytes:648 (648.0 B)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback</span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          inet6 addr: ::1/128 Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</span><br><span class="line">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1</span><br><span class="line">          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)</span><br><span class="line"></span><br><span class="line">mininet&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>Run http server</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mininet&gt; h1 python -m SimpleHTTPServer 80 &amp;</span><br></pre></td></tr></table></figure>
<ul>
<li>Http client</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mininet&gt; h2 wget h1</span><br><span class="line">--2018-11-07 10:52:29--  http://10.0.0.1/</span><br><span class="line">Connecting to 10.0.0.1:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 370 [text/html]</span><br><span class="line">Saving to: <span class="string">'index.html'</span></span><br><span class="line"></span><br><span class="line">index.html          100%[===================&gt;]     370  --.-KB/s    <span class="keyword">in</span> 0s</span><br><span class="line"></span><br><span class="line">2018-11-07 10:52:29 (62.3 MB/s) - <span class="string">'index.html'</span> saved [370/370]</span><br><span class="line"></span><br><span class="line">mininet&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>sdn</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>sdn</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenvSwitch学习笔记1</title>
    <url>/post/775edb62.html</url>
    <content><![CDATA[<h2 id="功能支持"><a class="markdownIt-Anchor" href="#功能支持"></a> 功能支持</h2>
<ol>
<li>VLAN with trunk and access ports</li>
<li>绑定NIC(with/without LAC)</li>
<li>可见性：NetFlow, sFlow®, and mirroring</li>
<li>QoS</li>
<li>Geneve, GRE, VXLAN, STT, and LISP 隧道</li>
<li>连接故障管理</li>
<li>openflow 1.0及其扩展</li>
<li>使用Linux内核进行高性能转发</li>
</ol>
<a id="more"></a>
<h2 id="主要组成部分"><a class="markdownIt-Anchor" href="#主要组成部分"></a> 主要组成部分</h2>
<ul>
<li>
<p>ovs-vswitchd: 实现交换功能的守护进程，与Linux内核模块实现flow-based switching</p>
</li>
<li>
<p>ovsdb-server: 用以保存ovs配置信息的轻量级的数据库</p>
</li>
<li>
<p>ovs-dpctl: 用以配置交换机内核模块的工具</p>
</li>
<li>
<p>ovs-vsctl: 查看和更新ovs配置信息的工具</p>
</li>
<li>
<p>ovs-ofctl: 配置和查看OpenFlow的控制和交换。主要用来操作OpenFlow流表</p>
</li>
</ul>
<h2 id="场景"><a class="markdownIt-Anchor" href="#场景"></a> 场景</h2>
<p>多服务器虚拟化部署场景</p>
<ul>
<li>高动态的end-points</li>
<li>维护的是逻辑抽象</li>
<li>状态迁移</li>
<li>响应网络动态修改</li>
<li>维护逻辑标签</li>
</ul>
<h3 id="包处理流程"><a class="markdownIt-Anchor" href="#包处理流程"></a> 包处理流程</h3>
<img src="/post/775edb62/775edb62/ovs-arch.png" class title="arch">
<p>如上图</p>
<ol>
<li>当包被从物理网卡上收到之后，如果是第一次收到包，ovs的kernel datapath不知道该如何处理，于是，将其送往ovs-vswitchd。</li>
<li>ovs-vswitchd决定这个包该如何处理之后，回送到kernel datapath</li>
<li>kernel datapath根据ovs-vswitchd执行相应的动作，并缓存这个动作</li>
<li>当再次收到相关包之后，kernel datapath已经存在之前缓存好的动作，则直接执行该动作</li>
</ol>
<h3 id="包处理流程-2"><a class="markdownIt-Anchor" href="#包处理流程-2"></a> 包处理流程</h3>
<img src="/post/775edb62/775edb62/ovs-module.png" class title="module">
<ol>
<li>因为Flow table在内核中有一份，当从物理网卡收到包后，通过key查找内核中的flow table，即可以得到action，然后执行action</li>
<li>如果没有查找到，则通过upcall调用，将数据包以netlink协议上传到vswitchd</li>
<li>vswitchd将数据包在ovsdb中进行查表匹配，若能匹配，则转到第五步</li>
<li>若不能匹配，则通过 OpenFlow协议与控制器通信，控制器下发流表项，Vswitchd解析流表项得到相应的动作，同时将流表存入ovsdb。</li>
<li>将匹配的流表项通过netlink下发到内核的Flow-table中</li>
<li>通过reinject，使用netlink将包重新送回内核</li>
<li>匹配流表项并根据相应的动作执行</li>
</ol>
]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>ovs</tag>
        <tag>network</tag>
        <tag>openvswitch</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo开启disqus评论系统</title>
    <url>/post/c4780247.html</url>
    <content><![CDATA[<p>之前一直使用Hexo的Next主题，开启的是Valine评论系统。有<a href="http://www.simble.site/post/a072bce6.html">博文</a>来说明配置过程。然而，一个主题再好，看的时间久了，还是想要换换。于是使用了现在的<a href="https://github.com/stkevintan/hexo-theme-material-flow">MaterialFlow</a>，刚好也换换评论系统</p>
<p>相比Valine，disqus开启真的是太简单了</p>
<a id="more"></a>
<h3 id="注册disqus账号"><a class="markdownIt-Anchor" href="#注册disqus账号"></a> 注册disqus账号</h3>
<p>其实我很早之前就注册了账号，直接使用facebook关联过去的.</p>
<h3 id="网站上开启"><a class="markdownIt-Anchor" href="#网站上开启"></a> 网站上开启</h3>
<ol>
<li>登陆disqus后，在首页点击右侧设置-Add Disqus To Site</li>
</ol>
<img src="/post/c4780247/c4780247/disqus_1.png" class title="Add Disqus To Site">
<ol start="2">
<li>在随后弹出的页面点击Start - I want to install Disqus on my site</li>
</ol>
<img src="/post/c4780247/c4780247/disqus2.png" class title="Install">
<img src="/post/c4780247/c4780247/disqus-shortname.png" class title="Shortname">
<h3 id="配置hexo"><a class="markdownIt-Anchor" href="#配置hexo"></a> 配置Hexo</h3>
<p>修改hexo的_config.yml，增加<code>disqus_shortname</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">disqus_shortname:</span> <span class="string">your_shortname</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>大功告成</p>
</blockquote>
<p><strong>欢迎大家留言</strong></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>openstack接口状态异常</title>
    <url>/post/257b0787.html</url>
    <content><![CDATA[<h2 id="错误信息"><a class="markdownIt-Anchor" href="#错误信息"></a> 错误信息</h2>
<p>neutron错误日志<code>Exit code: 2; Stdin: ; Stdout: ; Stderr: sudo: unable to resolve host pxea4badb2</code></p>
<h2 id="问题现象"><a class="markdownIt-Anchor" href="#问题现象"></a> 问题现象</h2>
<blockquote>
<p>openstack的router中创建了一个联通两个vlan的路由器，发现两个接口轮流处于<code>build</code>状态</p>
</blockquote>
<a id="more"></a>
<h2 id="查看日志"><a class="markdownIt-Anchor" href="#查看日志"></a> 查看日志</h2>
<ul>
<li>/var/log/neutron/neutron-linuxbridge-agent.log</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">115265 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File <span class="string">"/usr/lib/python2.7/dist-packages/oslo_utils/excutils.py"</span>, line 196, <span class="keyword">in</span> force_reraise</span><br><span class="line">115266 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent     six.reraise(self.type_, self.value, self.tb)</span><br><span class="line">115267 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File <span class="string">"/usr/lib/python2.7/dist-packages/neutron/plugins/ml2/drivers/linuxbridge/agent/linuxbridge_neut       ron_agent.py"</span>, line 419, <span class="keyword">in</span> add_tap_interface</span><br><span class="line">115268 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent     tap_device_name, device_owner)</span><br><span class="line">115269 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File <span class="string">"/usr/lib/python2.7/dist-packages/neutron/plugins/ml2/drivers/linuxbridge/agent/linuxbridge_neut       ron_agent.py"</span>, line 451, <span class="keyword">in</span> _add_tap_interface</span><br><span class="line">115270 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent     segmentation_id)</span><br><span class="line">115271 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File <span class="string">"/usr/lib/python2.7/dist-packages/neutron/plugins/ml2/drivers/linuxbridge/agent/linuxbridge_neut       ron_agent.py"</span>, line 403, <span class="keyword">in</span> ensure_physical_in_bridge</span><br><span class="line">115272 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent     physical_interface)</span><br><span class="line">115273 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File <span class="string">"/usr/lib/python2.7/dist-packages/neutron/plugins/ml2/drivers/linuxbridge/agent/linuxbridge_neut       ron_agent.py"</span>, line 221, <span class="keyword">in</span> ensure_flat_bridge</span><br><span class="line">115274 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent     gateway):</span><br><span class="line">115275 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File <span class="string">"/usr/lib/python2.7/dist-packages/neutron/plugins/ml2/drivers/linuxbridge/agent/linuxbridge_neut       ron_agent.py"</span>, line 362, <span class="keyword">in</span> ensure_bridge</span><br><span class="line">115276 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent     self.update_interface_ip_details(bridge_name, interface, ips, gateway)</span><br><span class="line">115277 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File <span class="string">"/usr/lib/python2.7/dist-packages/neutron/plugins/ml2/drivers/linuxbridge/agent/linuxbridge_neut       ron_agent.py"</span>, line 301, <span class="keyword">in</span> update_interface_ip_details</span><br><span class="line">115278 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent     dst_device.addr.add(cidr=ip[<span class="string">'cidr'</span>])</span><br><span class="line">115279 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File <span class="string">"/usr/lib/python2.7/dist-packages/neutron/agent/linux/ip_lib.py"</span>, line 597, <span class="keyword">in</span> add</span><br><span class="line">115280 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent     self._as_root([net.version], tuple(args))</span><br><span class="line">115281 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File <span class="string">"/usr/lib/python2.7/dist-packages/neutron/agent/linux/ip_lib.py"</span>, line 384, <span class="keyword">in</span> _as_root</span><br><span class="line">115282 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent     use_root_namespace=use_root_namespace)</span><br><span class="line">115283 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File <span class="string">"/usr/lib/python2.7/dist-packages/neutron/agent/linux/ip_lib.py"</span>, line 96, <span class="keyword">in</span> _as_root</span><br><span class="line">115284 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent     log_fail_as_error=self.log_fail_as_error)</span><br><span class="line">115285 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File <span class="string">"/usr/lib/python2.7/dist-packages/neutron/agent/linux/ip_lib.py"</span>, line 105, <span class="keyword">in</span> _execute</span><br><span class="line">115286 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent     log_fail_as_error=log_fail_as_error)</span><br><span class="line">115287 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent   File <span class="string">"/usr/lib/python2.7/dist-packages/neutron/agent/linux/utils.py"</span>, line 146, <span class="keyword">in</span> execute</span><br><span class="line">115288 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent     raise ProcessExecutionError(msg, returncode=returncode)</span><br><span class="line">115289 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent ProcessExecutionError: Exit code: 2; Stdin: ; Stdout: ; Stderr: sudo: unable to resolve host pxea4badb2       17413</span><br><span class="line">115290 2018-09-11 16:59:59.274 1553 ERROR neutron.plugins.ml2.drivers.agent._common_agent RTNETLINK answers: File exists</span><br></pre></td></tr></table></figure>
<h2 id="问题原因"><a class="markdownIt-Anchor" href="#问题原因"></a> 问题原因</h2>
<ul>
<li><code>sudo: unable to resolve host pxea4badb2</code></li>
</ul>
<blockquote>
<p>无法解析主机名</p>
</blockquote>
<p>查看<code>/etc/hosts</code>中缺少了本地hostname的IP地址映射</p>
<ul>
<li><code>Exit code: 2; Stdin: ; Stdout: ; Stderr:</code></li>
</ul>
<blockquote>
<p>问题比较不直观，google之后，有人说是因为bridge上配置了IP，导致冲突了</p>
</blockquote>
<p>经查看controller上，发现一个bridge和一个无力网卡配置了同样的IP，可能是因为之前使用flat网络后切换为vlan网络，没有清理openstack中创建的配置导致。</p>
<p>将bridge上的IP地址删除后，恢复正常</p>
]]></content>
      <categories>
        <category>cloud</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu在Openstack中启动密码注入不生效问题定位1</title>
    <url>/post/c2a7a06a.html</url>
    <content><![CDATA[<h2 id="问题说明"><a class="markdownIt-Anchor" href="#问题说明"></a> 问题说明</h2>
<p>使用Ubuntu的cloud镜像创建实例，在创建时使用脚本修改密码</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">passwd ubuntu&lt;&lt;EOF</span><br><span class="line">ubuntu</span><br><span class="line">ubuntu</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>系统启动后，发现密码修改未成功</p>
<h2 id="定位思路"><a class="markdownIt-Anchor" href="#定位思路"></a> 定位思路</h2>
<p>查看实例启动日志 ➡️ 查看openstack的neutron agent状态 ➡️ 查看meta-data服务日志</p>
<h2 id="step-by-step"><a class="markdownIt-Anchor" href="#step-by-step"></a> step by step</h2>
<ul>
<li>查看实例启动日志</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[  731.435163] cloud-init[845]: 2018-09-11 01:42:24,574 - url_helper.py[WARNING]: Calling <span class="string">'http://169.254.169.254/2009-04-04/meta-data/instance-id'</span> failed [119/120s]: request error [HTTPConnectionPool(host=<span class="string">'169.254.169.254'</span>, port=80): Max retries exceeded with url: /2009-04-04/meta-data/instance-id (Caused by NewConnectionError(<span class="string">'&lt;requests.packages.urllib3.connection.HTTPConnection object at 0x7fa26f1eb6d8&gt;: Failed to establish a new connection: [Errno 101] Network is unreachable'</span>,))]</span><br><span class="line">[  738.460169] cloud-init[845]: 2018-09-11 01:42:31,597 - DataSourceEc2.py[CRITICAL]: Giving up on md from [<span class="string">'http://169.254.169.254/2009-04-04/meta-data/instance-id'</span>] after 126 seconds</span><br><span class="line">[  738.470572] cloud-init[845]: 2018-09-11 01:42:31,608 - util.py[WARNING]: Getting data from &lt;class <span class="string">'cloudinit.sources.DataSourceCloudStack.DataSourceCloudStack'</span>&gt; failed</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上日志说明cloud-init在向meta-data server获取meta-data时失败</p>
</blockquote>
<ul>
<li>查看neutron agent状态</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@pxea4badb217413:~<span class="comment"># neutron agent-list</span></span><br><span class="line">+--------------------------------------+--------------------+-----------------+-------------------+-------+----------------+---------------------------+</span><br><span class="line">| id                                   | agent_type         | host            | availability_zone | alive | admin_state_up | binary                    |</span><br><span class="line">+--------------------------------------+--------------------+-----------------+-------------------+-------+----------------+---------------------------+</span><br><span class="line">| 459740a7-b60c-4db7-9ee0-3b45d6c3b2de | Linux bridge agent | pxe1418773526e5 |                   | :-)   | True           | neutron-linuxbridge-agent |</span><br><span class="line">| 4ec74c6a-c392-4216-bddd-789ec5aa3d86 | DHCP agent         | pxea4badb217413 | nova              | :-)   | True           | neutron-dhcp-agent        |</span><br><span class="line">| 6d992669-fbe6-412c-a717-5c2b61a2b901 | Metadata agent     | pxea4badb217413 |                   | :-)   | True           | neutron-metadata-agent    |</span><br><span class="line">| 77dc04a5-0e43-4907-be3a-6f165e77807c | Linux bridge agent | pxe74867aee16bc |                   | :-)   | True           | neutron-linuxbridge-agent |</span><br><span class="line">| c54c7593-5973-41ed-86c8-7e22ac1e95ec | Linux bridge agent | pxea4badb217413 |                   | :-)   | True           | neutron-linuxbridge-agent |</span><br><span class="line">| e882e27d-45de-4cb3-9284-7e9101e2b39b | L3 agent           | pxea4badb217413 | nova              | :-)   | True           | neutron-l3-agent          |</span><br><span class="line">+--------------------------------------+--------------------+-----------------+-------------------+-------+----------------+---------------------------+</span><br><span class="line">root@pxea4badb217413:~<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<ul>
<li>检查neutron-metadata日志</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent [-] Failed reporting state!</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent Traceback (most recent call last):</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent   File <span class="string">"/usr/lib/python2.7/dist-packages/neutron/agent/metadata/agent.py"</span>, line <span class="number">266</span>, <span class="keyword">in</span> _report_state</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent     use_call=self.agent_state.get(<span class="string">'start_flag'</span>))</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent   File <span class="string">"/usr/lib/python2.7/dist-packages/neutron/agent/rpc.py"</span>, line <span class="number">87</span>, <span class="keyword">in</span> report_state</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent     <span class="keyword">return</span> method(context, <span class="string">'report_state'</span>, **kwargs)</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent   File <span class="string">"/usr/lib/python2.7/dist-packages/oslo_messaging/rpc/client.py"</span>, line <span class="number">158</span>, <span class="keyword">in</span> call</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent     retry=self.retry)</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent   File <span class="string">"/usr/lib/python2.7/dist-packages/oslo_messaging/transport.py"</span>, line <span class="number">90</span>, <span class="keyword">in</span> _send</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent     timeout=timeout, retry=retry)</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent   File <span class="string">"/usr/lib/python2.7/dist-packages/oslo_messaging/_drivers/amqpdriver.py"</span>, line <span class="number">470</span>, <span class="keyword">in</span> send</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent     retry=retry)</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent   File <span class="string">"/usr/lib/python2.7/dist-packages/oslo_messaging/_drivers/amqpdriver.py"</span>, line <span class="number">459</span>, <span class="keyword">in</span> _send</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent     result = self._waiter.wait(msg_id, timeout)</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent   File <span class="string">"/usr/lib/python2.7/dist-packages/oslo_messaging/_drivers/amqpdriver.py"</span>, line <span class="number">342</span>, <span class="keyword">in</span> wait</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent     message = self.waiters.get(msg_id, timeout=timeout)</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent   File <span class="string">"/usr/lib/python2.7/dist-packages/oslo_messaging/_drivers/amqpdriver.py"</span>, line <span class="number">244</span>, <span class="keyword">in</span> get</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent     <span class="string">'to message ID %s'</span> % msg_id)</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent MessagingTimeout: Timed out waiting <span class="keyword">for</span> a reply to message ID <span class="number">5</span>b145001c0a34d37a68337821e64908f</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.404</span> <span class="number">10617</span> ERROR neutron.agent.metadata.agent</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-05</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">06.405</span> <span class="number">10617</span> WARNING oslo.service.loopingcall [-] Function <span class="string">'neutron.agent.metadata.agent.UnixDomainMetadataProxy._report_state'</span> run outlasted interval by <span class="number">30.00</span> s</span><br><span class="line">ec</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2018-09-06 16:23:48.658 1238 ERROR oslo.messaging._drivers.impl_rabbit [-] AMQP server on controller:5672 is unreachable: [Errno 111] ECONNREFUSED. Trying again <span class="keyword">in</span> 1 seconds.</span><br><span class="line">2018-09-06 16:23:49.752 1238 ERROR oslo.messaging._drivers.impl_rabbit [-] AMQP server on controller:5672 is unreachable: [Errno 111] ECONNREFUSED. Trying again <span class="keyword">in</span> 2 seconds.</span><br><span class="line">2018-09-06 16:23:51.766 1238 ERROR oslo.messaging._drivers.impl_rabbit [-] AMQP server on controller:5672 is unreachable: [Errno 111] ECONNREFUSED. Trying again <span class="keyword">in</span> 4 seconds.</span><br><span class="line">2018-09-06 16:23:55.779 1238 ERROR oslo.messaging._drivers.impl_rabbit [-] AMQP server on controller:5672 is unreachable: [Errno 111] ECONNREFUSED. Trying again <span class="keyword">in</span> 6 seconds.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上显示为AMQP server连接不到</p>
</blockquote>
<ul>
<li>检查meta-data的配置</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"> /etc/neutron/metadata_agent.ini</span><br><span class="line"> </span><br><span class="line"># IP address used by Nova metadata server. (string value)</span><br><span class="line">#nova_metadata_ip = 127.0.0.1</span><br><span class="line">nova_metadata_ip = controller</span><br><span class="line"># TCP Port used by Nova metadata server. (port value)</span><br><span class="line"># Minimum value: 0</span><br><span class="line"># Maximum value: 65535</span><br><span class="line">#nova_metadata_port = 8775</span><br></pre></td></tr></table></figure>
<ul>
<li>查看controller上端口监听状况</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@pxea4badb217413:~<span class="comment"># netstat -lnp</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1149/sshd</span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      2316/exim4</span><br><span class="line">tcp        0      0 127.0.0.1:6010          0.0.0.0:*               LISTEN      18284/12</span><br><span class="line">tcp        0      0 127.0.0.1:6011          0.0.0.0:*               LISTEN      18861/20</span><br><span class="line">tcp        0      0 0.0.0.0:9696            0.0.0.0:*               LISTEN      1243/python</span><br><span class="line">tcp        0      0 0.0.0.0:6080            0.0.0.0:*               LISTEN      1247/python</span><br><span class="line">tcp        0      0 0.0.0.0:8774            0.0.0.0:*               LISTEN      1237/python</span><br><span class="line">tcp        0      0 0.0.0.0:8775            0.0.0.0:*               LISTEN      1237/python</span><br><span class="line">tcp        0      0 0.0.0.0:9191            0.0.0.0:*               LISTEN      1242/python</span><br><span class="line">tcp        0      0 0.0.0.0:25672           0.0.0.0:*               LISTEN      2922/beam.smp</span><br><span class="line">tcp        0      0 0.0.0.0:8776            0.0.0.0:*               LISTEN      1235/python</span><br><span class="line">tcp        0      0 10.160.17.196:3306      0.0.0.0:*               LISTEN      1769/mysqld</span><br><span class="line">tcp        0      0 10.160.17.196:11211     0.0.0.0:*               LISTEN      2443/memcached</span><br><span class="line">tcp        0      0 0.0.0.0:9292            0.0.0.0:*               LISTEN      1246/python</span><br><span class="line">tcp6       0      0 :::21                   :::*                    LISTEN      833/vsftpd</span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1149/sshd</span><br><span class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      2316/exim4</span><br><span class="line">tcp6       0      0 ::1:6010                :::*                    LISTEN      18284/12</span><br><span class="line">tcp6       0      0 ::1:6011                :::*                    LISTEN      18861/20</span><br><span class="line">tcp6       0      0 :::35357                :::*                    LISTEN      3904/apache2</span><br><span class="line">tcp6       0      0 :::5000                 :::*                    LISTEN      3904/apache2</span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      3904/apache2</span><br><span class="line">tcp6       0      0 :::8081                 :::*                    LISTEN      4749/cma</span><br><span class="line">tcp6       0      0 :::4369                 :::*                    LISTEN      2586/epmd</span><br><span class="line">udp        0      0 0.0.0.0:123             0.0.0.0:*                           3218/chronyd</span><br><span class="line">udp        0      0 0.0.0.0:161             0.0.0.0:*                           3189/snmpd</span><br><span class="line">udp        0      0 0.0.0.0:323             0.0.0.0:*                           3218/chronyd</span><br><span class="line">udp6       0      0 :::123                  :::*                                3218/chronyd</span><br><span class="line">udp6       0      0 :::323                  :::*                                3218/chronyd</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上，发现5762端口未监听</p>
</blockquote>
<ul>
<li>尝试启动rabbitmq-server</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service rabbitmq-server start</span><br><span class="line"> * Starting RabbitMQ Messaging Server rabbitmq-server                                                                                                                              * RabbitMQ Messaging Server already running</span><br><span class="line">                                                                                                                                                                           [ OK ]</span><br></pre></td></tr></table></figure>
<ul>
<li>再次查看端口监听状态</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tcp6       0      0 :::5672                 :::*                    LISTEN      2922/beam.smp</span><br></pre></td></tr></table></figure>
<ul>
<li>重启meta-data的service，发现日志已经不再报错了</li>
</ul>
<blockquote>
<p>然而，这竟然不是最终原因，最终的问题发现是<strong>网络问题</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>cloud</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlalchemy连接docker的mysql问题记录</title>
    <url>/post/6e2fcf3d.html</url>
    <content><![CDATA[<p>又开始鼓捣flask+mysql了 👶</p>
<p>不成想，又一次踩了好多雷 😂</p>
<p>有一种打怪升级的感觉</p>
<a id="more"></a>
<h3 id="环境说明"><a class="markdownIt-Anchor" href="#环境说明"></a> 环境说明</h3>
<ol>
<li>Mac+flask</li>
<li>docker+mysql</li>
</ol>
<h3 id="问题1-create_engine报错"><a class="markdownIt-Anchor" href="#问题1-create_engine报错"></a> 问题1 create_engine报错</h3>
<ul>
<li>错误信息</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>engine = create_engine(<span class="string">'mysql+mysqldb://root:123456@localhost/beta_monitor'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/Users/bqi/venv/beta-monitor/lib/python2.7/site-packages/sqlalchemy/engine/__init__.py"</span>, line <span class="number">424</span>, <span class="keyword">in</span> create_engine</span><br><span class="line">    <span class="keyword">return</span> strategy.create(*args, **kwargs)</span><br><span class="line">  File <span class="string">"/Users/bqi/venv/beta-monitor/lib/python2.7/site-packages/sqlalchemy/engine/strategies.py"</span>, line <span class="number">81</span>, <span class="keyword">in</span> create</span><br><span class="line">    dbapi = dialect_cls.dbapi(**dbapi_args)</span><br><span class="line">  File <span class="string">"/Users/bqi/venv/beta-monitor/lib/python2.7/site-packages/sqlalchemy/dialects/mysql/mysqldb.py"</span>, line <span class="number">102</span>, <span class="keyword">in</span> dbapi</span><br><span class="line">    <span class="keyword">return</span> __import__(<span class="string">'MySQLdb'</span>)</span><br><span class="line">ImportError: No module named MySQLdb</span><br></pre></td></tr></table></figure>
<ul>
<li>问题原因</li>
</ul>
<p>没有安装python的mysql包，需要安装<code>mysql-python</code>和/或<code>mysqlclient</code>，然后就遇到了第二个问题</p>
<h3 id="问题2-pip-install-mysql-python失败"><a class="markdownIt-Anchor" href="#问题2-pip-install-mysql-python失败"></a> 问题2 <code>pip install mysql-python</code>失败</h3>
<ul>
<li>错误信息</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">⇒ pip install mysql-python</span><br><span class="line">Collecting mysql-python</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/a5/e9/51b544da85a36a68debe7a7091f068d802fc515a3a202652828c73453cad/MySQL-python-1.2.5.zip (108kB)</span><br><span class="line">    100% |████████████████████████████████| 112kB 153kB/s</span><br><span class="line">    Complete output from command python setup.py egg_info:</span><br><span class="line">    sh: mysql_config: command not found</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">      File "&lt;string&gt;", line 1, in &lt;module&gt;</span><br><span class="line">      File "/private/var/folders/3z/tqw46wwj7xb1d2ftp578x5vm0000gn/T/pip-install-ViJMnc/mysql-python/setup.py", line 17, in &lt;module&gt;</span><br><span class="line">        metadata, options = get_config()</span><br><span class="line">      File "setup_posix.py", line 43, in get_config</span><br><span class="line">        libs = mysql_config("libs_r")</span><br><span class="line">      File "setup_posix.py", line 25, in mysql_config</span><br><span class="line">        raise EnvironmentError("%s not found" % (mysql_config.path,))</span><br><span class="line">    EnvironmentError: mysql_config not found</span><br><span class="line"></span><br><span class="line">    ----------------------------------------</span><br><span class="line">Command "python setup.py egg_info" failed with error code 1 in /private/var/folders/3z/tqw46wwj7xb1d2ftp578x5vm0000gn/T/pip-install-ViJMnc/mysql-python/</span><br></pre></td></tr></table></figure>
<ul>
<li>问题原因</li>
</ul>
<p><code>mysql_config</code>不存在，原来是系统必须安装mysql客户端</p>
<ul>
<li>解决方法 <code>brew install mysql</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">⇒ brew install mysql</span><br><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/mysql-5.7.22.high_sierra.bottle.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">####################################################################### 100.0%</span></span></span><br><span class="line">==&gt; Pouring mysql-5.7.22.high_sierra.bottle.tar.gz</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="问题3-连接mysql服务器失败"><a class="markdownIt-Anchor" href="#问题3-连接mysql服务器失败"></a> 问题3 连接mysql服务器失败</h3>
<ul>
<li>错误信息 <code>Authentication plugin 'caching_sha2_password' cannot be loaded</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>engine = create_engine(<span class="string">'mysql+mysqldb://root:123456@127.0.0.1/beta_monitor'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>connection = engine.connect()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/Users/bqi/venv/beta-monitor/lib/python2.7/site-packages/sqlalchemy/engine/base.py"</span>, line <span class="number">2102</span>, <span class="keyword">in</span> connect</span><br><span class="line">    <span class="keyword">return</span> self._connection_cls(self, **kwargs)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  File <span class="string">"/Users/bqi/venv/beta-monitor/lib/python2.7/site-packages/MySQLdb/__init__.py"</span>, line <span class="number">81</span>, <span class="keyword">in</span> Connect</span><br><span class="line">    <span class="keyword">return</span> Connection(*args, **kwargs)</span><br><span class="line">  File <span class="string">"/Users/bqi/venv/beta-monitor/lib/python2.7/site-packages/MySQLdb/connections.py"</span>, line <span class="number">193</span>, <span class="keyword">in</span> __init__</span><br><span class="line">    super(Connection, self).__init__(*args, **kwargs2)</span><br><span class="line">sqlalchemy.exc.OperationalError: (_mysql_exceptions.OperationalError) (<span class="number">2059</span>, <span class="string">"Authentication plugin 'caching_sha2_password' cannot be loaded: dlopen(/usr/local/Cellar/mysql/5.7.22/lib/plugin/caching_sha2_password.so, 2): image not found"</span>) (Background on this error at: http://sqlalche.me/e/e3q8)</span><br></pre></td></tr></table></figure>
<ul>
<li>问题原因</li>
</ul>
<p>上网查了一通，似乎说从某个版本开始，mysql用了一种认证方式导致问题。根据解决方法看，更换了认证方式就可以了</p>
<ul>
<li>解决方法</li>
</ul>
<ol>
<li>用docker启动mysql时增加参数 <code>--default-authentication-plugin=mysql_native_password</code></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~|⇒ docker run -p 3306:3306 -d -e MYSQL_ROOT_PASSWORD=123456 -e MYSQL_DATABASE=beta_monitor -e MYSQL_USER=test -e MYSQL_PASSWORD=123456 mysql --default-authentication-plugin=mysql_native_password</span><br><span class="line">d8f5e623dc595df19b9d6cce52780381b625c1565622f5867f2ad3aeafdca499</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>如果安装在服务器上，则在my.cnf中修改相关配置</li>
</ol>
<ul>
<li>测试</li>
</ul>
<ol>
<li>本地连接测试</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~|⇒ mysql -utest -p123456 -h 127.0.0.1</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">ERROR 2013 (HY000): Lost connection to MySQL server at &apos;reading initial communication packet&apos;, system error: 0</span><br><span class="line">~|⇒ mysql -utest -p -h 127.0.0.1</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 8</span><br><span class="line">Server version: 8.0.12 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; quit</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>通过<code>connection = engine.connect()</code>无异常</li>
</ol>
<blockquote>
<p>作为一个暗夜精灵玩家，强烈谴责希尔瓦纳斯烧了我老家的卑劣行径，暴雪怎么洗也没用</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>sqlalchemy</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>美签记录</title>
    <url>/post/fbe9394a.html</url>
    <content><![CDATA[<p>记第一次拿到十年美签</p>
<h1 id="时间"><a class="markdownIt-Anchor" href="#时间"></a> 时间</h1>
<ul>
<li>提交DS160: 2018-07-08</li>
<li>预约面签时间: 2018-07-27 前面排队人太多</li>
<li>Issued: 2018-07-30</li>
<li>护照已从领事馆那边收回，目前正在安排运送: 2018-07-30</li>
<li>收到护照: 2018-08-02</li>
</ul>
<h4 id="持续时间"><a class="markdownIt-Anchor" href="#持续时间"></a> 持续时间</h4>
<ul>
<li>面签持续时间：1分钟不到</li>
<li>AP持续时间：2个工作日</li>
<li>Issued到送到苏州：3个工作日</li>
</ul>
<h1 id="面签问题"><a class="markdownIt-Anchor" href="#面签问题"></a> 面签问题</h1>
<ol>
<li>你去美国干什么？</li>
<li>要去美国多久？</li>
<li>你是做什么工作的？</li>
<li>你们公司是做什么的？</li>
<li>你是一个人去么？</li>
</ol>
<p>“你通过了！”</p>
]]></content>
      <categories>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>visa</tag>
      </tags>
  </entry>
  <entry>
    <title>Openstack学习笔记1</title>
    <url>/post/9b5fb1d1.html</url>
    <content><![CDATA[<p>该系列用来记录本人使用Openstack的一些笔记和心得</p>
<a id="more"></a>
<h2 id="openstack一些理解"><a class="markdownIt-Anchor" href="#openstack一些理解"></a> Openstack一些理解</h2>
<h3 id="服务说明"><a class="markdownIt-Anchor" href="#服务说明"></a> 服务说明</h3>
<ul>
<li>keystone - 必选</li>
</ul>
<p>认证服务，是其他所有服务的基础</p>
<ul>
<li>glance - 必选</li>
</ul>
<p>镜像服务，用来存储镜像文件，如iso, vmdk, qcow2等</p>
<ul>
<li>nova - 必选</li>
</ul>
<p>计算服务，包括计算，调度，管理，api等，是openstack的核心服务</p>
<ul>
<li>neutron - 必选</li>
</ul>
<p>网络服务</p>
<ul>
<li>horizon - 可选（推荐选择）</li>
</ul>
<p>管理界面，图形化管理界面，方便使用</p>
<ul>
<li>cinder - 可选</li>
</ul>
<p>块存储服务，用来创建虚拟机的磁盘</p>
<h3 id="一些理解"><a class="markdownIt-Anchor" href="#一些理解"></a> 一些理解</h3>
<p>openstack可以理解为插件型的，灵活就体现于此。</p>
<ul>
<li>计算服务，控制节点可以只做计算的调度，管理，也可以在控制节点上启动计算服务</li>
<li>同样，可以在任意一个节点上起块存储服务</li>
</ul>
<h3 id="关于网络"><a class="markdownIt-Anchor" href="#关于网络"></a> 关于网络</h3>
<p>刚开始的时候很疑惑，为什么每个计算节点上都要配置一个额外的网卡，并将其连在一起</p>
<p>需要说明的是：</p>
<ul>
<li>虚拟机的第一个网口是openstack的各个节点用来通信的网卡</li>
<li>第二个网口是用来实现在openstack上启动的实例彼此通信的（即东西向流量）</li>
<li>也可以不用第二个网口，这时，两个实例可以通过基于第一个网口之间建立的隧道进行通信</li>
<li>如果要让实例可以访问外网，则需要为其分配专门的访问外网的网口</li>
<li>openstack并不直接管理网口或网桥，要么通过linux bridge，或者是openvSwitch</li>
<li>在openstack的UI上看到的网口，都是代号</li>
</ul>
<h2 id="测试环境准备"><a class="markdownIt-Anchor" href="#测试环境准备"></a> 测试环境准备</h2>
<h3 id="两台虚拟机当然也可以all-in-one"><a class="markdownIt-Anchor" href="#两台虚拟机当然也可以all-in-one"></a> 两台虚拟机（当然也可以all in one）</h3>
<h4 id="硬件准备"><a class="markdownIt-Anchor" href="#硬件准备"></a> 硬件准备</h4>
<p>每台虚拟机应包含</p>
<ol>
<li>虚机可上网</li>
<li>另外包含一张额外的网卡</li>
<li>内存尽量多（8G）</li>
<li>CPU尽量多（8 cpus）</li>
<li>controller硬盘稍微大一些</li>
</ol>
<h4 id="基本准备"><a class="markdownIt-Anchor" href="#基本准备"></a> 基本准备</h4>
<blockquote>
<p>Ubuntu16.04 + Q版本（Queens）</p>
</blockquote>
<h5 id="配置ntp"><a class="markdownIt-Anchor" href="#配置ntp"></a> 配置NTP</h5>
<h5 id="安装openstack基础包"><a class="markdownIt-Anchor" href="#安装openstack基础包"></a> 安装Openstack基础包</h5>
<ul>
<li>准备仓库</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apt install software-properties-common</span></span><br><span class="line"><span class="comment"># add-apt-repository cloud-archive:queens</span></span><br></pre></td></tr></table></figure>
<ul>
<li>安装openstack包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt update</span><br><span class="line">$ apt upgrade <span class="comment">#经实际测试，如果用apt dist-upgrade可能会出现问题，安装的不是最新的包</span></span><br><span class="line">$ apt install python-openstackclient</span><br></pre></td></tr></table></figure>
<h4 id="controller"><a class="markdownIt-Anchor" href="#controller"></a> controller</h4>
<p>controller上需要安装的东西最多</p>
<h5 id="依赖"><a class="markdownIt-Anchor" href="#依赖"></a> 依赖</h5>
<ul>
<li>数据库: MariaDB</li>
<li>消息队列: RabbitMQ</li>
<li>服务及身份认证: Memcached</li>
<li>etcd</li>
</ul>
<h5 id="openstack服务"><a class="markdownIt-Anchor" href="#openstack服务"></a> openstack服务</h5>
<ul>
<li>认证服务: keystone</li>
<li>镜像服务: glance</li>
<li>计算服务（指计算的调度，管理，api等服务）: nova</li>
<li>网络服务（网络管理，调度等服务）: neutron</li>
<li>管理界面: horizon</li>
<li>块存储服务（可选）: cinder</li>
</ul>
<h4 id="compute"><a class="markdownIt-Anchor" href="#compute"></a> compute</h4>
<p>计算节点相对来说简单了很多</p>
<h5 id="openstack服务-2"><a class="markdownIt-Anchor" href="#openstack服务-2"></a> openstack服务</h5>
<ul>
<li>计算服务（专指计算服务）: nova-compute</li>
<li>网络服务: neutron</li>
</ul>
<p><strong>可在controller上同样起计算服务</strong></p>
<p>详细安装过程可参看<a href="https://docs.openstack.org/install-guide/openstack-services.html">官方文档</a></p>
]]></content>
      <categories>
        <category>cloud</category>
      </categories>
      <tags>
        <tag>openstack</tag>
      </tags>
  </entry>
  <entry>
    <title>使用markdown写PPT</title>
    <url>/post/4f712e63.html</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/yhatt/marp/master/images/marp.png" alt></p>
<p>自打接触Markdown以来，深深的爱上了这种格式的书写，先是弄网站，然后又弄电子书。最近要给新员工培训，要准备4个PPT，于是就想有没有直接用md来写PPT的呢？上网一搜，还真有。</p>
<a id="more"></a>
<p>有Reveal.js, LandSlide, GitPitch等，但也许是我研究的不深吧，gitpitch是在线的，LandSlide要用pip来安装。Reveal.js倒是之前见team里的大神有写过，但现在好像变成了slides了，也是在线的。最终，主角出场，我选择了<a href="https://yhatt.github.io/marp/">Marp</a>。</p>
<h3 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点</h3>
<ul>
<li>书写简单</li>
<li>提供两套模版</li>
<li>可实时预览</li>
<li>只需要一个md文件即可，不需要其他诸如yaml之类的东西</li>
<li>支持Mac，Win和Linux</li>
</ul>
<h3 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点</h3>
<ul>
<li>没有动画</li>
<li>只能导出为pdf格式，不能生成PPT格式</li>
<li>仅支持基础的markdown语法</li>
</ul>
<p><strong>虽然有着上面的缺点，然而，对于写技术类PPT，我觉得够用了</strong></p>
<h3 id="用法"><a class="markdownIt-Anchor" href="#用法"></a> 用法</h3>
<p>Marp提供两套主题，都说专治选择障碍。特别是默认主题，简直是选择障碍患者的福音。</p>
<p>下载完安装后，两个例子中已经有比较基本的说明了。但有一些东西还是很容易被忽略。</p>
<h4 id="设置页码"><a class="markdownIt-Anchor" href="#设置页码"></a> 设置页码</h4>
<p>页码是可以随时开启，随时关闭的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- page_number: true --&gt;</span><br></pre></td></tr></table></figure>
<p>在任意页输入以上代码就可以开启，但如果你要在哪页关闭显示页码，可以用false</p>
<h4 id="背景设置"><a class="markdownIt-Anchor" href="#背景设置"></a> 背景设置</h4>
<p>因为只有两套模版，所以，想要好看点，还是需要一些背景图片的。刚开始我只知道用<code>![bg](aaa.png)</code>的方式引入背景，但后来发现背景图片其实是和背景主题叠加了的。</p>
<p>后来细细看了文档才发现，原来可以用开关开启，还可以设置背景的大小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![bg original 70%](aaa.png)</span><br></pre></td></tr></table></figure>
<p>使用了<code>original</code>之后，背景就变成了纯图片，而70%则可以指定图片大小。</p>
<p>当然，更有趣的是，可以用多个背景并排的方式来完成部分植入。</p>
<p>比如：</p>
<img src="/post/4f712e63/4f712e63/ppt1.png" class title="效果">
<p>则是用如下代码完成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![bg 450% original](robot2.png)</span><br><span class="line">![bg]()</span><br><span class="line">![bg]()</span><br><span class="line">![bg]()</span><br><span class="line">![bg]()</span><br><span class="line">![bg 450% original](robot2.png)</span><br></pre></td></tr></table></figure>
<p>还有一个有意思的是，如果不设置图片的比例，那么会按照扩充满整个屏幕来设置，但如果设置比例，如上面的代码，则100%是整个页面宽度/6之后的图片大小。</p>
<p>当然，灵活运用这一个特性，也能带来很多意想不到的效果。</p>
<h4 id="emoji"><a class="markdownIt-Anchor" href="#emoji"></a> emoji</h4>
<p>值得一提的是Marp的emoji表情选择的很是我喜欢的那种，而且可以按照段落来调整大小</p>
<p>比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># :cat:</span><br><span class="line">## :fish:</span><br><span class="line">### :tiger:</span><br><span class="line">#### :bird:</span><br></pre></td></tr></table></figure>
<p>表情的大小会随着段落比较而变化。还是很不错的。</p>
<p><strong>另外，似乎软件的作者正在开发新的软件，很是期待</strong></p>
<p>🐱</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04安装Open vSwitch</title>
    <url>/post/b2c6ed30.html</url>
    <content><![CDATA[<h3 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h3>
<ul>
<li>获取安装包</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/openvswitch/ovs.git</span><br></pre></td></tr></table></figure>
<ul>
<li>安装必要的依赖</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install autoconf libtool make libssl-dev libcap-ng-dev</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3>
<ul>
<li>当使用源代码时，需要自己创建<code>configure</code>脚本</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ./boot.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>配置并开启内核模块</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ./configure --prefix=/usr --localstatedir=/var --sysconfdir=/etc --with-linux=/lib/modules/$(uname -r)/build</span><br></pre></td></tr></table></figure>
<ul>
<li>安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure>
<ul>
<li>安装内核模块</li>
</ul>
<p>该步骤可能会报错，请参看后文</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ make modules_install</span><br></pre></td></tr></table></figure>
<p>官方安装文档中提到，你有可能之前已经安装了ovs的模块，为了确保使用的是你刚才编译的，则需要在<code>/etc/depmod.d/</code>中添加如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ config_file=&quot;/etc/depmod.d/openvswitch.conf&quot;</span><br><span class="line">$ for module in datapath/linux/*.ko; do</span><br><span class="line">   modname=&quot;$(basename $&#123;module&#125;)&quot;</span><br><span class="line">   echo &quot;override $&#123;modname%.ko&#125; * extra&quot; &gt;&gt; &quot;$config_file&quot;</span><br><span class="line">   echo &quot;override $&#123;modname%.ko&#125; * weak-updates&quot; &gt;&gt; &quot;$config_file&quot;</span><br><span class="line">   done</span><br><span class="line">$ depmod -a</span><br></pre></td></tr></table></figure>
<ul>
<li>加载内核模块</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ /sbin/modprobe openvswitch</span><br></pre></td></tr></table></figure>
<ul>
<li>验证</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ /sbin/lsmod | grep openvswitch</span><br><span class="line">openvswitch           303104  0</span><br><span class="line">tunnel6                16384  1 openvswitch</span><br><span class="line">nf_nat_ipv6            16384  1 openvswitch</span><br><span class="line">nf_defrag_ipv6         36864  2 openvswitch,nf_conntrack_ipv6</span><br><span class="line">nf_nat_ipv4            16384  2 openvswitch,iptable_nat</span><br><span class="line">nf_nat                 28672  6 nf_nat_redirect,openvswitch,nf_nat_ipv4,nf_nat_ipv6,xt_nat,nf_nat_masquerade_ipv4</span><br><span class="line">nf_conntrack          106496  11 xt_CT,openvswitch,nf_nat,nf_nat_ipv4,nf_nat_ipv6,xt_conntrack,nf_nat_masquerade_ipv4,nf_conntrack_netlink,xt_connmark,nf_conntrack_ipv4,nf_conntrack_ipv6</span><br><span class="line">libcrc32c              16384  2 raid456,openvswitch</span><br></pre></td></tr></table></figure>
<h3 id="启动服务"><a class="markdownIt-Anchor" href="#启动服务"></a> 启动服务</h3>
<p>官方说明中提到有一个<code>ovs-ctl</code>的命令，然而，我安装完之后并没有这个命令。可能官方文档比较老了吧。</p>
<h4 id="创建必要的目录"><a class="markdownIt-Anchor" href="#创建必要的目录"></a> 创建必要的目录</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /etc/openvswitch</span><br><span class="line">$ mkdir -p /var/log/openvswitch</span><br><span class="line">$ mkdir -p /var/run/openvswitch</span><br></pre></td></tr></table></figure>
<h4 id="配置ovsdb-server"><a class="markdownIt-Anchor" href="#配置ovsdb-server"></a> 配置ovsdb-server</h4>
<ul>
<li>从源文件目录创建<code>conf.db</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ovs$ ovsdb-tool create /etc/openvswitch/conf.db \</span><br><span class="line">    vswitchd/vswitch.ovsschema</span><br></pre></td></tr></table></figure>
<ul>
<li>配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ovsdb-server --remote=punix:/var/run/openvswitch/db.sock \</span><br><span class="line">    --remote=db:Open_vSwitch,Open_vSwitch,manager_options \</span><br><span class="line">    --private-key=db:Open_vSwitch,SSL,private_key \</span><br><span class="line">    --certificate=db:Open_vSwitch,SSL,certificate \</span><br><span class="line">    --bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert \</span><br><span class="line">    --pidfile --detach --log-file</span><br></pre></td></tr></table></figure>
<ul>
<li>初始化数据库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ovs-vsctl --no-wait init</span><br></pre></td></tr></table></figure>
<h4 id="启动ovs进程"><a class="markdownIt-Anchor" href="#启动ovs进程"></a> 启动ovs进程</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ovs-vswitchd --pidfile --detach --log-file</span><br></pre></td></tr></table></figure>
<h3 id="验证"><a class="markdownIt-Anchor" href="#验证"></a> 验证</h3>
<ul>
<li>创建bridge</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ovs-vsctl add-br br0</span><br></pre></td></tr></table></figure>
<ul>
<li>为br0添加接口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ovs-vsctl add-port br0 eth1</span><br></pre></td></tr></table></figure>
<ul>
<li>查看配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ovs-vsctl show</span><br></pre></td></tr></table></figure>
<h3 id="问题及解决"><a class="markdownIt-Anchor" href="#问题及解决"></a> 问题及解决</h3>
<p>安装内核模块时出现如下错误，<strong>忽略即可</strong>（我还以为很严重，搜了一阵，发现不用管）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ make modules_install</span><br><span class="line">cd datapath/linux &amp;&amp; make modules_install</span><br><span class="line">make[1]: Entering directory &apos;/root/ovs/datapath/linux&apos;</span><br><span class="line">make -C /lib/modules/4.4.0-127-generic/build M=/root/ovs/datapath/linux modules_install</span><br><span class="line">make[2]: Entering directory &apos;/usr/src/linux-headers-4.4.0-127-generic&apos;</span><br><span class="line">  INSTALL /root/ovs/datapath/linux/openvswitch.ko</span><br><span class="line">At main.c:222:</span><br><span class="line">- SSL error:02001002:system library:fopen:No such file or directory: bss_file.c:175</span><br><span class="line">- SSL error:2006D080:BIO routines:BIO_new_file:no such file: bss_file.c:178</span><br><span class="line">sign-file: certs/signing_key.pem: No such file or directory</span><br><span class="line">  INSTALL /root/ovs/datapath/linux/vport-geneve.ko</span><br><span class="line">At main.c:222:</span><br><span class="line">- SSL error:02001002:system library:fopen:No such file or directory: bss_file.c:175</span><br><span class="line">- SSL error:2006D080:BIO routines:BIO_new_file:no such file: bss_file.c:178</span><br><span class="line">sign-file: certs/signing_key.pem: No such file or directory</span><br><span class="line">  INSTALL /root/ovs/datapath/linux/vport-gre.ko</span><br><span class="line">At main.c:222:</span><br><span class="line">- SSL error:02001002:system library:fopen:No such file or directory: bss_file.c:175</span><br><span class="line">- SSL error:2006D080:BIO routines:BIO_new_file:no such file: bss_file.c:178</span><br><span class="line">sign-file: certs/signing_key.pem: No such file or directory</span><br><span class="line">  INSTALL /root/ovs/datapath/linux/vport-lisp.ko</span><br><span class="line">At main.c:222:</span><br><span class="line">- SSL error:02001002:system library:fopen:No such file or directory: bss_file.c:175</span><br><span class="line">- SSL error:2006D080:BIO routines:BIO_new_file:no such file: bss_file.c:178</span><br><span class="line">sign-file: certs/signing_key.pem: No such file or directory</span><br><span class="line">  INSTALL /root/ovs/datapath/linux/vport-stt.ko</span><br><span class="line">At main.c:222:</span><br><span class="line">- SSL error:02001002:system library:fopen:No such file or directory: bss_file.c:175</span><br><span class="line">- SSL error:2006D080:BIO routines:BIO_new_file:no such file: bss_file.c:178</span><br><span class="line">sign-file: certs/signing_key.pem: No such file or directory</span><br><span class="line">  INSTALL /root/ovs/datapath/linux/vport-vxlan.ko</span><br><span class="line">At main.c:222:</span><br><span class="line">- SSL error:02001002:system library:fopen:No such file or directory: bss_file.c:175</span><br><span class="line">- SSL error:2006D080:BIO routines:BIO_new_file:no such file: bss_file.c:178</span><br><span class="line">sign-file: certs/signing_key.pem: No such file or directory</span><br><span class="line">  DEPMOD  4.4.0-127-generic</span><br><span class="line">make[2]: Leaving directory &apos;/usr/src/linux-headers-4.4.0-127-generic&apos;</span><br><span class="line">depmod `sed -n &apos;s/#define UTS_RELEASE &quot;\([^&quot;]*\)&quot;/\1/p&apos; /lib/modules/4.4.0-127-generic/build/include/generated/utsrelease.h`</span><br><span class="line">make[1]: Leaving directory &apos;/root/ovs/datapath/linux&apos;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cloud</category>
      </categories>
      <tags>
        <tag>ovs</tag>
      </tags>
  </entry>
  <entry>
    <title>gitbook+gitlab发布私有的图书仓库</title>
    <url>/post/51748f3c.html</url>
    <content><![CDATA[<p>近期带着一些同事学习python，开始用markdown的格式写了很多练习题，一直有想法将其发布成一本电子书在公司内部分享。但由于有些内容可能涉及公司相关，无法直接对外发布。而公司内部自建了一个gitlab服务器，一直用于托管一些不是很重要的代码。所以，便有了将markdown托管到gitlab上，然后使用gitbook在内部进行发布。</p>
<p>另一方面，由于最近痴迷于Docker，所以，也同样将gitbook打包成docker image，用于快速发布。这篇文章主要用于记录整个操作过程。</p>
<a id="more"></a>
<h2 id="gitbookdocker"><a class="markdownIt-Anchor" href="#gitbookdocker"></a> gitbook+docker</h2>
<h3 id="本地安装"><a class="markdownIt-Anchor" href="#本地安装"></a> 本地安装</h3>
<p>可参看gitbook的<a href="https://toolchain.gitbook.com/setup.html">官方文档</a></p>
<ul>
<li>
<p>环境需求</p>
<p>gitbook需要nodejs环境</p>
<ul>
<li>NodeJS (v4.0.0 and above is recommended)</li>
</ul>
</li>
<li>
<p>安装gitbook-cli</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install gitbook-cli -g</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>创建一本书</p>
<p><strong>当使用gitlab时，可跳过此步骤</strong></p>
<ul>
<li>创建存放书籍的目录</li>
</ul>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir mybook</span><br></pre></td></tr></table></figure>
<ul>
<li>初始化</li>
</ul>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gitbook init</span><br></pre></td></tr></table></figure>
<p>初始化完成后，将生成<code>SUMMARY.md</code>和<code>README.md</code></p>
<ul>
<li>插件安装</li>
</ul>
<p>如果没有生成book.json，可自行创建</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;root&quot;: &quot;./&quot;,</span><br><span class="line">&quot;title&quot;: &quot;mybook&quot;,</span><br><span class="line">&quot;head_title&quot;: &quot;My first book&quot;,</span><br><span class="line">&quot;description&quot;: &quot;test with gitbook&quot;,</span><br><span class="line">&quot;author&quot;: &quot;myname&quot;,</span><br><span class="line">&quot;output.name&quot;: &quot;practice&quot;,</span><br><span class="line"></span><br><span class="line">&quot;gitbook&quot;: &quot;&gt;= 3.0.0&quot;,</span><br><span class="line"></span><br><span class="line">&quot;language&quot;: &quot;zh-hans&quot;,</span><br><span class="line">&quot;plugins&quot;: [</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure>
<p>将插件在<code>plugins</code>字段中进行声明后，执行以下命令进行安装</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gitbook install</span><br></pre></td></tr></table></figure>
<ul>
<li>预览和发布自己的书</li>
</ul>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gitbook serve</span><br></pre></td></tr></table></figure>
<p>随后可登陆http://localhost:4000来预览自己的书</p>
</li>
</ul>
<h3 id="docker镜像"><a class="markdownIt-Anchor" href="#docker镜像"></a> docker镜像</h3>
<p>其实在docker hub上搜索便可以得到gitbook的镜像，但本着学习的态度，还是自己动手练习制作自己的docker镜像。</p>
<p>由于nodejs有官方提供的docker镜像，所以，一切变得很简单</p>
<ul>
<li>Dockerfile</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">8</span>-alpine</span><br><span class="line"><span class="keyword">MAINTAINER</span> Bo Qi &lt;simble1986@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install gitbook-cli -g &amp;&amp; npm install &amp;&amp; gitbook install</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /book</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">4000</span> <span class="number">35729</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> gitbook install &amp;&amp; gitbook serve</span></span><br></pre></td></tr></table></figure>
<ul>
<li>编译docker镜像</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build --tag mygitbook .</span><br></pre></td></tr></table></figure>
<h2 id="书的结构"><a class="markdownIt-Anchor" href="#书的结构"></a> 书的结构</h2>
<p>当使用<code>gitbook init</code>后会在当前目录生成两个文件：<code>README.md</code>和<code>SUMMARY.md</code>.</p>
<p>其中，<code>README.md</code>用来对本书进行一些说明</p>
<p>而<code>SUMMARY.md</code>则用来创建目录结构。</p>
<h3 id="summarymd"><a class="markdownIt-Anchor" href="#summarymd"></a> <a href="http://SUMMARY.md">SUMMARY.md</a></h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Summary</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>[<span class="string">介绍</span>](<span class="link">README.md</span>)</span><br><span class="line"><span class="bullet">* </span>[<span class="string">Git使用</span>](<span class="link">gitSetup.md</span>)</span><br><span class="line"><span class="bullet">* </span>[<span class="string">Python基础</span>](<span class="link">part1/README.md</span>)</span><br><span class="line"><span class="bullet">    * </span>[<span class="string">练习1-列表</span>](<span class="link">part1/1.md</span>)</span><br><span class="line"><span class="bullet">    * </span>[<span class="string">练习2-字典</span>](<span class="link">part1/2.md</span>)</span><br><span class="line"><span class="bullet">    * </span>[<span class="string">练习3-数据结构嵌套</span>](<span class="link">part1/3.md</span>)</span><br><span class="line"><span class="bullet">    * </span>[<span class="string">练习4-运算符</span>](<span class="link">part1/4.md</span>)</span><br><span class="line"><span class="bullet">    * </span>[<span class="string">练习5-逻辑控制</span>](<span class="link">part1/5.md</span>)</span><br><span class="line"><span class="bullet">    * </span>[<span class="string">练习6-异常处理</span>](<span class="link">part1/6.md</span>)</span><br><span class="line"><span class="bullet">    * </span>[<span class="string">练习7-函数</span>](<span class="link">part1/7.md</span>)</span><br><span class="line"><span class="bullet">    * </span>[<span class="string">练习8-文件操作</span>](<span class="link">part1/8.md</span>)</span><br><span class="line"><span class="bullet">    * </span>[<span class="string">轻松一刻-猜数字游戏</span>](<span class="link">part1/happy1.md</span>)</span><br><span class="line"><span class="bullet">    * </span>[<span class="string">练习9-类.1</span>](<span class="link">part1/9.md</span>)</span><br><span class="line"><span class="bullet">    * </span>[<span class="string">练习10-类.2</span>](<span class="link">part1/10.md</span>)</span><br><span class="line"><span class="bullet">    * </span>[<span class="string">练习11-类的继承</span>](<span class="link">part1/11.md</span>)</span><br></pre></td></tr></table></figure>
<h3 id="bookjson"><a class="markdownIt-Anchor" href="#bookjson"></a> book.json</h3>
<p>需要自己创建book.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"root"</span>: <span class="string">"./"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"练习python"</span>,</span><br><span class="line">    <span class="attr">"head_title"</span>: <span class="string">"通过练习的方式来学习python"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"通过小练习一点一点熟悉python"</span>,</span><br><span class="line">    <span class="attr">"author"</span>: <span class="string">"myname(simble1986@gmail.com)"</span>,</span><br><span class="line">    <span class="attr">"output.name"</span>: <span class="string">"通过练习学脚本"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"gitbook"</span>: <span class="string">"3.2.3"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"language"</span>: <span class="string">"zh-hans"</span>,</span><br><span class="line">    <span class="attr">"links"</span> : &#123;</span><br><span class="line">    <span class="attr">"sidebar"</span> : &#123;</span><br><span class="line">        <span class="attr">"Home"</span> : <span class="string">"http://www.simble.site"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"plugins"</span>: [</span><br><span class="line">        <span class="string">"autotheme"</span>,</span><br><span class="line">        <span class="string">"prism"</span>,</span><br><span class="line">        <span class="string">"prism-themes"</span>,</span><br><span class="line">        <span class="string">"-highlight"</span>,</span><br><span class="line">        <span class="string">"-search"</span>,</span><br><span class="line">        <span class="string">"search-pro"</span>,</span><br><span class="line">        <span class="string">"emphasize"</span>,</span><br><span class="line">        <span class="string">"splitter"</span>,</span><br><span class="line">        <span class="string">"tbfed-pagefooter"</span>,</span><br><span class="line">        <span class="string">"toggle-chapters"</span>,</span><br><span class="line">        <span class="string">"codeblock-filename"</span>,</span><br><span class="line">        <span class="string">"ace"</span>,</span><br><span class="line">        <span class="string">"simple-page-toc"</span>,</span><br><span class="line">        <span class="string">"edit-link"</span>,</span><br><span class="line">        <span class="string">"copy-code-button"</span>,</span><br><span class="line">        <span class="string">"alerts"</span>,</span><br><span class="line">        <span class="string">"anchor-navigation-ex"</span>,</span><br><span class="line">        <span class="string">"theme-comscore"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="git-lab归档"><a class="markdownIt-Anchor" href="#git-lab归档"></a> git-lab归档</h3>
<p>在gitlab上创建自己的project并归档</p>
<h2 id="在服务器上用docker启动预览"><a class="markdownIt-Anchor" href="#在服务器上用docker启动预览"></a> 在服务器上用docker启动预览</h2>
<ul>
<li>从gitlab上clone书的结构</li>
<li>启动docker并挂载gitbook的目录到docker中</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d -p 80:4000 -v /mybook:/book mygitbook</span><br></pre></td></tr></table></figure>
<h2 id="插件及说明"><a class="markdownIt-Anchor" href="#插件及说明"></a> 插件及说明</h2>
<p>非常感谢<a href="http://gitbook.zhangjikai.com/plugins.html">Zhangjikai的插件说明文档</a>，然后我发现<a href="http://blog.zhangjikai.com/">Zhangjikai</a>和我一样使用了Hexo搭建了自己的blog，并且同样适用了Next的主题</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
  </entry>
  <entry>
    <title>python virtenv环境搭建</title>
    <url>/post/4926e490.html</url>
    <content><![CDATA[<p>近期由于组内测试框架更新频繁，且由于框架采用了插件形式，安装包很多。当使用同一台服务器来安装时，可能会导致生产环境破坏。为此，必须采用virtenv方式。</p>
<p>virtualenv的环境建立并不复杂，但每次都需要去查一番。特此记录</p>
<a id="more"></a>
<h4 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h4>
<p>安装virtualenv</p>
<ul>
<li>python2.7</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure>
<ul>
<li>python3</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install virtualenv</span><br></pre></td></tr></table></figure>
<h4 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h4>
<ul>
<li>创建工作目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@vm1:/home/<span class="built_in">test</span><span class="comment"># mkdir myproject</span></span><br><span class="line">root@vm1:/home/<span class="built_in">test</span><span class="comment"># cd myproject</span></span><br></pre></td></tr></table></figure>
<ul>
<li>创建独立的python运行环境</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@vm1:/home/<span class="built_in">test</span><span class="comment"># virtualenv venv</span></span><br><span class="line">New python executable <span class="keyword">in</span> /home/<span class="built_in">test</span>/myproject/venv/bin/python</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br><span class="line">root@vm1:/home/<span class="built_in">test</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>
<ul>
<li>引用新的环境变量</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@vm1:/home/<span class="built_in">test</span><span class="comment"># source venv/bin/activate</span></span><br><span class="line">(venv)root@vm1:/home/<span class="built_in">test</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>
<ul>
<li>开始使用</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv)root@vm1:/home/<span class="built_in">test</span><span class="comment"># pip install docker</span></span><br></pre></td></tr></table></figure>
<ul>
<li>退出当前venv环境</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(venv)root@vm1:/home/<span class="built_in">test</span><span class="comment"># deactivate</span></span><br><span class="line">root@vm1:/home/<span class="built_in">test</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>
<h3 id="一个小问题"><a class="markdownIt-Anchor" href="#一个小问题"></a> 一个小问题</h3>
<p>git clone时遇到<code>server certificate verification failed. CAfile: /etc/ssl/certs/ca-certificates.crt CRLfile: none</code>的解决方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GIT_SSL_NO_VERIFY=1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker API一种连接到PTY的交互方法</title>
    <url>/post/b18ab8ad.html</url>
    <content><![CDATA[<p>折腾了一周多，终于搞定了在docker的python API下，当执行exec_run时，如何连接container的PTY。</p>
<p>当弄明白之后，才发现原来是那么简单。之前几乎搜遍了google和百度，都没有找到相关的文章</p>
<a id="more"></a>
<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2>
<p>这两年，docker的发展如火如荼，作为网络测试，我们也在尝试着将docker引入测试中，来更多的模拟真实用户，并实现自动化。</p>
<p>Pexpect是一个非常强大且好用的工具，当需要与设备和PC连接时，基本上都会用到。而之前都直接使用spawn一个命令行来进行连接</p>
<p>本篇博文将介绍一种使用pexpect的fdspawn，通过socket方式连接到container的方法，以便与远程的container进行交互</p>
<h2 id="自动化思路"><a class="markdownIt-Anchor" href="#自动化思路"></a> 自动化思路</h2>
<ol>
<li>client通过python API连接到docker</li>
<li>创建一个container并保持运行</li>
<li>使用exec_run()新建一个连接，运行<code>/bin/bash</code>，并开启socket方式</li>
<li>使用pexpect的fdspawn连接exec_run()返回的socket</li>
</ol>
<h3 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h3>
<ul>
<li>Docker开启remote API</li>
</ul>
<p>参见之前博文</p>
<ul>
<li>Docker Client</li>
</ul>
<p>安装必要的包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install docker</span><br><span class="line">$ pip install pexpect</span><br></pre></td></tr></table></figure>
<h2 id="开始使用"><a class="markdownIt-Anchor" href="#开始使用"></a> 开始使用</h2>
<ul>
<li>创建container</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> docker</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client=docker.DockerClient(base_url=<span class="string">'tcp://10.0.0.10:1234'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c1 = client.containers.run(<span class="string">"ubuntu"</span>, detach=<span class="literal">True</span>, tty=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>连接container</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>res = c1.exec_run(<span class="string">"/bin/bash"</span>, socket=<span class="literal">True</span>, stdin=<span class="literal">True</span>, tty=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>res</span><br><span class="line">ExecResult(exit_code=<span class="literal">None</span>, output=&lt;socket object, fd=<span class="number">15</span>, family=<span class="number">1</span>, type=<span class="number">1</span>, protocol=<span class="number">0</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sock = res.output</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sock</span><br><span class="line">&lt;socket object, fd=<span class="number">15</span>, family=<span class="number">1</span>, type=<span class="number">1</span>, protocol=<span class="number">0</span>&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用pexpect连接</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pexpect.fdpexpect</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session=pexpect.fdpexpect.fdspawn(sock.fileno(),timeout=<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&gt;&gt;&gt; session.send(<span class="string">"ls\n"</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.expect(<span class="string">"#"</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.before</span><br><span class="line"><span class="string">' ls\r\n\x1b[0m\x1b[01;34mbin\x1b[0m   \x1b[01;34mdev\x1b[0m  \x1b[01;34mhome\x1b[0m  \x1b[01;34mlib64\x1b[0m  \x1b[01;34mmnt\x1b[0m  \x1b[01;34mproc\x1b[0m  \x1b[01;34mrun\x1b[0m   \x1b[01;34msrv\x1b[0m  \x1b[30;42mtmp\x1b[0m  \x1b[01;34mvar\x1b[0m\r\n\x1b[01;34mboot\x1b[0m  \x1b[01;34metc\x1b[0m  \x1b[01;34mlib\x1b[0m   \x1b[01;34mmedia\x1b[0m  \x1b[01;34mopt\x1b[0m  \x1b[01;34mroot\x1b[0m  \x1b[01;34msbin\x1b[0m  \x1b[01;34msys\x1b[0m  \x1b[01;34musr\x1b[0m\r\n\x1b]0;root@6a097ddbe55d: /\x07root@6a097ddbe55d:/'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.after</span><br><span class="line"><span class="string">'#'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<h3 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h3>
<ul>
<li>在使用exec_run()执行开启命令时，需要指定<code>stdin=True</code>，否则，pexpect的send()将无法将命令发送至container</li>
<li>同样，在使用exec_run()时，需要指定<code>tty=True</code>，否则，将没有命令行提示符，无法进行匹配</li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>pexpect</tag>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>dockerpty使用</title>
    <url>/post/1c49a9aa.html</url>
    <content><![CDATA[<p>本篇博客将介绍在使用docker API时，如何监管container的PTY实现交互</p>
<h2 id="问题引入"><a class="markdownIt-Anchor" href="#问题引入"></a> 问题引入</h2>
<p>docker官方已经提供了API用来管理client，container，image，network等，基本的操作覆盖了docker CLI相关功能，但docker的API现在只能使用exec_run来执行一条命令，中间无法进行交互，希望能有一个类似于<code>-it</code>的方式来完成交互操作。</p>
<p>经过几天的学习和测试，发现其实docker的<code>containers.run()</code>和<code>containers.exec_run()</code>都是可以设置<code>stdin=True</code>, <code>tty=True</code>。但开启这些之后，将返回一个socket，需要自己来进行处理。</p>
<p>google大法后，找到了一个<strong>dockerpty</strong>的python lib，可以完成这件事情</p>
<a id="more"></a>
<h2 id="环境搭建"><a class="markdownIt-Anchor" href="#环境搭建"></a> 环境搭建</h2>
<p>根据<a href="https://github.com/d11wtq/dockerpty">dockerpty</a>的github上提到的安装过程，只需要<code>pip install dockerpty</code>即可完成安装。</p>
<p>但源码已经有两年没有更新了，该版本无法在新的docker API上正常工作</p>
<p>fork了工程后，对其中的代码涉及到的docker API进行更新后，测试可以正常工作，最新的代码已经上传到git上<a href="https://github.com/simble1986/dockerpty">simble1986/dockerpty</a></p>
<h4 id="依赖"><a class="markdownIt-Anchor" href="#依赖"></a> 依赖</h4>
<p>原有的project上提到依赖的docker api为<code>docker-py&gt;=0.3.2</code>，但docker的python API已经更新</p>
<ul>
<li>安装docker API</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install docker</span><br></pre></td></tr></table></figure>
<h4 id="安装步骤"><a class="markdownIt-Anchor" href="#安装步骤"></a> 安装步骤</h4>
<ul>
<li>获取源码</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/simble1986/dockerpty.git</span><br></pre></td></tr></table></figure>
<ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip uninstall dockerpty</span><br><span class="line">$ <span class="built_in">cd</span> dockerpty</span><br><span class="line">$ python setup.py install</span><br></pre></td></tr></table></figure>
<h2 id="相关api"><a class="markdownIt-Anchor" href="#相关api"></a> 相关API</h2>
<p>参看docker官方<a href="https://docker-py.readthedocs.io/en/stable/index.html">API文档</a>，以下主要对container相关参数加以说明</p>
<ul>
<li>tty (bool) – Allocate a pseudo-TTY.</li>
<li>stdin_open (bool) – Keep STDIN open even if not attached.</li>
</ul>
<h2 id="基本使用"><a class="markdownIt-Anchor" href="#基本使用"></a> 基本使用</h2>
<ul>
<li>连接client</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">root@slt-docker:/home/bqi<span class="comment"># python</span></span><br><span class="line">Python <span class="number">2.7</span><span class="number">.12</span> (default, Dec  <span class="number">4</span> <span class="number">2017</span>, <span class="number">14</span>:<span class="number">50</span>:<span class="number">18</span>)</span><br><span class="line">[GCC <span class="number">5.4</span><span class="number">.0</span> <span class="number">20160609</span>] on linux2</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> docker</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> dockerpty</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client=docker.from_env()</span><br></pre></td></tr></table></figure>
<p><strong>注</strong>： 支持远程API</p>
<ul>
<li>创建container</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>test1 = client.containers.create(<span class="string">"ubuntu"</span>,<span class="string">"/bin/bash"</span>,tty=<span class="literal">True</span>,stdin_open=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>使用dockerpty</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dockerpty.start(client,test1)</span><br><span class="line">root@d6ddcf619602:/<span class="comment"># ls</span></span><br><span class="line">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">root@d6ddcf619602:/<span class="comment"># exit</span></span><br><span class="line">exit</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>dockerpty</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker中无密码apt安装mysql</title>
    <url>/post/70cf198a.html</url>
    <content><![CDATA[<h3 id="问题出现"><a class="markdownIt-Anchor" href="#问题出现"></a> 问题出现</h3>
<p>Linux在第一次安装有些软件时会有交互的输入的需求，比如mysql在首次安装时需要设置root的密码。这在正常配置过程中没什么问题，但在使用DockerFile创建docker镜像时，则遇到了麻烦。</p>
<a id="more"></a>
<h3 id="解决思路"><a class="markdownIt-Anchor" href="#解决思路"></a> 解决思路</h3>
<p>如果将安装好的mysql-server使用apt remove从系统中卸载后，再次重新安装，则不再需要输入密码。另外当安装完一些软件后，可以使用dpkg-config来重新配置。</p>
<p>这样，就可以在安装软件前先对系统做好相关配置。接下来，就是需要获取软件的必要配置项</p>
<h3 id="获取软件必要配置项"><a class="markdownIt-Anchor" href="#获取软件必要配置项"></a> 获取软件必要配置项</h3>
<h4 id="下载软件包"><a class="markdownIt-Anchor" href="#下载软件包"></a> 下载软件包</h4>
<p>可以通过网上搜索方式下载相关的deb包，但众所周知，Linux的软件包版本多，很多情况下并不知道需要安装哪个版本。但可以使用apt来下载相应的软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt-get -d install -y mysql-server</span><br></pre></td></tr></table></figure>
<p>使用apt-get的-d参数，将只会下载，不进行安装。下载完毕后，软件包位于<code>/var/cache/apt/archives</code>目录下。</p>
<h4 id="获取配置项"><a class="markdownIt-Anchor" href="#获取配置项"></a> 获取配置项</h4>
<p>进入软件包的存放目录，然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg-preconfigure mysql-server-5.1_5.1.49-3_amd64.deb</span><br></pre></td></tr></table></figure>
<p>使用<code>debconfig-show</code>来查看相应的配置项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ debconf-show mysql-server</span><br><span class="line">  mysql-server/root_password: (password omitted)</span><br><span class="line">  mysql-server/root_password_again: (password omitted)</span><br><span class="line">  mysql-server/error_setting_password:</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p>可以看到，有两项是必须配置的：<code>mysql-server/root_password</code>和<code>mysql-server/root_password_again</code></p>
<h4 id="预配置"><a class="markdownIt-Anchor" href="#预配置"></a> 预配置</h4>
<ul>
<li>创建配置文件</li>
</ul>
<p>在合适的目录下创建一个文件，例如<code>mysql-passwd</code>，输入以下内容</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">debconf mysql-server/root_password password <span class="number">123456</span></span><br><span class="line">debconf mysql-server/root_password_again password <span class="number">123456</span></span><br></pre></td></tr></table></figure>
<ul>
<li>加载配置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ debconf-set-selections mysql-passwd</span><br></pre></td></tr></table></figure>
<h4 id="测试结果"><a class="markdownIt-Anchor" href="#测试结果"></a> 测试结果</h4>
<p>再次安装mysql-server，将不再需要输入密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt-get install -y mysql-server</span><br></pre></td></tr></table></figure>
<h3 id="dockerfile处理"><a class="markdownIt-Anchor" href="#dockerfile处理"></a> DockerFile处理</h3>
<p>DockerFile应当尽量避免不需要的操作，所以，获取配置项的操作可以提前在实验环境中完成。</p>
<p>可将获取的命令行保存为本地文件，使用时copy过去。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> ./mysql-passwd /tmp/mysql-passwd</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; debconf-set-selections /tmp/mysql-passwd &amp;&amp; apt-get install -yqq mysql-server  &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br></pre></td></tr></table></figure>
<p>或者是在DockerFile中直接生成，这时则可以将mysql passwd设置为参数</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> debconf mysql-server/root_password password 123456 &gt; /tmp/mysql-passwd &amp;&amp; <span class="built_in">echo</span> debconf mysql-server/root_password_again password 123456 &gt;&gt; /tmp/mysql-passwd</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; debconf-set-selections /tmp/mysql-passwd &amp;&amp; apt-get install -yqq mysql-server  &amp;&amp; rm -rf /var/lib/apt/lists/*</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>DockerFile</tag>
        <tag>mysql-server</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Next上开启Valine评论系统</title>
    <url>/post/a072bce6.html</url>
    <content><![CDATA[<p>朋友之前问怎么没有开评论系统，倒不是不想开，而是刚开始建站的时候浏览了好多博文，似乎很多原来的接口都在hexo不太好用了。特别是很多博文都是两年前写的，当然，大多数其他功能都没问题</p>
<a id="more"></a>
<h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2>
<h3 id="valine"><a class="markdownIt-Anchor" href="#valine"></a> Valine</h3>
<p><a href="https://valine.js.org/">Valine</a>是一款基于<a href="https://leancloud.cn/">Leancloud</a>的快速、简洁且高效的无后端评论系统。</p>
<h3 id="leancloud"><a class="markdownIt-Anchor" href="#leancloud"></a> Leancloud</h3>
<p>我的理解，<a href="https://leancloud.cn/">Leancloud</a>相当于是一个数据托管平台，可以帮助应用存储相关数据。Valine主要用到的是其中的数据存储——comments</p>
<h2 id="环境说明"><a class="markdownIt-Anchor" href="#环境说明"></a> 环境说明</h2>
<p>使用了最新版的<a href="https://hexo.io/">Hexo</a>以及最新版的<a href="https://github.com/theme-next/hexo-theme-next">Next主题</a></p>
<h2 id="获取appid"><a class="markdownIt-Anchor" href="#获取appid"></a> 获取AppID</h2>
<h3 id="注册leancloud"><a class="markdownIt-Anchor" href="#注册leancloud"></a> 注册Leancloud</h3>
<p>访问<a href="https://leancloud.cn/">Leancloud</a>，点击<a href="https://leancloud.cn/dashboard/login.html#/signup">免费试用</a>就会跳转到注册/登陆页面。当前支持通过Github，Weibo以及QQ进行注册</p>
<img src="/post/a072bce6/a072bce6/leancloud_signup.png" class title="注册页面">
<p><em>注册完后需要验证邮箱</em></p>
<h3 id="创建应用"><a class="markdownIt-Anchor" href="#创建应用"></a> 创建应用</h3>
<p>访问<a href="https://leancloud.cn/applist.html">控制台</a>，在控制台中创建新应用</p>
<img src="/post/a072bce6/a072bce6/leancloud_new_app.png" class title="创建应用">
<h3 id="获取应用key"><a class="markdownIt-Anchor" href="#获取应用key"></a> 获取应用Key</h3>
<p>点击新创建的应用——设置——应用Key，保存页面上的App ID以及App Key以备后续使用</p>
<img src="/post/a072bce6/a072bce6/leancloud_appkey.png" class title="应用Key">
<h2 id="配置valine"><a class="markdownIt-Anchor" href="#配置valine"></a> 配置Valine</h2>
<p>在最新版的Next主题中，已经合入了Valine的配置代码，使得配置起来非常快捷。访问<a href="https://valine.js.org/#/hexo?id=hexo-theme-next">Hexo中使用Valine</a>，点击<a href="https://github.com/iissnan/hexo-theme-next/pull/1983">merged</a>，会跳转到Next主题的merge历史</p>
<h3 id="检查相关文件"><a class="markdownIt-Anchor" href="#检查相关文件"></a> 检查相关文件</h3>
<p>可以再次检查并确认<span id="inline-yellow">主题配置文件</span>_config.xml，<code>layout/_macro/post.swig</code>和<code>layout/_third-party/comments/valine.swig</code>是否都已经合入了相关代码</p>
<h3 id="配置appkey"><a class="markdownIt-Anchor" href="#配置appkey"></a> 配置AppKey</h3>
<p>编辑<span id="inline-yellow">主题配置文件</span>_config.xml中的valine部分内容</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid: $Your APP ID # your leancloud application appid</span><br><span class="line">  appkey: $Your APP Key # your leancloud application appkey</span><br><span class="line">  notify: false # mail notifier , http<span class="variable">s:</span>//github.<span class="keyword">com</span>/xCss/Valine/wiki</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: 随便说些什么吧 # comment box placeholder</span><br><span class="line">  avatar: mm # gravatar style</span><br><span class="line">  guest_info: nick,mail,link # custom comment header</span><br><span class="line">  pageSize: <span class="number">10</span> # pagination size</span><br></pre></td></tr></table></figure>
<h3 id="重新生成页面"><a class="markdownIt-Anchor" href="#重新生成页面"></a> 重新生成页面</h3>
<p>执行命令，重新生成并部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p><strong>到这里，查看页面已经可以看到评论系统</strong></p>
<h2 id="创建留言页面"><a class="markdownIt-Anchor" href="#创建留言页面"></a> 创建留言页面</h2>
<p>可以为站点创建一个单独的留言板页面</p>
<h3 id="创建页面"><a class="markdownIt-Anchor" href="#创建页面"></a> 创建页面</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page guestbook</span><br></pre></td></tr></table></figure>
<h3 id="配置主题"><a class="markdownIt-Anchor" href="#配置主题"></a> 配置主题</h3>
<ul>
<li>修改主题配置文件</li>
</ul>
<p>在<span id="inline-yellow">主题配置文件</span>_config.xml的menu字段新增guestbook字段</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">menu</span>:</span><br><span class="line">  home: / || home</span><br><span class="line">  <span class="keyword">tag</span><span class="variable">s:</span> /<span class="keyword">tags</span>/ || <span class="keyword">tags</span></span><br><span class="line">  categorie<span class="variable">s:</span> /categories/ || <span class="keyword">th</span></span><br><span class="line">  archive<span class="variable">s:</span> /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonwea<span class="variable">l:</span> /<span class="number">404</span>/ || heartbeat</span><br><span class="line">  abou<span class="variable">t:</span> /about/ || user</span><br><span class="line">  guestbook: /guestbook/ || comments</span><br></pre></td></tr></table></figure>
<p><em>可以访问<a href="https://fontawesome.com/v4.7.0/icons/">fontawesome</a>选择自己喜欢的图标来作为留言板的图标</em></p>
<ul>
<li>本地化处理</li>
</ul>
<p>编辑对应语言的配置文件<code>themes/next/languages/zh-CN.yml</code>，在menu中增加guestbook的中文</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">menu</span>:</span><br><span class="line">  home: 首页</span><br><span class="line">  archive<span class="variable">s:</span> 归档</span><br><span class="line">  categorie<span class="variable">s:</span> 分类</span><br><span class="line">  <span class="keyword">tag</span><span class="variable">s:</span> 标签</span><br><span class="line">  abou<span class="variable">t:</span> 关于</span><br><span class="line">  <span class="built_in">search</span>: 搜索</span><br><span class="line">  schedule: 日程表</span><br><span class="line">  sitemap: 站点地图</span><br><span class="line">  commonwea<span class="variable">l:</span> 公益 <span class="number">404</span></span><br><span class="line">  guestbook: 留言</span><br></pre></td></tr></table></figure>
<h3 id="编辑页面"><a class="markdownIt-Anchor" href="#编辑页面"></a> 编辑页面</h3>
<p>编辑之前生成的guestbook页面</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 留言板</span><br><span class="line">date: <span class="number">2018</span>-<span class="number">03</span>-<span class="number">26</span> <span class="number">23</span>:<span class="number">36</span>:<span class="number">19</span></span><br><span class="line">comment<span class="variable">s:</span> true</span><br><span class="line">---</span><br><span class="line"><span class="symbol">&lt;center&gt;</span>既然来了，就是一种缘分，留下点什么吧:<span class="keyword">ca</span><span class="variable">t:</span>&lt;/<span class="keyword">center</span>&gt;</span><br></pre></td></tr></table></figure>
<p>重新部署之后就可以看到留言板了 😃</p>
<h2 id="清除测试留言"><a class="markdownIt-Anchor" href="#清除测试留言"></a> 清除测试留言</h2>
<p>为了确保留言功能已经正常工作，都会测试一下。测试完毕后，可以通过Leancloud的<a href="https://leancloud.cn/dashboard/applist.html#/apps">控制台</a>清除测试数据</p>
<p>点击<em>myblog</em>——存储——Comments，即可查看当前留言，选中测试时的留言，删除即可</p>
<img src="/post/a072bce6/a072bce6/leancloud_cleancomments.png" class title="清除测试留言">
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>Next</tag>
        <tag>Valine</tag>
      </tags>
  </entry>
  <entry>
    <title>在Ubuntu 16.04上开启Docker的Remote API</title>
    <url>/post/3e41aa59.html</url>
    <content><![CDATA[<p>由于自动化的考虑，需要用docker的remote API，尝试了多种方法，最终才找到了可行的方法</p>
<h3 id="可行的方法"><a class="markdownIt-Anchor" href="#可行的方法"></a> 可行的方法</h3>
<ul>
<li>编辑/lib/systemd/system/docker.service</li>
</ul>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>
<ul>
<li>修改ExecStart的参数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375</span><br></pre></td></tr></table></figure>
<ul>
<li>随后执行<code>service docker restart</code>时会提示<code>Warning: docker.service changed on disk. Run 'systemctl daemon-reload' to reload units.</code>则表示配置成功</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<ul>
<li>重启docker服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure>
<ul>
<li>测试是否成功</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://localhost:2375/containers/json</span><br><span class="line">[&#123;<span class="string">"Id"</span>:<span class="string">"30c8e35f1292421d11f6b09385a4fc980d6abaca591d0f52b18dbad8e4f5be04"</span>,<span class="string">"Names"</span>:[<span class="string">"/clever_murdock"</span>],<span class="string">"Image"</span>:<span class="string">"portainer/portainer"</span>,<span class="string">"ImageID"</span>:<span class="string">"sha256:a8f2aeb34cf69178be1d152759fb17ccff7915faf750c82cd7d1851b12ec7b37"</span>,<span class="string">"Command"</span>:<span class="string">"/portainer"</span>,<span class="string">"Created"</span>:1520845664,<span class="string">"Ports"</span>:[&#123;<span class="string">"IP"</span>:<span class="string">"0.0.0.0"</span>,<span class="string">"PrivatePort"</span>:9000,<span class="string">"PublicPort"</span>:9000,<span class="string">"Type"</span>:<span class="string">"tcp"</span>&#125;],<span class="string">"Labels"</span>:&#123;&#125;,<span class="string">"State"</span>:<span class="string">"running"</span>,<span class="string">"Status"</span>:<span class="string">"Up 13 minutes"</span>,<span class="string">"HostConfig"</span>:&#123;<span class="string">"NetworkMode"</span>:<span class="string">"default"</span>&#125;,<span class="string">"NetworkSettings"</span>:&#123;<span class="string">"Networks"</span>:&#123;<span class="string">"bridge"</span>:&#123;<span class="string">"IPAMConfig"</span>:null,<span class="string">"Links"</span>:null,<span class="string">"Aliases"</span>:null,<span class="string">"NetworkID"</span>:<span class="string">"78fa057306e70838bab1e18359c86bd8eff7de2285c351784ad951cd7a73f8d1"</span>,<span class="string">"EndpointID"</span>:<span class="string">"e99ca98169320155c8833a8746be7d0e1c8d98186c75fba9d9bf2486367a4e00"</span>,<span class="string">"Gateway"</span>:<span class="string">"172.17.0.1"</span>,<span class="string">"IPAddress"</span>:<span class="string">"172.17.0.2"</span>,<span class="string">"IPPrefixLen"</span>:16,<span class="string">"IPv6Gateway"</span>:<span class="string">""</span>,<span class="string">"GlobalIPv6Address"</span>:<span class="string">""</span>,<span class="string">"GlobalIPv6PrefixLen"</span>:0,<span class="string">"MacAddress"</span>:<span class="string">"02:42:ac:11:00:02"</span>,<span class="string">"DriverOpts"</span>:null&#125;&#125;&#125;,<span class="string">"Mounts"</span>:[&#123;<span class="string">"Type"</span>:<span class="string">"bind"</span>,<span class="string">"Source"</span>:<span class="string">"/opt/portainer"</span>,<span class="string">"Destination"</span>:<span class="string">"/data"</span>,<span class="string">"Mode"</span>:<span class="string">""</span>,<span class="string">"RW"</span>:<span class="literal">true</span>,<span class="string">"Propagation"</span>:<span class="string">"rprivate"</span>&#125;,&#123;<span class="string">"Type"</span>:<span class="string">"bind"</span>,<span class="string">"Source"</span>:<span class="string">"/var/run/docker.sock"</span>,<span class="string">"Destination"</span>:<span class="string">"/var/run/docker.sock"</span>,<span class="string">"Mode"</span>:<span class="string">""</span>,<span class="string">"RW"</span>:<span class="literal">true</span>,<span class="string">"Propagation"</span>:<span class="string">"rprivate"</span>&#125;]&#125;]</span><br></pre></td></tr></table></figure>
<h3 id="不可行的方法"><a class="markdownIt-Anchor" href="#不可行的方法"></a> 不可行的方法</h3>
<p>同时列出在Ubuntu上不可行的方法</p>
<ul>
<li>修改<code>/etc/default/docker</code>中的<code>DOCKER_OPTS</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DOCKER_OPTS=<span class="string">'-H fd:// -H tcp://0.0.0.0:2375'</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修改<code>/etc/init/docker.conf</code>中的<code>DOCKER_OPTS</code></li>
</ul>
<p><em>网上有人说在Ubuntu14.04上可以生效</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># modify these in /etc/default/$UPSTART_JOB (/etc/default/docker)</span></span><br><span class="line">        DOCKERD=/usr/bin/dockerd</span><br><span class="line">        DOCKER_OPTS=<span class="string">'-H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375'</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo搭建自己的博客——创建站点</title>
    <url>/post/80ca9385.html</url>
    <content><![CDATA[<h2 id="安装及配置"><a class="markdownIt-Anchor" href="#安装及配置"></a> 安装及配置</h2>
<h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3>
<p><a href="https://hexo.io">Hexo</a>是一个快速、简介且高效的博客框架，可以使用<a href="https://daringfireball.net/projects/markdown/">Markdown</a>解析文章并生成网站</p>
<a id="more"></a>
<h3 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h3>
<p><span id="inline-blue">站点配置文件</span> <code>$site_dir/_config.xml</code></p>
<p><span id="inline-yellow">主题配置文件</span><code>$site_dir/theme/$theme_dir/_config</code></p>
<h3 id="安装hexo"><a class="markdownIt-Anchor" href="#安装hexo"></a> 安装hexo</h3>
<p>当环境准备好git以及nodejs后便可以安装hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<h3 id="建站"><a class="markdownIt-Anchor" href="#建站"></a> 建站</h3>
<p>安装Hexo后，创建站点文件存放的文件夹，如<em>blog</em>，然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<p>完成后，blog目录结构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h3>
<p>修改_config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">your</span> <span class="string">site</span> <span class="string">tile</span></span><br><span class="line"><span class="attr">subtitle:</span> </span><br><span class="line"><span class="attr">description:</span> <span class="string">description</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">your</span> <span class="string">name</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure>
<h3 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h3>
<ul>
<li>清除缓存文件及已生成的静态文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
<ul>
<li>启动服务器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p><em>默认状况下，服务器将使用4000端口。可以通过<code>hexo server -p 80</code>来将server绑定至80端口</em></p>
<ul>
<li>部署网站<br>
可将网站按照_config.yml中的配置直接部署于github等（后续看心情写步骤）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<h3 id="主题修改"><a class="markdownIt-Anchor" href="#主题修改"></a> 主题修改</h3>
<p>可访问hexo官方<a href="https://hexo.io/themes/">主题库</a>选择自己喜欢的主题，并下载至theme目录下</p>
<p>修改_config.xml中的theme字段</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">theme: landscape</span><br></pre></td></tr></table></figure>
<h2 id="写作"><a class="markdownIt-Anchor" href="#写作"></a> 写作</h2>
<p>有两种方法创建文章</p>
<h3 id="创建文章"><a class="markdownIt-Anchor" href="#创建文章"></a> 创建文章</h3>
<ul>
<li>hexo命令行方式</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new &lt;layout&gt; title</span><br></pre></td></tr></table></figure>
<p><em>layout为模版</em></p>
<p>命令执行后，默认文章将位于source/_post/目录下，文件内容为：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: test</span><br><span class="line">date: 2018-03-25 23:10:04</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<ul>
<li>直接创建文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="built_in">source</span>/_post/</span><br><span class="line">$ touch myfirstblog.md</span><br></pre></td></tr></table></figure>
<p>此时文件内容为空，需要自己添加相关内容</p>
<h3 id="创建标签页"><a class="markdownIt-Anchor" href="#创建标签页"></a> 创建标签页</h3>
<ul>
<li>配置确认</li>
</ul>
<p>确认<span id="inline-blue">站点配置文件</span>中有以下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br></pre></td></tr></table></figure>
<p>确认<span id="inline-yellow">主题配置文件</span>中tags打开</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br></pre></td></tr></table></figure>
<ul>
<li>创建标签页</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>
<p>修改tags/index.md中的type为&quot;tags&quot;</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Tagcloud</span><br><span class="line">date: 2018-03-23 01:18:00</span><br><span class="line">type: "tags"</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h3 id="创建分类页面"><a class="markdownIt-Anchor" href="#创建分类页面"></a> 创建分类页面</h3>
<p>与创建标签页相似</p>
<ul>
<li>确认配置</li>
</ul>
<p><span id="inline-blue">站点配置文件</span>中有<code>category_dir: categories</code></p>
<p><span id="inline-yellow">主题配置文件</span>中的<code>分类: /categories/ || th</code>开启</p>
<ul>
<li>创建分类也</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>docker基本操作（一）</title>
    <url>/post/493f285a.html</url>
    <content><![CDATA[<p>本文作为docker使用笔记供小伙伴们参考</p>
<h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2>
<p>安装最新版的docker-ce，会将自动命令行补齐安装在<code>/usr/share/bash-completion/completions/docker</code>目录</p>
<a id="more"></a>
<p>为了方便操作，在ubuntu上打开docker命令行自动补齐功能</p>
<p>编辑/etc/bash.bashrc文件，查找completion段，将该段内容前的#删除即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># enable bash completion in interactive shells</span></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">shopt</span> -oq posix; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> [ -f /usr/share/bash-completion/bash_completion ]; <span class="keyword">then</span></span><br><span class="line">    . /usr/share/bash-completion/bash_completion</span><br><span class="line">  <span class="keyword">elif</span> [ -f /etc/bash_completion ]; <span class="keyword">then</span></span><br><span class="line">    . /etc/bash_completion</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h2 id="image操作"><a class="markdownIt-Anchor" href="#image操作"></a> image操作</h2>
<ul>
<li>build image</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker build -t mytest:latest .</span><br></pre></td></tr></table></figure>
<ul>
<li>查看image</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx                 &lt;none&gt;              73acd1f0cfad        8 days ago          109MB</span><br><span class="line">mongo                 3                   5b1317f8158f        8 days ago          366MB</span><br><span class="line">$ dockeer image ls</span><br></pre></td></tr></table></figure>
<ul>
<li>删除image</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image rm &lt;id/name&gt;</span><br><span class="line">$ docker rmi &lt;id/name&gt;</span><br></pre></td></tr></table></figure>
<h3 id="从docker-hub上获取image"><a class="markdownIt-Anchor" href="#从docker-hub上获取image"></a> 从docker hub上获取image</h3>
<p><em>国内访问docker hub较慢，可使用阿里云的docker镜像服务</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker pull nginx</span><br></pre></td></tr></table></figure>
<h2 id="continer相关"><a class="markdownIt-Anchor" href="#continer相关"></a> continer相关</h2>
<h3 id="创建docker"><a class="markdownIt-Anchor" href="#创建docker"></a> 创建docker</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d --name mytest -p 80:80 mynginx</span><br></pre></td></tr></table></figure>
<p>常用参数说明</p>
<blockquote>
<p>–rm 当运行结束（<mark>当CMD或entrypoint或docker run命令行指定的命令运行结束时，容器停止</mark>）时自动删除docker<br><br>
-it 重定向docker终端<br><br>
-d 在后台执行<br><br>
-e 添加运行时的参数，常被用于docker CMD执行时增加参数</p>
</blockquote>
<p><strong>docker支持长id和短id方式索引，亦可通过名称进行索引</strong></p>
<ul>
<li>stop/start/restart容器</li>
</ul>
<ol>
<li>通过docker stop可以停止运行的容器，也可以使用docker kill来快速停止一个容器</li>
<li>docker start会保留容器的第一次启动时的所有参数</li>
<li>docker restart可以重启容器</li>
<li>可以在启动容器时设置–restart来自动重启容器</li>
</ol>
<ul>
<li>删除容器</li>
</ul>
<ol>
<li>可以使用docker ps列出当前正在运行的容器</li>
<li>容器停止运行不代表容器已经被删除，可以使用docker ps -a</li>
<li>使用docker rm来删除一个容器</li>
<li>使用docker rmi则会删除docker的image</li>
</ol>
<h3 id="查看及操作"><a class="markdownIt-Anchor" href="#查看及操作"></a> 查看及操作</h3>
<ul>
<li>查看容器状态</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND                   CREATED             STATUS              PORTS                        NAMES</span><br><span class="line">30c8e35f1292        portainer/portainer      <span class="string">"/portainer"</span>              10 days ago         Up 2 days           0.0.0.0:9000-&gt;9000/tcp       clever_murdock</span><br></pre></td></tr></table></figure>
<p>使用docker ps -a查看所有容器（包含休眠状态）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND                   CREATED             STATUS              PORTS                        NAMES</span><br><span class="line">30c8e35f1292        portainer/portainer      <span class="string">"/portainer"</span>              10 days ago         Up 2 days           0.0.0.0:9000-&gt;9000/tcp       clever_murdock</span><br><span class="line">ef58155f9957        registry:2               <span class="string">"/entrypoint.sh /etc…"</span>    2 days ago          Exited (137) 41 hours ago                                sltregistry</span><br></pre></td></tr></table></figure>
<ul>
<li>连接到容器的终端</li>
</ul>
<p><em>尽量使用exec方法，attach连入后可查看当前容器命令运行的日志，但不当的操作容易使运行中的容器退出</em></p>
<ol>
<li>使用attach</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker attach &lt;id/name&gt;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用exec</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it &lt;id/name&gt; /bin/sh</span><br></pre></td></tr></table></figure>
<ul>
<li>查看容器运行的日志</li>
</ul>
<p>容器以<code>-d</code>参数运行时，可以使用docker logs查看运行过程中的日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker logs mytest_haproxy</span><br><span class="line">[WARNING] 079/100555 (1) : [haproxy.main()] Cannot raise FD <span class="built_in">limit</span> to 200000011, <span class="built_in">limit</span> is 1048576.</span><br><span class="line">[WARNING] 079/100555 (1) : [haproxy.main()] FD <span class="built_in">limit</span> (1048576) too low <span class="keyword">for</span> maxconn=100000000/maxsock=200000011. Please raise <span class="string">'ulimit-n'</span> to 200000011 or more to avoid any trouble.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>在树莓派上部署nodejs</title>
    <url>/post/4fa2931e.html</url>
    <content><![CDATA[<p>终于有时间在树莓派上部署一个自己的小博客了，平时用惯了ubuntu，到了树莓派上，发现并没有那么简单。首先就是apt install nodejs，安装完没有npm。不过，经过一番折腾，便有了现在的小站点</p>
<a id="more"></a>
<h2 id="安装nodejs"><a class="markdownIt-Anchor" href="#安装nodejs"></a> 安装nodejs</h2>
<p><a href="https://nodejs.org">nodejs</a>可以使用源码编译和二进制包来安装。考虑到树莓派的处理能力，要编译一个nodejs，太过耗时。直接选用官网提供的二进制包完成安装</p>
<h3 id="安装包获取"><a class="markdownIt-Anchor" href="#安装包获取"></a> 安装包获取</h3>
<p>官网上ARM的bin包有3个，分别是v6，v7和v8。而树莓派的版本是v7</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ uname -a</span><br><span class="line">Linux raspberrypi 4.9.80-v7+ <span class="comment">#1098 SMP Fri Mar 9 19:11:42 GMT 2018 armv7l GNU/Linux</span></span><br></pre></td></tr></table></figure>
<p>获取<a href="https://nodejs.org/dist/v8.10.0/node-v8.10.0-linux-armv7l.tar.xz">安装包</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://nodejs.org/dist/v8.10.0/node-v8.10.0-linux-armv7l.tar.xz</span><br></pre></td></tr></table></figure>
<h3 id="安装nodejs-2"><a class="markdownIt-Anchor" href="#安装nodejs-2"></a> 安装nodejs</h3>
<p>解压缩</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -Jxv -f node-v8.10.0-linux-armv7l.tar.xz</span><br><span class="line">node-v8.10.0-linux-armv7l/</span><br><span class="line">node-v8.10.0-linux-armv7l/README.md</span><br><span class="line">node-v8.10.0-linux-armv7l/bin/</span><br><span class="line">node-v8.10.0-linux-armv7l/bin/node</span><br><span class="line">node-v8.10.0-linux-armv7l/bin/npm</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>可根据个人喜好重命名文件夹，此处重命名为node，分别验证版本信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pi@raspberrypi:~/node $ ./bin/node -v</span><br><span class="line">v8.10.0</span><br><span class="line">pi@raspberrypi:~/node $ ./bin/npm -v</span><br><span class="line">5.6.0</span><br></pre></td></tr></table></figure>
<p>配置node和npm为全局命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pi@raspberrypi:~/node $ sudo ln /home/pi/node/bin/node /usr/<span class="built_in">local</span>/bin/node</span><br><span class="line">pi@raspberrypi:~/node $ sudo ln -s /home/pi/node/lib/node_modules/npm/bin/npm /usr/<span class="built_in">local</span>/bin/npm</span><br></pre></td></tr></table></figure>
<p>此时执行npm会报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pi@raspberrypi:~/node $ npm -v</span><br><span class="line">module.js:471</span><br><span class="line">    throw err;</span><br><span class="line">    ^</span><br><span class="line"></span><br><span class="line">Error: Cannot find module <span class="string">'/usr/local/bin/node_modules/npm/bin/npm-cli.js'</span></span><br></pre></td></tr></table></figure>
<p>需要修改/usr/local/bin/目录下的npm文件，将$basedir替换为绝对路径，此处为/home/pi/node/</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">#!/bin/<span class="keyword">sh</span></span><br><span class="line">(set -o igncr) 2&gt;/dev/null &amp;&amp; set -o igncr; # cygwin encoding fix</span><br><span class="line"></span><br><span class="line">basedir=`dirname <span class="string">"$0"</span>`</span><br><span class="line"></span><br><span class="line">case `uname` in</span><br><span class="line">    *CYGWIN*) basedir=`cygpath -w "$basedir"`;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">NODE_EXE=<span class="string">"/home/pi/node/bin/node.exe"</span></span><br><span class="line">if ! [ -x "$NODE_EXE" ]; then</span><br><span class="line">  NODE_EXE=node</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">NPM_CLI_JS=<span class="string">"/home/pi/node/lib/node_modules/npm/bin/npm-cli.js"</span></span><br><span class="line"></span><br><span class="line">case `uname` in</span><br><span class="line">  *MINGW*)</span><br><span class="line">    NPM_PREFIX=`<span class="string">"$NODE_EXE"</span> <span class="string">"$NPM_CLI_JS"</span> prefix -g`</span><br><span class="line">    NPM_PREFIX_NPM_CLI_JS=<span class="string">"$NPM_PREFIX/node_modules/npm/bin/npm-cli.js"</span></span><br><span class="line">    if [ -f "$NPM_PREFIX_NPM_CLI_JS" ]; then</span><br><span class="line">      NPM_CLI_JS=<span class="string">"$NPM_PREFIX_NPM_CLI_JS"</span></span><br><span class="line">    fi</span><br><span class="line">    ;;</span><br><span class="line">  *CYGWIN*)</span><br><span class="line">    NPM_PREFIX=`<span class="string">"$NODE_EXE"</span> <span class="string">"$NPM_CLI_JS"</span> prefix -g`</span><br><span class="line">    NPM_PREFIX_NPM_CLI_JS=<span class="string">"$NPM_PREFIX/node_modules/npm/bin/npm-cli.js"</span></span><br><span class="line">    if [ -f "$NPM_PREFIX_NPM_CLI_JS" ]; then</span><br><span class="line">      NPM_CLI_JS=<span class="string">"$NPM_PREFIX_NPM_CLI_JS"</span></span><br><span class="line">    fi</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line"><span class="string">"$NODE_EXE"</span> <span class="string">"$NPM_CLI_JS"</span> <span class="string">"$@"</span></span><br></pre></td></tr></table></figure>
<p>再次验证，npm已经可以正常工作</p>
]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>nodejs</tag>
        <tag>pi</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/post/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>
<h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
